
demo3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b64c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0008de0c  0800b8ec  0800b8ec  0000c8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080996f8  080996f8  0009a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08099700  08099700  0009a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08099704  08099704  0009a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08099708  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .L2RAM        00025800  24000078  08099780  0009b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24025878  080bef80  000c0878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  240258d8  080befe0  000c08d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002c50  24025938  080bf040  000c0938  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24028588  080bf040  000c1588  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000c0938  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c685  00000000  00000000  000c0966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003794  00000000  00000000  000dcfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  000e0780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3b  00000000  00000000  000e18d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039fdc  00000000  00000000  000e2613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6c1  00000000  00000000  0011c5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    003d4519  00000000  00000000  00137cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0050c1c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f18  00000000  00000000  0050c20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00511124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24025938 	.word	0x24025938
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b8d4 	.word	0x0800b8d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2402593c 	.word	0x2402593c
 80002dc:	0800b8d4 	.word	0x0800b8d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <__io_putchar>:
/* Retarget printf to UART */
#ifdef __GNUC__
/* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
   set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <__io_putchar+0x20>)
 8000682:	f008 fdc7 	bl	8009214 <HAL_UART_Transmit>
    return ch;
 8000686:	687b      	ldr	r3, [r7, #4]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	24027eb4 	.word	0x24027eb4

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0a8      	sub	sp, #160	@ 0xa0
 8000698:	af12      	add	r7, sp, #72	@ 0x48
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800069a:	4b86      	ldr	r3, [pc, #536]	@ (80008b4 <main+0x220>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d11b      	bne.n	80006de <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a6:	f3bf 8f4f 	dsb	sy
}
 80006aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ac:	f3bf 8f6f 	isb	sy
}
 80006b0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b2:	4b80      	ldr	r3, [pc, #512]	@ (80008b4 <main+0x220>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ba:	f3bf 8f4f 	dsb	sy
}
 80006be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c0:	f3bf 8f6f 	isb	sy
}
 80006c4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c6:	4b7b      	ldr	r3, [pc, #492]	@ (80008b4 <main+0x220>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a7a      	ldr	r2, [pc, #488]	@ (80008b4 <main+0x220>)
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d2:	f3bf 8f4f 	dsb	sy
}
 80006d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d8:	f3bf 8f6f 	isb	sy
}
 80006dc:	e000      	b.n	80006e0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006de:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006e0:	4b74      	ldr	r3, [pc, #464]	@ (80008b4 <main+0x220>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d138      	bne.n	800075e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006ec:	4b71      	ldr	r3, [pc, #452]	@ (80008b4 <main+0x220>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006f4:	f3bf 8f4f 	dsb	sy
}
 80006f8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006fa:	4b6e      	ldr	r3, [pc, #440]	@ (80008b4 <main+0x220>)
 80006fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000700:	637b      	str	r3, [r7, #52]	@ 0x34

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000704:	0b5b      	lsrs	r3, r3, #13
 8000706:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800070a:	633b      	str	r3, [r7, #48]	@ 0x30
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800070c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000718:	015a      	lsls	r2, r3, #5
 800071a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800071e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000722:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000724:	4963      	ldr	r1, [pc, #396]	@ (80008b4 <main+0x220>)
 8000726:	4313      	orrs	r3, r2
 8000728:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800072c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800072e:	1e5a      	subs	r2, r3, #1
 8000730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1ef      	bne.n	8000716 <main+0x82>
    } while(sets-- != 0U);
 8000736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000738:	1e5a      	subs	r2, r3, #1
 800073a:	633a      	str	r2, [r7, #48]	@ 0x30
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1e5      	bne.n	800070c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000740:	f3bf 8f4f 	dsb	sy
}
 8000744:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000746:	4b5b      	ldr	r3, [pc, #364]	@ (80008b4 <main+0x220>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a5a      	ldr	r2, [pc, #360]	@ (80008b4 <main+0x220>)
 800074c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000750:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
}
 8000756:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000758:	f3bf 8f6f 	isb	sy
}
 800075c:	e000      	b.n	8000760 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800075e:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f004 fdc4 	bl	80052ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f001 f906 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f001 fa7c 	bl	8001c64 <MX_GPIO_Init>
  MX_ETH_Init();
 800076c:	f001 f9b0 	bl	8001ad0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000770:	f001 f9fa 	bl	8001b68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000774:	f001 fa44 	bl	8001c00 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int 	layerId = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
			int 	tensorId = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			uint8_t *tensorIn  = l2_tensor_scratch;
 8000780:	4b4d      	ldr	r3, [pc, #308]	@ (80008b8 <main+0x224>)
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
			uint8_t *tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV1_OUT_DIM*CONV1_OUT_DIM*CONV1_OUT_CH);
 8000784:	4b4d      	ldr	r3, [pc, #308]	@ (80008bc <main+0x228>)
 8000786:	657b      	str	r3, [r7, #84]	@ 0x54

			/*Layer 1	Conv / s2
			*Convolutional
			*Cycle =c
			*/
			USR_CC_ENABLE();
 8000788:	4b4d      	ldr	r3, [pc, #308]	@ (80008c0 <main+0x22c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b4c      	ldr	r3, [pc, #304]	@ (80008c0 <main+0x22c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	4b4a      	ldr	r3, [pc, #296]	@ (80008c4 <main+0x230>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	4b49      	ldr	r3, [pc, #292]	@ (80008c8 <main+0x234>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b48      	ldr	r3, [pc, #288]	@ (80008c8 <main+0x234>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f042 0201 	orr.w	r2, r2, #1
 80007ae:	601a      	str	r2, [r3, #0]
			USR_CC_RESET();
 80007b0:	4b44      	ldr	r3, [pc, #272]	@ (80008c4 <main+0x230>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
			arm_convolve_HWC_asym_uint8(image_data, CONV1_IM_DIM, CONV1_IM_CH,
 80007b8:	2300      	movs	r3, #0
 80007ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80007bc:	4b43      	ldr	r3, [pc, #268]	@ (80008cc <main+0x238>)
 80007be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80007c0:	2350      	movs	r3, #80	@ 0x50
 80007c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80007c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80007c8:	4b41      	ldr	r3, [pc, #260]	@ (80008d0 <main+0x23c>)
 80007ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80007cc:	2302      	movs	r3, #2
 80007ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80007d0:	2301      	movs	r3, #1
 80007d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80007d4:	2300      	movs	r3, #0
 80007d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80007d8:	2301      	movs	r3, #1
 80007da:	9308      	str	r3, [sp, #32]
 80007dc:	2300      	movs	r3, #0
 80007de:	9307      	str	r3, [sp, #28]
 80007e0:	2303      	movs	r3, #3
 80007e2:	9306      	str	r3, [sp, #24]
 80007e4:	2308      	movs	r3, #8
 80007e6:	9305      	str	r3, [sp, #20]
 80007e8:	2307      	movs	r3, #7
 80007ea:	9304      	str	r3, [sp, #16]
 80007ec:	4b39      	ldr	r3, [pc, #228]	@ (80008d4 <main+0x240>)
 80007ee:	9303      	str	r3, [sp, #12]
 80007f0:	2300      	movs	r3, #0
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	237f      	movs	r3, #127	@ 0x7f
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	2363      	movs	r3, #99	@ 0x63
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	4b36      	ldr	r3, [pc, #216]	@ (80008d8 <main+0x244>)
 80007fe:	2204      	movs	r2, #4
 8000800:	21a0      	movs	r1, #160	@ 0xa0
 8000802:	4836      	ldr	r0, [pc, #216]	@ (80008dc <main+0x248>)
 8000804:	f001 fe87 	bl	8002516 <arm_convolve_HWC_asym_uint8>
									  conv1_wt, CONV1_W_Z, CONV1_IN_Z, CONV1_OUT_Z, CONV1_M_ZERO, CONV1_N_ZERO,
									  CONV1_OUT_CH, CONV1_KER_DIM,
									  CONV1_L_PADDING, CONV1_R_PADDING, CONV1_T_PADDING, CONV1_B_PADDING, CONV1_STRIDE, conv1_bias,
									  tensorOut, CONV1_OUT_DIM, l1_tensor_scratch, NULL);
			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000808:	4b2e      	ldr	r3, [pc, #184]	@ (80008c4 <main+0x230>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4934      	ldr	r1, [pc, #208]	@ (80008e0 <main+0x24c>)
 8000810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV1_IM_CH * CONV1_IM_DIM * CONV1_IM_DIM,layerId); layerId++;
 8000816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000818:	3301      	adds	r3, #1
 800081a:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 800081c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800081e:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <main+0x198>
				tensorOut = l2_tensor_scratch;
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <main+0x224>)
 8000828:	657b      	str	r3, [r7, #84]	@ 0x54
 800082a:	e001      	b.n	8000830 <main+0x19c>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV2_OUT_DIM*CONV2_OUT_DIM*CONV2_OUT_CH);
 800082c:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <main+0x228>)
 800082e:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 2	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV2_IM_DIM, CONV2_IM_CH,
 800083e:	2300      	movs	r3, #0
 8000840:	9310      	str	r3, [sp, #64]	@ 0x40
 8000842:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <main+0x238>)
 8000844:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000846:	2350      	movs	r3, #80	@ 0x50
 8000848:	930e      	str	r3, [sp, #56]	@ 0x38
 800084a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800084c:	930d      	str	r3, [sp, #52]	@ 0x34
 800084e:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <main+0x250>)
 8000850:	930c      	str	r3, [sp, #48]	@ 0x30
 8000852:	2301      	movs	r3, #1
 8000854:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000856:	2301      	movs	r3, #1
 8000858:	930a      	str	r3, [sp, #40]	@ 0x28
 800085a:	2301      	movs	r3, #1
 800085c:	9309      	str	r3, [sp, #36]	@ 0x24
 800085e:	2301      	movs	r3, #1
 8000860:	9308      	str	r3, [sp, #32]
 8000862:	2301      	movs	r3, #1
 8000864:	9307      	str	r3, [sp, #28]
 8000866:	2303      	movs	r3, #3
 8000868:	9306      	str	r3, [sp, #24]
 800086a:	2308      	movs	r3, #8
 800086c:	9305      	str	r3, [sp, #20]
 800086e:	2300      	movs	r3, #0
 8000870:	9304      	str	r3, [sp, #16]
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <main+0x254>)
 8000874:	9303      	str	r3, [sp, #12]
 8000876:	2300      	movs	r3, #0
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	2300      	movs	r3, #0
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	234a      	movs	r3, #74	@ 0x4a
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <main+0x258>)
 8000884:	2208      	movs	r2, #8
 8000886:	2150      	movs	r1, #80	@ 0x50
 8000888:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800088a:	f002 fb7d 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
									  conv2_wt, CONV2_W_Z, CONV2_IN_Z, CONV2_OUT_Z, CONV2_M_ZERO, CONV2_N_ZERO,
									  CONV2_OUT_CH, CONV2_KER_DIM,
									  CONV2_L_PADDING, CONV2_R_PADDING, CONV2_T_PADDING, CONV2_B_PADDING, CONV2_STRIDE, conv2_bias,
									  tensorOut, CONV2_OUT_DIM, l1_tensor_scratch, NULL);
			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <main+0x230>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4912      	ldr	r1, [pc, #72]	@ (80008e0 <main+0x24c>)
 8000896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV2_OUT_DIM*CONV2_OUT_DIM*CONV2_OUT_CH,layerId); layerId++;
 800089c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800089e:	3301      	adds	r3, #1
 80008a0:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 80008a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80008a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d121      	bne.n	80008f0 <main+0x25c>
				tensorOut = l2_tensor_scratch;
 80008ac:	4b02      	ldr	r3, [pc, #8]	@ (80008b8 <main+0x224>)
 80008ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80008b0:	e020      	b.n	80008f4 <main+0x260>
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	24000078 	.word	0x24000078
 80008bc:	24019078 	.word	0x24019078
 80008c0:	24000008 	.word	0x24000008
 80008c4:	24000000 	.word	0x24000000
 80008c8:	24000004 	.word	0x24000004
 80008cc:	24025954 	.word	0x24025954
 80008d0:	0800ba14 	.word	0x0800ba14
 80008d4:	4b470000 	.word	0x4b470000
 80008d8:	0800b8f4 	.word	0x0800b8f4
 80008dc:	0808068c 	.word	0x0808068c
 80008e0:	24027d54 	.word	0x24027d54
 80008e4:	0800ba7c 	.word	0x0800ba7c
 80008e8:	632b0000 	.word	0x632b0000
 80008ec:	0800ba34 	.word	0x0800ba34
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV3_OUT_DIM*CONV3_OUT_DIM*CONV3_OUT_CH);
 80008f0:	4b85      	ldr	r3, [pc, #532]	@ (8000b08 <main+0x474>)
 80008f2:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 80008f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf0c      	ite	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	2300      	movne	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 3	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV3_IM_DIM, CONV3_IM_CH,
 8000902:	2300      	movs	r3, #0
 8000904:	9310      	str	r3, [sp, #64]	@ 0x40
 8000906:	4b81      	ldr	r3, [pc, #516]	@ (8000b0c <main+0x478>)
 8000908:	930f      	str	r3, [sp, #60]	@ 0x3c
 800090a:	2350      	movs	r3, #80	@ 0x50
 800090c:	930e      	str	r3, [sp, #56]	@ 0x38
 800090e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000910:	930d      	str	r3, [sp, #52]	@ 0x34
 8000912:	4b7f      	ldr	r3, [pc, #508]	@ (8000b10 <main+0x47c>)
 8000914:	930c      	str	r3, [sp, #48]	@ 0x30
 8000916:	2301      	movs	r3, #1
 8000918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800091a:	2300      	movs	r3, #0
 800091c:	930a      	str	r3, [sp, #40]	@ 0x28
 800091e:	2300      	movs	r3, #0
 8000920:	9309      	str	r3, [sp, #36]	@ 0x24
 8000922:	2300      	movs	r3, #0
 8000924:	9308      	str	r3, [sp, #32]
 8000926:	2300      	movs	r3, #0
 8000928:	9307      	str	r3, [sp, #28]
 800092a:	2301      	movs	r3, #1
 800092c:	9306      	str	r3, [sp, #24]
 800092e:	2310      	movs	r3, #16
 8000930:	9305      	str	r3, [sp, #20]
 8000932:	2305      	movs	r3, #5
 8000934:	9304      	str	r3, [sp, #16]
 8000936:	4b77      	ldr	r3, [pc, #476]	@ (8000b14 <main+0x480>)
 8000938:	9303      	str	r3, [sp, #12]
 800093a:	2300      	movs	r3, #0
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	2300      	movs	r3, #0
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	23b2      	movs	r3, #178	@ 0xb2
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	4b74      	ldr	r3, [pc, #464]	@ (8000b18 <main+0x484>)
 8000948:	2208      	movs	r2, #8
 800094a:	2150      	movs	r1, #80	@ 0x50
 800094c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800094e:	f001 fde2 	bl	8002516 <arm_convolve_HWC_asym_uint8>
									  conv3_wt, CONV3_W_Z, CONV3_IN_Z, CONV3_OUT_Z, CONV3_M_ZERO, CONV3_N_ZERO,
									  CONV3_OUT_CH, CONV3_KER_DIM,
									  CONV3_L_PADDING, CONV3_R_PADDING, CONV3_T_PADDING, CONV3_B_PADDING, CONV3_STRIDE, conv3_bias,
									  tensorOut, CONV3_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000952:	4b72      	ldr	r3, [pc, #456]	@ (8000b1c <main+0x488>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4971      	ldr	r1, [pc, #452]	@ (8000b20 <main+0x48c>)
 800095a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800095c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV3_OUT_DIM*CONV3_OUT_DIM*CONV3_OUT_CH,layerId); layerId++;
 8000960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000962:	3301      	adds	r3, #1
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 800096a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <main+0x2e2>
				tensorOut = l2_tensor_scratch;
 8000970:	4b6c      	ldr	r3, [pc, #432]	@ (8000b24 <main+0x490>)
 8000972:	657b      	str	r3, [r7, #84]	@ 0x54
 8000974:	e001      	b.n	800097a <main+0x2e6>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV4_OUT_DIM*CONV4_OUT_DIM*CONV4_OUT_CH);
 8000976:	4b6c      	ldr	r3, [pc, #432]	@ (8000b28 <main+0x494>)
 8000978:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 800097a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf0c      	ite	eq
 8000980:	2301      	moveq	r3, #1
 8000982:	2300      	movne	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 4	Conv dw/ s2
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV4_IM_DIM, CONV4_IM_CH,
 8000988:	2300      	movs	r3, #0
 800098a:	9310      	str	r3, [sp, #64]	@ 0x40
 800098c:	4b5f      	ldr	r3, [pc, #380]	@ (8000b0c <main+0x478>)
 800098e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000990:	2328      	movs	r3, #40	@ 0x28
 8000992:	930e      	str	r3, [sp, #56]	@ 0x38
 8000994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000996:	930d      	str	r3, [sp, #52]	@ 0x34
 8000998:	4b64      	ldr	r3, [pc, #400]	@ (8000b2c <main+0x498>)
 800099a:	930c      	str	r3, [sp, #48]	@ 0x30
 800099c:	2302      	movs	r3, #2
 800099e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80009a0:	2301      	movs	r3, #1
 80009a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80009a4:	2300      	movs	r3, #0
 80009a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80009a8:	2301      	movs	r3, #1
 80009aa:	9308      	str	r3, [sp, #32]
 80009ac:	2300      	movs	r3, #0
 80009ae:	9307      	str	r3, [sp, #28]
 80009b0:	2303      	movs	r3, #3
 80009b2:	9306      	str	r3, [sp, #24]
 80009b4:	2310      	movs	r3, #16
 80009b6:	9305      	str	r3, [sp, #20]
 80009b8:	2301      	movs	r3, #1
 80009ba:	9304      	str	r3, [sp, #16]
 80009bc:	4b5c      	ldr	r3, [pc, #368]	@ (8000b30 <main+0x49c>)
 80009be:	9303      	str	r3, [sp, #12]
 80009c0:	2300      	movs	r3, #0
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2300      	movs	r3, #0
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	2342      	movs	r3, #66	@ 0x42
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4b59      	ldr	r3, [pc, #356]	@ (8000b34 <main+0x4a0>)
 80009ce:	2210      	movs	r2, #16
 80009d0:	2150      	movs	r1, #80	@ 0x50
 80009d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80009d4:	f002 fad8 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
									  conv4_wt, CONV4_W_Z, CONV4_IN_Z, CONV4_OUT_Z, CONV4_M_ZERO, CONV4_N_ZERO,
									  CONV4_OUT_CH, CONV4_KER_DIM,
									  CONV4_L_PADDING, CONV4_R_PADDING, CONV4_T_PADDING, CONV4_B_PADDING, CONV4_STRIDE, conv4_bias,
									  tensorOut, CONV4_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80009d8:	4b50      	ldr	r3, [pc, #320]	@ (8000b1c <main+0x488>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4950      	ldr	r1, [pc, #320]	@ (8000b20 <main+0x48c>)
 80009e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV4_OUT_DIM*CONV4_OUT_DIM*CONV4_OUT_CH,layerId); layerId++;
 80009e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009e8:	3301      	adds	r3, #1
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 80009ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009ee:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80009f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <main+0x368>
				tensorOut = l2_tensor_scratch;
 80009f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000b24 <main+0x490>)
 80009f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80009fa:	e001      	b.n	8000a00 <main+0x36c>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV5_OUT_DIM*CONV5_OUT_DIM*CONV5_OUT_CH);
 80009fc:	4b4e      	ldr	r3, [pc, #312]	@ (8000b38 <main+0x4a4>)
 80009fe:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 5	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV5_IM_DIM, CONV5_IM_CH,
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9310      	str	r3, [sp, #64]	@ 0x40
 8000a12:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <main+0x478>)
 8000a14:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a16:	2328      	movs	r3, #40	@ 0x28
 8000a18:	930e      	str	r3, [sp, #56]	@ 0x38
 8000a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8000a1e:	4b47      	ldr	r3, [pc, #284]	@ (8000b3c <main+0x4a8>)
 8000a20:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a22:	2301      	movs	r3, #1
 8000a24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a26:	2300      	movs	r3, #0
 8000a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9308      	str	r3, [sp, #32]
 8000a32:	2300      	movs	r3, #0
 8000a34:	9307      	str	r3, [sp, #28]
 8000a36:	2301      	movs	r3, #1
 8000a38:	9306      	str	r3, [sp, #24]
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	9305      	str	r3, [sp, #20]
 8000a3e:	2304      	movs	r3, #4
 8000a40:	9304      	str	r3, [sp, #16]
 8000a42:	4b3f      	ldr	r3, [pc, #252]	@ (8000b40 <main+0x4ac>)
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	2368      	movs	r3, #104	@ 0x68
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4b3c      	ldr	r3, [pc, #240]	@ (8000b44 <main+0x4b0>)
 8000a54:	2210      	movs	r2, #16
 8000a56:	2128      	movs	r1, #40	@ 0x28
 8000a58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000a5a:	f001 fd5c 	bl	8002516 <arm_convolve_HWC_asym_uint8>
									  conv5_wt, CONV5_W_Z, CONV5_IN_Z, CONV5_OUT_Z, CONV5_M_ZERO, CONV5_N_ZERO,
									  CONV5_OUT_CH, CONV5_KER_DIM,
									  CONV5_L_PADDING, CONV5_R_PADDING, CONV5_T_PADDING, CONV5_B_PADDING, CONV5_STRIDE, conv5_bias,
									  tensorOut, CONV5_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <main+0x488>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	492e      	ldr	r1, [pc, #184]	@ (8000b20 <main+0x48c>)
 8000a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV5_OUT_DIM*CONV5_OUT_DIM*CONV5_OUT_CH,layerId); layerId++;
 8000a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a6e:	3301      	adds	r3, #1
 8000a70:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <main+0x3ee>
				tensorOut = l2_tensor_scratch;
 8000a7c:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <main+0x490>)
 8000a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a80:	e001      	b.n	8000a86 <main+0x3f2>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV6_OUT_DIM*CONV6_OUT_DIM*CONV6_OUT_CH);
 8000a82:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <main+0x4a4>)
 8000a84:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 6	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV6_IM_DIM, CONV6_IM_CH,
 8000a94:	2300      	movs	r3, #0
 8000a96:	9310      	str	r3, [sp, #64]	@ 0x40
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <main+0x478>)
 8000a9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a9c:	2328      	movs	r3, #40	@ 0x28
 8000a9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8000aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aa2:	930d      	str	r3, [sp, #52]	@ 0x34
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <main+0x4b4>)
 8000aa6:	930c      	str	r3, [sp, #48]	@ 0x30
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000aac:	2301      	movs	r3, #1
 8000aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	9308      	str	r3, [sp, #32]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	9307      	str	r3, [sp, #28]
 8000abc:	2303      	movs	r3, #3
 8000abe:	9306      	str	r3, [sp, #24]
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	9305      	str	r3, [sp, #20]
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	9304      	str	r3, [sp, #16]
 8000ac8:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <main+0x4b8>)
 8000aca:	9303      	str	r3, [sp, #12]
 8000acc:	2300      	movs	r3, #0
 8000ace:	9302      	str	r3, [sp, #8]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	237c      	movs	r3, #124	@ 0x7c
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <main+0x4bc>)
 8000ada:	2220      	movs	r2, #32
 8000adc:	2128      	movs	r1, #40	@ 0x28
 8000ade:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000ae0:	f002 fa52 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
									  conv6_wt, CONV6_W_Z, CONV6_IN_Z, CONV6_OUT_Z, CONV6_M_ZERO, CONV6_N_ZERO,
									  CONV6_OUT_CH, CONV6_KER_DIM,
									  CONV6_L_PADDING, CONV6_R_PADDING, CONV6_T_PADDING, CONV6_B_PADDING, CONV6_STRIDE, conv6_bias,
									  tensorOut, CONV6_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <main+0x488>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	490d      	ldr	r1, [pc, #52]	@ (8000b20 <main+0x48c>)
 8000aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV6_OUT_DIM*CONV6_OUT_DIM*CONV6_OUT_CH,layerId); layerId++;
 8000af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af4:	3301      	adds	r3, #1
 8000af6:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000afa:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d128      	bne.n	8000b54 <main+0x4c0>
				tensorOut = l2_tensor_scratch;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <main+0x490>)
 8000b04:	657b      	str	r3, [r7, #84]	@ 0x54
 8000b06:	e027      	b.n	8000b58 <main+0x4c4>
 8000b08:	2400c878 	.word	0x2400c878
 8000b0c:	24025954 	.word	0x24025954
 8000b10:	0800bb1c 	.word	0x0800bb1c
 8000b14:	5a110000 	.word	0x5a110000
 8000b18:	0800ba9c 	.word	0x0800ba9c
 8000b1c:	24000000 	.word	0x24000000
 8000b20:	24027d54 	.word	0x24027d54
 8000b24:	24000078 	.word	0x24000078
 8000b28:	2401f478 	.word	0x2401f478
 8000b2c:	0800bbec 	.word	0x0800bbec
 8000b30:	4caa0000 	.word	0x4caa0000
 8000b34:	0800bb5c 	.word	0x0800bb5c
 8000b38:	24019078 	.word	0x24019078
 8000b3c:	0800be2c 	.word	0x0800be2c
 8000b40:	668b0000 	.word	0x668b0000
 8000b44:	0800bc2c 	.word	0x0800bc2c
 8000b48:	0800bfcc 	.word	0x0800bfcc
 8000b4c:	64f40000 	.word	0x64f40000
 8000b50:	0800beac 	.word	0x0800beac
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV7_OUT_DIM*CONV7_OUT_DIM*CONV7_OUT_CH);
 8000b54:	4b85      	ldr	r3, [pc, #532]	@ (8000d6c <main+0x6d8>)
 8000b56:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2301      	moveq	r3, #1
 8000b60:	2300      	movne	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 7	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV7_IM_DIM, CONV7_IM_CH,
 8000b66:	2300      	movs	r3, #0
 8000b68:	9310      	str	r3, [sp, #64]	@ 0x40
 8000b6a:	4b81      	ldr	r3, [pc, #516]	@ (8000d70 <main+0x6dc>)
 8000b6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000b6e:	2328      	movs	r3, #40	@ 0x28
 8000b70:	930e      	str	r3, [sp, #56]	@ 0x38
 8000b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b74:	930d      	str	r3, [sp, #52]	@ 0x34
 8000b76:	4b7f      	ldr	r3, [pc, #508]	@ (8000d74 <main+0x6e0>)
 8000b78:	930c      	str	r3, [sp, #48]	@ 0x30
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000b7e:	2300      	movs	r3, #0
 8000b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8000b82:	2300      	movs	r3, #0
 8000b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b86:	2300      	movs	r3, #0
 8000b88:	9308      	str	r3, [sp, #32]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9307      	str	r3, [sp, #28]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9306      	str	r3, [sp, #24]
 8000b92:	2320      	movs	r3, #32
 8000b94:	9305      	str	r3, [sp, #20]
 8000b96:	2304      	movs	r3, #4
 8000b98:	9304      	str	r3, [sp, #16]
 8000b9a:	4b77      	ldr	r3, [pc, #476]	@ (8000d78 <main+0x6e4>)
 8000b9c:	9303      	str	r3, [sp, #12]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	2360      	movs	r3, #96	@ 0x60
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b74      	ldr	r3, [pc, #464]	@ (8000d7c <main+0x6e8>)
 8000bac:	2220      	movs	r2, #32
 8000bae:	2128      	movs	r1, #40	@ 0x28
 8000bb0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000bb2:	f001 fcb0 	bl	8002516 <arm_convolve_HWC_asym_uint8>
									  conv7_wt, CONV7_W_Z, CONV7_IN_Z, CONV7_OUT_Z, CONV7_M_ZERO, CONV7_N_ZERO,
									  CONV7_OUT_CH, CONV7_KER_DIM,
									  CONV7_L_PADDING, CONV7_R_PADDING, CONV7_T_PADDING, CONV7_B_PADDING, CONV7_STRIDE, conv7_bias,
									  tensorOut, CONV7_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000bb6:	4b72      	ldr	r3, [pc, #456]	@ (8000d80 <main+0x6ec>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4971      	ldr	r1, [pc, #452]	@ (8000d84 <main+0x6f0>)
 8000bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV7_OUT_DIM*CONV7_OUT_DIM*CONV7_OUT_CH,layerId); layerId++;
 8000bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <main+0x546>
				tensorOut = l2_tensor_scratch;
 8000bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8000d88 <main+0x6f4>)
 8000bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8000bd8:	e001      	b.n	8000bde <main+0x54a>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV8_OUT_DIM*CONV8_OUT_DIM*CONV8_OUT_CH);
 8000bda:	4b6c      	ldr	r3, [pc, #432]	@ (8000d8c <main+0x6f8>)
 8000bdc:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf0c      	ite	eq
 8000be4:	2301      	moveq	r3, #1
 8000be6:	2300      	movne	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 8	Conv dw/ s2
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV8_IM_DIM, CONV8_IM_CH,
 8000bec:	2300      	movs	r3, #0
 8000bee:	9310      	str	r3, [sp, #64]	@ 0x40
 8000bf0:	4b5f      	ldr	r3, [pc, #380]	@ (8000d70 <main+0x6dc>)
 8000bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000bf4:	2314      	movs	r3, #20
 8000bf6:	930e      	str	r3, [sp, #56]	@ 0x38
 8000bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bfa:	930d      	str	r3, [sp, #52]	@ 0x34
 8000bfc:	4b64      	ldr	r3, [pc, #400]	@ (8000d90 <main+0x6fc>)
 8000bfe:	930c      	str	r3, [sp, #48]	@ 0x30
 8000c00:	2302      	movs	r3, #2
 8000c02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c04:	2301      	movs	r3, #1
 8000c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	9308      	str	r3, [sp, #32]
 8000c10:	2300      	movs	r3, #0
 8000c12:	9307      	str	r3, [sp, #28]
 8000c14:	2303      	movs	r3, #3
 8000c16:	9306      	str	r3, [sp, #24]
 8000c18:	2320      	movs	r3, #32
 8000c1a:	9305      	str	r3, [sp, #20]
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	9304      	str	r3, [sp, #16]
 8000c20:	4b5c      	ldr	r3, [pc, #368]	@ (8000d94 <main+0x700>)
 8000c22:	9303      	str	r3, [sp, #12]
 8000c24:	2300      	movs	r3, #0
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	2381      	movs	r3, #129	@ 0x81
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	4b59      	ldr	r3, [pc, #356]	@ (8000d98 <main+0x704>)
 8000c32:	2220      	movs	r2, #32
 8000c34:	2128      	movs	r1, #40	@ 0x28
 8000c36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c38:	f002 f9a6 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
									  conv8_wt, CONV8_W_Z, CONV8_IN_Z, CONV8_OUT_Z, CONV8_M_ZERO, CONV8_N_ZERO,
									  CONV8_OUT_CH, CONV8_KER_DIM,
									  CONV8_L_PADDING, CONV8_R_PADDING, CONV8_T_PADDING, CONV8_B_PADDING, CONV8_STRIDE, conv8_bias,
									  tensorOut, CONV8_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000c3c:	4b50      	ldr	r3, [pc, #320]	@ (8000d80 <main+0x6ec>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4950      	ldr	r1, [pc, #320]	@ (8000d84 <main+0x6f0>)
 8000c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV8_OUT_DIM*CONV8_OUT_DIM*CONV8_OUT_CH,layerId); layerId++;
 8000c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c52:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d102      	bne.n	8000c60 <main+0x5cc>
				tensorOut = l2_tensor_scratch;
 8000c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000d88 <main+0x6f4>)
 8000c5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8000c5e:	e001      	b.n	8000c64 <main+0x5d0>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV9_OUT_DIM*CONV9_OUT_DIM*CONV9_OUT_CH);
 8000c60:	4b4e      	ldr	r3, [pc, #312]	@ (8000d9c <main+0x708>)
 8000c62:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf0c      	ite	eq
 8000c6a:	2301      	moveq	r3, #1
 8000c6c:	2300      	movne	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 9	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV9_IM_DIM, CONV9_IM_CH,
 8000c72:	2300      	movs	r3, #0
 8000c74:	9310      	str	r3, [sp, #64]	@ 0x40
 8000c76:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <main+0x6dc>)
 8000c78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8000c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c80:	930d      	str	r3, [sp, #52]	@ 0x34
 8000c82:	4b47      	ldr	r3, [pc, #284]	@ (8000da0 <main+0x70c>)
 8000c84:	930c      	str	r3, [sp, #48]	@ 0x30
 8000c86:	2301      	movs	r3, #1
 8000c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c8e:	2300      	movs	r3, #0
 8000c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c92:	2300      	movs	r3, #0
 8000c94:	9308      	str	r3, [sp, #32]
 8000c96:	2300      	movs	r3, #0
 8000c98:	9307      	str	r3, [sp, #28]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	9306      	str	r3, [sp, #24]
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	9305      	str	r3, [sp, #20]
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	9304      	str	r3, [sp, #16]
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8000da4 <main+0x710>)
 8000ca8:	9303      	str	r3, [sp, #12]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9302      	str	r3, [sp, #8]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	2384      	movs	r3, #132	@ 0x84
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000da8 <main+0x714>)
 8000cb8:	2220      	movs	r2, #32
 8000cba:	2114      	movs	r1, #20
 8000cbc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000cbe:	f001 fc2a 	bl	8002516 <arm_convolve_HWC_asym_uint8>
									  conv9_wt, CONV9_W_Z, CONV9_IN_Z, CONV9_OUT_Z, CONV9_M_ZERO, CONV9_N_ZERO,
									  CONV9_OUT_CH, CONV9_KER_DIM,
									  CONV9_L_PADDING, CONV9_R_PADDING, CONV9_T_PADDING, CONV9_B_PADDING, CONV9_STRIDE, conv9_bias,
									  tensorOut, CONV9_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d80 <main+0x6ec>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	492e      	ldr	r1, [pc, #184]	@ (8000d84 <main+0x6f0>)
 8000cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV9_OUT_DIM*CONV9_OUT_DIM*CONV9_OUT_CH,layerId); layerId++;
 8000cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <main+0x652>
				tensorOut = l2_tensor_scratch;
 8000ce0:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <main+0x6f4>)
 8000ce2:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ce4:	e001      	b.n	8000cea <main+0x656>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV10_OUT_DIM*CONV10_OUT_DIM*CONV10_OUT_CH);
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <main+0x708>)
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bf0c      	ite	eq
 8000cf0:	2301      	moveq	r3, #1
 8000cf2:	2300      	movne	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 10	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV10_IM_DIM, CONV10_IM_CH,
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <main+0x6dc>)
 8000cfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000d00:	2314      	movs	r3, #20
 8000d02:	930e      	str	r3, [sp, #56]	@ 0x38
 8000d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d06:	930d      	str	r3, [sp, #52]	@ 0x34
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <main+0x718>)
 8000d0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d10:	2301      	movs	r3, #1
 8000d12:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d14:	2301      	movs	r3, #1
 8000d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9308      	str	r3, [sp, #32]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	9307      	str	r3, [sp, #28]
 8000d20:	2303      	movs	r3, #3
 8000d22:	9306      	str	r3, [sp, #24]
 8000d24:	2340      	movs	r3, #64	@ 0x40
 8000d26:	9305      	str	r3, [sp, #20]
 8000d28:	2304      	movs	r3, #4
 8000d2a:	9304      	str	r3, [sp, #16]
 8000d2c:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <main+0x71c>)
 8000d2e:	9303      	str	r3, [sp, #12]
 8000d30:	2300      	movs	r3, #0
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	2300      	movs	r3, #0
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	2384      	movs	r3, #132	@ 0x84
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <main+0x720>)
 8000d3e:	2240      	movs	r2, #64	@ 0x40
 8000d40:	2114      	movs	r1, #20
 8000d42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d44:	f002 f920 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
									  conv10_wt, CONV10_W_Z, CONV10_IN_Z, CONV10_OUT_Z, CONV10_M_ZERO, CONV10_N_ZERO,
									  CONV10_OUT_CH, CONV10_KER_DIM,
									  CONV10_L_PADDING, CONV10_R_PADDING, CONV10_T_PADDING, CONV10_B_PADDING, CONV10_STRIDE, conv10_bias,
									  tensorOut, CONV10_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <main+0x6ec>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <main+0x6f0>)
 8000d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV10_OUT_DIM*CONV10_OUT_DIM*CONV10_OUT_CH,layerId); layerId++;
 8000d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d58:	3301      	adds	r3, #1
 8000d5a:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d128      	bne.n	8000db8 <main+0x724>
				tensorOut = l2_tensor_scratch;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <main+0x6f4>)
 8000d68:	657b      	str	r3, [r7, #84]	@ 0x54
 8000d6a:	e027      	b.n	8000dbc <main+0x728>
 8000d6c:	24019078 	.word	0x24019078
 8000d70:	24025954 	.word	0x24025954
 8000d74:	0800c44c 	.word	0x0800c44c
 8000d78:	60ba0000 	.word	0x60ba0000
 8000d7c:	0800c04c 	.word	0x0800c04c
 8000d80:	24000000 	.word	0x24000000
 8000d84:	24027d54 	.word	0x24027d54
 8000d88:	24000078 	.word	0x24000078
 8000d8c:	24022678 	.word	0x24022678
 8000d90:	0800c5ec 	.word	0x0800c5ec
 8000d94:	6df60000 	.word	0x6df60000
 8000d98:	0800c4cc 	.word	0x0800c4cc
 8000d9c:	2401f478 	.word	0x2401f478
 8000da0:	0800ce6c 	.word	0x0800ce6c
 8000da4:	4cbe0000 	.word	0x4cbe0000
 8000da8:	0800c66c 	.word	0x0800c66c
 8000dac:	0800d1ac 	.word	0x0800d1ac
 8000db0:	7f140000 	.word	0x7f140000
 8000db4:	0800cf6c 	.word	0x0800cf6c
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV11_OUT_DIM*CONV11_OUT_DIM*CONV11_OUT_CH);
 8000db8:	4b85      	ldr	r3, [pc, #532]	@ (8000fd0 <main+0x93c>)
 8000dba:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 11	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV11_IM_DIM, CONV11_IM_CH,
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9310      	str	r3, [sp, #64]	@ 0x40
 8000dce:	4b81      	ldr	r3, [pc, #516]	@ (8000fd4 <main+0x940>)
 8000dd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8000dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000dd8:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dda:	4b7f      	ldr	r3, [pc, #508]	@ (8000fd8 <main+0x944>)
 8000ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dde:	2301      	movs	r3, #1
 8000de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000de2:	2300      	movs	r3, #0
 8000de4:	930a      	str	r3, [sp, #40]	@ 0x28
 8000de6:	2300      	movs	r3, #0
 8000de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dea:	2300      	movs	r3, #0
 8000dec:	9308      	str	r3, [sp, #32]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9307      	str	r3, [sp, #28]
 8000df2:	2301      	movs	r3, #1
 8000df4:	9306      	str	r3, [sp, #24]
 8000df6:	2340      	movs	r3, #64	@ 0x40
 8000df8:	9305      	str	r3, [sp, #20]
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	4b77      	ldr	r3, [pc, #476]	@ (8000fdc <main+0x948>)
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	2300      	movs	r3, #0
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	2300      	movs	r3, #0
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	236f      	movs	r3, #111	@ 0x6f
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4b74      	ldr	r3, [pc, #464]	@ (8000fe0 <main+0x94c>)
 8000e10:	2240      	movs	r2, #64	@ 0x40
 8000e12:	2114      	movs	r1, #20
 8000e14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e16:	f001 fb7e 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv11_wt, CONV11_W_Z, CONV11_IN_Z, CONV11_OUT_Z, CONV11_M_ZERO, CONV11_N_ZERO,
										  CONV11_OUT_CH, CONV11_KER_DIM,
										  CONV11_L_PADDING, CONV11_R_PADDING, CONV11_T_PADDING, CONV11_B_PADDING, CONV11_STRIDE, conv11_bias,
										  tensorOut, CONV11_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000e1a:	4b72      	ldr	r3, [pc, #456]	@ (8000fe4 <main+0x950>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4971      	ldr	r1, [pc, #452]	@ (8000fe8 <main+0x954>)
 8000e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV11_OUT_DIM*CONV11_OUT_DIM*CONV11_OUT_CH,layerId); layerId++;
 8000e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e30:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <main+0x7aa>
				tensorOut = l2_tensor_scratch;
 8000e38:	4b6c      	ldr	r3, [pc, #432]	@ (8000fec <main+0x958>)
 8000e3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e3c:	e001      	b.n	8000e42 <main+0x7ae>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV12_OUT_DIM*CONV12_OUT_DIM*CONV12_OUT_CH);
 8000e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8000ff0 <main+0x95c>)
 8000e40:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf0c      	ite	eq
 8000e48:	2301      	moveq	r3, #1
 8000e4a:	2300      	movne	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 12	Conv dw/ s2
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV12_IM_DIM, CONV12_IM_CH,
 8000e50:	2300      	movs	r3, #0
 8000e52:	9310      	str	r3, [sp, #64]	@ 0x40
 8000e54:	4b5f      	ldr	r3, [pc, #380]	@ (8000fd4 <main+0x940>)
 8000e56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000e58:	230a      	movs	r3, #10
 8000e5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8000e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8000e60:	4b64      	ldr	r3, [pc, #400]	@ (8000ff4 <main+0x960>)
 8000e62:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e64:	2302      	movs	r3, #2
 8000e66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e68:	2301      	movs	r3, #1
 8000e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e70:	2301      	movs	r3, #1
 8000e72:	9308      	str	r3, [sp, #32]
 8000e74:	2300      	movs	r3, #0
 8000e76:	9307      	str	r3, [sp, #28]
 8000e78:	2303      	movs	r3, #3
 8000e7a:	9306      	str	r3, [sp, #24]
 8000e7c:	2340      	movs	r3, #64	@ 0x40
 8000e7e:	9305      	str	r3, [sp, #20]
 8000e80:	2305      	movs	r3, #5
 8000e82:	9304      	str	r3, [sp, #16]
 8000e84:	4b5c      	ldr	r3, [pc, #368]	@ (8000ff8 <main+0x964>)
 8000e86:	9303      	str	r3, [sp, #12]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	2395      	movs	r3, #149	@ 0x95
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	4b59      	ldr	r3, [pc, #356]	@ (8000ffc <main+0x968>)
 8000e96:	2240      	movs	r2, #64	@ 0x40
 8000e98:	2114      	movs	r1, #20
 8000e9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e9c:	f002 f874 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv12_wt, CONV12_W_Z, CONV12_IN_Z, CONV12_OUT_Z, CONV12_M_ZERO, CONV12_N_ZERO,
										  CONV12_OUT_CH, CONV12_KER_DIM,
										  CONV12_L_PADDING, CONV12_R_PADDING, CONV12_T_PADDING, CONV12_B_PADDING, CONV12_STRIDE, conv12_bias,
										  tensorOut, CONV12_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000ea0:	4b50      	ldr	r3, [pc, #320]	@ (8000fe4 <main+0x950>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4950      	ldr	r1, [pc, #320]	@ (8000fe8 <main+0x954>)
 8000ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV12_OUT_DIM*CONV12_OUT_DIM*CONV12_OUT_CH,layerId); layerId++;
 8000eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <main+0x830>
				tensorOut = l2_tensor_scratch;
 8000ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8000fec <main+0x958>)
 8000ec0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ec2:	e001      	b.n	8000ec8 <main+0x834>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV13_OUT_DIM*CONV13_OUT_DIM*CONV13_OUT_CH);
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	@ (8001000 <main+0x96c>)
 8000ec6:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf0c      	ite	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	2300      	movne	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 13	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV13_IM_DIM, CONV13_IM_CH,
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9310      	str	r3, [sp, #64]	@ 0x40
 8000eda:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <main+0x940>)
 8000edc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000ede:	230a      	movs	r3, #10
 8000ee0:	930e      	str	r3, [sp, #56]	@ 0x38
 8000ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ee4:	930d      	str	r3, [sp, #52]	@ 0x34
 8000ee6:	4b47      	ldr	r3, [pc, #284]	@ (8001004 <main+0x970>)
 8000ee8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000eea:	2301      	movs	r3, #1
 8000eec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000eee:	2300      	movs	r3, #0
 8000ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9308      	str	r3, [sp, #32]
 8000efa:	2300      	movs	r3, #0
 8000efc:	9307      	str	r3, [sp, #28]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9306      	str	r3, [sp, #24]
 8000f02:	2380      	movs	r3, #128	@ 0x80
 8000f04:	9305      	str	r3, [sp, #20]
 8000f06:	2305      	movs	r3, #5
 8000f08:	9304      	str	r3, [sp, #16]
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001008 <main+0x974>)
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2300      	movs	r3, #0
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	238e      	movs	r3, #142	@ 0x8e
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800100c <main+0x978>)
 8000f1c:	2240      	movs	r2, #64	@ 0x40
 8000f1e:	210a      	movs	r1, #10
 8000f20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000f22:	f001 faf8 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv13_wt, CONV13_W_Z, CONV13_IN_Z, CONV13_OUT_Z, CONV13_M_ZERO, CONV13_N_ZERO,
										  CONV13_OUT_CH, CONV13_KER_DIM,
										  CONV13_L_PADDING, CONV13_R_PADDING, CONV13_T_PADDING, CONV13_B_PADDING, CONV13_STRIDE, conv13_bias,
										  tensorOut, CONV13_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <main+0x950>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	492e      	ldr	r1, [pc, #184]	@ (8000fe8 <main+0x954>)
 8000f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV13_OUT_DIM*CONV13_OUT_DIM*CONV13_OUT_CH,layerId); layerId++;
 8000f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f36:	3301      	adds	r3, #1
 8000f38:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <main+0x8b6>
				tensorOut = l2_tensor_scratch;
 8000f44:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <main+0x958>)
 8000f46:	657b      	str	r3, [r7, #84]	@ 0x54
 8000f48:	e001      	b.n	8000f4e <main+0x8ba>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV14_OUT_DIM*CONV14_OUT_DIM*CONV14_OUT_CH);
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <main+0x96c>)
 8000f4c:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8000f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bf0c      	ite	eq
 8000f54:	2301      	moveq	r3, #1
 8000f56:	2300      	movne	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 14	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV14_IM_DIM, CONV14_IM_CH,
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <main+0x940>)
 8000f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000f64:	230a      	movs	r3, #10
 8000f66:	930e      	str	r3, [sp, #56]	@ 0x38
 8000f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <main+0x97c>)
 8000f6e:	930c      	str	r3, [sp, #48]	@ 0x30
 8000f70:	2301      	movs	r3, #1
 8000f72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000f74:	2301      	movs	r3, #1
 8000f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9308      	str	r3, [sp, #32]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9307      	str	r3, [sp, #28]
 8000f84:	2303      	movs	r3, #3
 8000f86:	9306      	str	r3, [sp, #24]
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	9305      	str	r3, [sp, #20]
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	9304      	str	r3, [sp, #16]
 8000f90:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <main+0x980>)
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	2300      	movs	r3, #0
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	2397      	movs	r3, #151	@ 0x97
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <main+0x984>)
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	210a      	movs	r1, #10
 8000fa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000fa8:	f001 ffee 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv14_wt, CONV14_W_Z, CONV14_IN_Z, CONV14_OUT_Z, CONV14_M_ZERO, CONV14_N_ZERO,
										  CONV14_OUT_CH, CONV14_KER_DIM,
										  CONV14_L_PADDING, CONV14_R_PADDING, CONV14_T_PADDING, CONV14_B_PADDING, CONV14_STRIDE, conv14_bias,
										  tensorOut, CONV14_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <main+0x950>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <main+0x954>)
 8000fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV14_OUT_DIM*CONV14_OUT_DIM*CONV14_OUT_CH,layerId); layerId++;
 8000fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8000fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8000fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d128      	bne.n	800101c <main+0x988>
				tensorOut = l2_tensor_scratch;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <main+0x958>)
 8000fcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fce:	e027      	b.n	8001020 <main+0x98c>
 8000fd0:	2401f478 	.word	0x2401f478
 8000fd4:	24025954 	.word	0x24025954
 8000fd8:	0800e2ac 	.word	0x0800e2ac
 8000fdc:	4ccc0000 	.word	0x4ccc0000
 8000fe0:	0800d2ac 	.word	0x0800d2ac
 8000fe4:	24000000 	.word	0x24000000
 8000fe8:	24027d54 	.word	0x24027d54
 8000fec:	24000078 	.word	0x24000078
 8000ff0:	24023f78 	.word	0x24023f78
 8000ff4:	0800e5ec 	.word	0x0800e5ec
 8000ff8:	4bcd0000 	.word	0x4bcd0000
 8000ffc:	0800e3ac 	.word	0x0800e3ac
 8001000:	24022678 	.word	0x24022678
 8001004:	080106ec 	.word	0x080106ec
 8001008:	71890000 	.word	0x71890000
 800100c:	0800e6ec 	.word	0x0800e6ec
 8001010:	08010d6c 	.word	0x08010d6c
 8001014:	66c90000 	.word	0x66c90000
 8001018:	080108ec 	.word	0x080108ec
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV15_OUT_DIM*CONV15_OUT_DIM*CONV15_OUT_CH);
 800101c:	4b85      	ldr	r3, [pc, #532]	@ (8001234 <main+0xba0>)
 800101e:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8001020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 15	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV15_IM_DIM, CONV15_IM_CH,
 800102e:	2300      	movs	r3, #0
 8001030:	9310      	str	r3, [sp, #64]	@ 0x40
 8001032:	4b81      	ldr	r3, [pc, #516]	@ (8001238 <main+0xba4>)
 8001034:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001036:	230a      	movs	r3, #10
 8001038:	930e      	str	r3, [sp, #56]	@ 0x38
 800103a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800103c:	930d      	str	r3, [sp, #52]	@ 0x34
 800103e:	4b7f      	ldr	r3, [pc, #508]	@ (800123c <main+0xba8>)
 8001040:	930c      	str	r3, [sp, #48]	@ 0x30
 8001042:	2301      	movs	r3, #1
 8001044:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001046:	2300      	movs	r3, #0
 8001048:	930a      	str	r3, [sp, #40]	@ 0x28
 800104a:	2300      	movs	r3, #0
 800104c:	9309      	str	r3, [sp, #36]	@ 0x24
 800104e:	2300      	movs	r3, #0
 8001050:	9308      	str	r3, [sp, #32]
 8001052:	2300      	movs	r3, #0
 8001054:	9307      	str	r3, [sp, #28]
 8001056:	2301      	movs	r3, #1
 8001058:	9306      	str	r3, [sp, #24]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9305      	str	r3, [sp, #20]
 800105e:	2305      	movs	r3, #5
 8001060:	9304      	str	r3, [sp, #16]
 8001062:	4b77      	ldr	r3, [pc, #476]	@ (8001240 <main+0xbac>)
 8001064:	9303      	str	r3, [sp, #12]
 8001066:	2300      	movs	r3, #0
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2300      	movs	r3, #0
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2387      	movs	r3, #135	@ 0x87
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4b74      	ldr	r3, [pc, #464]	@ (8001244 <main+0xbb0>)
 8001074:	2280      	movs	r2, #128	@ 0x80
 8001076:	210a      	movs	r1, #10
 8001078:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800107a:	f001 fa4c 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv15_wt, CONV15_W_Z, CONV15_IN_Z, CONV15_OUT_Z, CONV15_M_ZERO, CONV15_N_ZERO,
										  CONV15_OUT_CH, CONV15_KER_DIM,
										  CONV15_L_PADDING, CONV15_R_PADDING, CONV15_T_PADDING, CONV15_B_PADDING, CONV15_STRIDE, conv15_bias,
										  tensorOut, CONV15_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800107e:	4b72      	ldr	r3, [pc, #456]	@ (8001248 <main+0xbb4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4971      	ldr	r1, [pc, #452]	@ (800124c <main+0xbb8>)
 8001086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV15_OUT_DIM*CONV15_OUT_DIM*CONV15_OUT_CH,layerId); layerId++;
 800108c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800108e:	3301      	adds	r3, #1
 8001090:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8001092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001094:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8001096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <main+0xa0e>
				tensorOut = l2_tensor_scratch;
 800109c:	4b6c      	ldr	r3, [pc, #432]	@ (8001250 <main+0xbbc>)
 800109e:	657b      	str	r3, [r7, #84]	@ 0x54
 80010a0:	e001      	b.n	80010a6 <main+0xa12>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV16_OUT_DIM*CONV16_OUT_DIM*CONV16_OUT_CH);
 80010a2:	4b64      	ldr	r3, [pc, #400]	@ (8001234 <main+0xba0>)
 80010a4:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 80010a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf0c      	ite	eq
 80010ac:	2301      	moveq	r3, #1
 80010ae:	2300      	movne	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 16	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV16_IM_DIM, CONV16_IM_CH,
 80010b4:	2300      	movs	r3, #0
 80010b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80010b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001238 <main+0xba4>)
 80010ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80010bc:	230a      	movs	r3, #10
 80010be:	930e      	str	r3, [sp, #56]	@ 0x38
 80010c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80010c4:	4b63      	ldr	r3, [pc, #396]	@ (8001254 <main+0xbc0>)
 80010c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80010c8:	2301      	movs	r3, #1
 80010ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80010cc:	2301      	movs	r3, #1
 80010ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80010d0:	2301      	movs	r3, #1
 80010d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80010d4:	2301      	movs	r3, #1
 80010d6:	9308      	str	r3, [sp, #32]
 80010d8:	2301      	movs	r3, #1
 80010da:	9307      	str	r3, [sp, #28]
 80010dc:	2303      	movs	r3, #3
 80010de:	9306      	str	r3, [sp, #24]
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	9305      	str	r3, [sp, #20]
 80010e4:	2303      	movs	r3, #3
 80010e6:	9304      	str	r3, [sp, #16]
 80010e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001258 <main+0xbc4>)
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	2300      	movs	r3, #0
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2300      	movs	r3, #0
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	23a0      	movs	r3, #160	@ 0xa0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <main+0xbc8>)
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	210a      	movs	r1, #10
 80010fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001100:	f001 ff42 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv16_wt, CONV16_W_Z, CONV16_IN_Z, CONV16_OUT_Z, CONV16_M_ZERO, CONV16_N_ZERO,
										  CONV16_OUT_CH, CONV16_KER_DIM,
										  CONV16_L_PADDING, CONV16_R_PADDING, CONV16_T_PADDING, CONV16_B_PADDING, CONV16_STRIDE, conv16_bias,
										  tensorOut, CONV16_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8001104:	4b50      	ldr	r3, [pc, #320]	@ (8001248 <main+0xbb4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4950      	ldr	r1, [pc, #320]	@ (800124c <main+0xbb8>)
 800110c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV16_OUT_DIM*CONV16_OUT_DIM*CONV16_OUT_CH,layerId); layerId++;
 8001112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001114:	3301      	adds	r3, #1
 8001116:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8001118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800111a:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 800111c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <main+0xa94>
				tensorOut = l2_tensor_scratch;
 8001122:	4b4b      	ldr	r3, [pc, #300]	@ (8001250 <main+0xbbc>)
 8001124:	657b      	str	r3, [r7, #84]	@ 0x54
 8001126:	e001      	b.n	800112c <main+0xa98>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV17_OUT_DIM*CONV17_OUT_DIM*CONV17_OUT_CH);
 8001128:	4b42      	ldr	r3, [pc, #264]	@ (8001234 <main+0xba0>)
 800112a:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 800112c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 17	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV17_IM_DIM, CONV17_IM_CH,
 800113a:	2300      	movs	r3, #0
 800113c:	9310      	str	r3, [sp, #64]	@ 0x40
 800113e:	4b3e      	ldr	r3, [pc, #248]	@ (8001238 <main+0xba4>)
 8001140:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001142:	230a      	movs	r3, #10
 8001144:	930e      	str	r3, [sp, #56]	@ 0x38
 8001146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001148:	930d      	str	r3, [sp, #52]	@ 0x34
 800114a:	4b45      	ldr	r3, [pc, #276]	@ (8001260 <main+0xbcc>)
 800114c:	930c      	str	r3, [sp, #48]	@ 0x30
 800114e:	2301      	movs	r3, #1
 8001150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001152:	2300      	movs	r3, #0
 8001154:	930a      	str	r3, [sp, #40]	@ 0x28
 8001156:	2300      	movs	r3, #0
 8001158:	9309      	str	r3, [sp, #36]	@ 0x24
 800115a:	2300      	movs	r3, #0
 800115c:	9308      	str	r3, [sp, #32]
 800115e:	2300      	movs	r3, #0
 8001160:	9307      	str	r3, [sp, #28]
 8001162:	2301      	movs	r3, #1
 8001164:	9306      	str	r3, [sp, #24]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	2305      	movs	r3, #5
 800116c:	9304      	str	r3, [sp, #16]
 800116e:	4b3d      	ldr	r3, [pc, #244]	@ (8001264 <main+0xbd0>)
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	2300      	movs	r3, #0
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2300      	movs	r3, #0
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	23a8      	movs	r3, #168	@ 0xa8
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <main+0xbd4>)
 8001180:	2280      	movs	r2, #128	@ 0x80
 8001182:	210a      	movs	r1, #10
 8001184:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001186:	f001 f9c6 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv17_wt, CONV17_W_Z, CONV17_IN_Z, CONV17_OUT_Z, CONV17_M_ZERO, CONV17_N_ZERO,
										  CONV17_OUT_CH, CONV17_KER_DIM,
										  CONV17_L_PADDING, CONV17_R_PADDING, CONV17_T_PADDING, CONV17_B_PADDING, CONV17_STRIDE, conv17_bias,
										  tensorOut, CONV17_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800118a:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <main+0xbb4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	492e      	ldr	r1, [pc, #184]	@ (800124c <main+0xbb8>)
 8001192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV17_OUT_DIM*CONV17_OUT_DIM*CONV17_OUT_CH,layerId); layerId++;
 8001198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800119a:	3301      	adds	r3, #1
 800119c:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 800119e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80011a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <main+0xb1a>
				tensorOut = l2_tensor_scratch;
 80011a8:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <main+0xbbc>)
 80011aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80011ac:	e001      	b.n	80011b2 <main+0xb1e>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV18_OUT_DIM*CONV18_OUT_DIM*CONV18_OUT_CH);
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <main+0xba0>)
 80011b0:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 80011b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 18	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV18_IM_DIM, CONV18_IM_CH,
 80011c0:	2300      	movs	r3, #0
 80011c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <main+0xba4>)
 80011c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80011c8:	230a      	movs	r3, #10
 80011ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80011cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <main+0xbd8>)
 80011d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80011d4:	2301      	movs	r3, #1
 80011d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80011d8:	2301      	movs	r3, #1
 80011da:	930a      	str	r3, [sp, #40]	@ 0x28
 80011dc:	2301      	movs	r3, #1
 80011de:	9309      	str	r3, [sp, #36]	@ 0x24
 80011e0:	2301      	movs	r3, #1
 80011e2:	9308      	str	r3, [sp, #32]
 80011e4:	2301      	movs	r3, #1
 80011e6:	9307      	str	r3, [sp, #28]
 80011e8:	2303      	movs	r3, #3
 80011ea:	9306      	str	r3, [sp, #24]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	9305      	str	r3, [sp, #20]
 80011f0:	2304      	movs	r3, #4
 80011f2:	9304      	str	r3, [sp, #16]
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <main+0xbdc>)
 80011f6:	9303      	str	r3, [sp, #12]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2300      	movs	r3, #0
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	236b      	movs	r3, #107	@ 0x6b
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <main+0xbe0>)
 8001206:	2280      	movs	r2, #128	@ 0x80
 8001208:	210a      	movs	r1, #10
 800120a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800120c:	f001 febc 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv18_wt, CONV18_W_Z, CONV18_IN_Z, CONV18_OUT_Z, CONV18_M_ZERO, CONV18_N_ZERO,
										  CONV18_OUT_CH, CONV18_KER_DIM,
										  CONV18_L_PADDING, CONV18_R_PADDING, CONV18_T_PADDING, CONV18_B_PADDING, CONV18_STRIDE, conv18_bias,
										  tensorOut, CONV18_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <main+0xbb4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <main+0xbb8>)
 8001218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV18_OUT_DIM*CONV18_OUT_DIM*CONV18_OUT_CH,layerId); layerId++;
 800121e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001220:	3301      	adds	r3, #1
 8001222:	643b      	str	r3, [r7, #64]	@ 0x40
			tensorIn  = tensorOut;
 8001224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001226:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8001228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d124      	bne.n	8001278 <main+0xbe4>
				tensorOut = l2_tensor_scratch;
 800122e:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <main+0xbbc>)
 8001230:	657b      	str	r3, [r7, #84]	@ 0x54
 8001232:	e023      	b.n	800127c <main+0xbe8>
 8001234:	24022678 	.word	0x24022678
 8001238:	24025954 	.word	0x24025954
 800123c:	08014f6c 	.word	0x08014f6c
 8001240:	47690000 	.word	0x47690000
 8001244:	08010f6c 	.word	0x08010f6c
 8001248:	24000000 	.word	0x24000000
 800124c:	24027d54 	.word	0x24027d54
 8001250:	24000078 	.word	0x24000078
 8001254:	080155ec 	.word	0x080155ec
 8001258:	48fb0000 	.word	0x48fb0000
 800125c:	0801516c 	.word	0x0801516c
 8001260:	080197ec 	.word	0x080197ec
 8001264:	68450000 	.word	0x68450000
 8001268:	080157ec 	.word	0x080157ec
 800126c:	08019e6c 	.word	0x08019e6c
 8001270:	51350000 	.word	0x51350000
 8001274:	080199ec 	.word	0x080199ec
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV19_OUT_DIM*CONV19_OUT_DIM*CONV19_OUT_CH);
 8001278:	4b85      	ldr	r3, [pc, #532]	@ (8001490 <main+0xdfc>)
 800127a:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 800127c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 19	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV19_IM_DIM, CONV19_IM_CH,
 800128a:	2300      	movs	r3, #0
 800128c:	9310      	str	r3, [sp, #64]	@ 0x40
 800128e:	4b81      	ldr	r3, [pc, #516]	@ (8001494 <main+0xe00>)
 8001290:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001292:	230a      	movs	r3, #10
 8001294:	930e      	str	r3, [sp, #56]	@ 0x38
 8001296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001298:	930d      	str	r3, [sp, #52]	@ 0x34
 800129a:	4b7f      	ldr	r3, [pc, #508]	@ (8001498 <main+0xe04>)
 800129c:	930c      	str	r3, [sp, #48]	@ 0x30
 800129e:	2301      	movs	r3, #1
 80012a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80012a2:	2300      	movs	r3, #0
 80012a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80012a6:	2300      	movs	r3, #0
 80012a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80012aa:	2300      	movs	r3, #0
 80012ac:	9308      	str	r3, [sp, #32]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9307      	str	r3, [sp, #28]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9306      	str	r3, [sp, #24]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	9305      	str	r3, [sp, #20]
 80012ba:	2305      	movs	r3, #5
 80012bc:	9304      	str	r3, [sp, #16]
 80012be:	4b77      	ldr	r3, [pc, #476]	@ (800149c <main+0xe08>)
 80012c0:	9303      	str	r3, [sp, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2370      	movs	r3, #112	@ 0x70
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4b74      	ldr	r3, [pc, #464]	@ (80014a0 <main+0xe0c>)
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	210a      	movs	r1, #10
 80012d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80012d6:	f001 f91e 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv19_wt, CONV19_W_Z, CONV19_IN_Z, CONV19_OUT_Z, CONV19_M_ZERO, CONV19_N_ZERO,
										  CONV19_OUT_CH, CONV19_KER_DIM,
										  CONV19_L_PADDING, CONV19_R_PADDING, CONV19_T_PADDING, CONV19_B_PADDING, CONV19_STRIDE, conv19_bias,
										  tensorOut, CONV19_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80012da:	4b72      	ldr	r3, [pc, #456]	@ (80014a4 <main+0xe10>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4971      	ldr	r1, [pc, #452]	@ (80014a8 <main+0xe14>)
 80012e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV19_OUT_DIM*CONV19_OUT_DIM*CONV19_OUT_CH,layerId); layerId++;
 80012e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ea:	3301      	adds	r3, #1
 80012ec:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 80012ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012f0:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80012f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <main+0xc6a>
				tensorOut = l2_tensor_scratch;
 80012f8:	4b6c      	ldr	r3, [pc, #432]	@ (80014ac <main+0xe18>)
 80012fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80012fc:	e001      	b.n	8001302 <main+0xc6e>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV20_OUT_DIM*CONV20_OUT_DIM*CONV20_OUT_CH);
 80012fe:	4b64      	ldr	r3, [pc, #400]	@ (8001490 <main+0xdfc>)
 8001300:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8001302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 20	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV20_IM_DIM, CONV20_IM_CH,
 8001310:	2300      	movs	r3, #0
 8001312:	9310      	str	r3, [sp, #64]	@ 0x40
 8001314:	4b5f      	ldr	r3, [pc, #380]	@ (8001494 <main+0xe00>)
 8001316:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001318:	230a      	movs	r3, #10
 800131a:	930e      	str	r3, [sp, #56]	@ 0x38
 800131c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800131e:	930d      	str	r3, [sp, #52]	@ 0x34
 8001320:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <main+0xe1c>)
 8001322:	930c      	str	r3, [sp, #48]	@ 0x30
 8001324:	2301      	movs	r3, #1
 8001326:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001328:	2301      	movs	r3, #1
 800132a:	930a      	str	r3, [sp, #40]	@ 0x28
 800132c:	2301      	movs	r3, #1
 800132e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001330:	2301      	movs	r3, #1
 8001332:	9308      	str	r3, [sp, #32]
 8001334:	2301      	movs	r3, #1
 8001336:	9307      	str	r3, [sp, #28]
 8001338:	2303      	movs	r3, #3
 800133a:	9306      	str	r3, [sp, #24]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	9305      	str	r3, [sp, #20]
 8001340:	2304      	movs	r3, #4
 8001342:	9304      	str	r3, [sp, #16]
 8001344:	4b5b      	ldr	r3, [pc, #364]	@ (80014b4 <main+0xe20>)
 8001346:	9303      	str	r3, [sp, #12]
 8001348:	2300      	movs	r3, #0
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	2300      	movs	r3, #0
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2387      	movs	r3, #135	@ 0x87
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4b58      	ldr	r3, [pc, #352]	@ (80014b8 <main+0xe24>)
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	210a      	movs	r1, #10
 800135a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800135c:	f001 fe14 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv20_wt, CONV20_W_Z, CONV20_IN_Z, CONV20_OUT_Z, CONV20_M_ZERO, CONV20_N_ZERO,
										  CONV20_OUT_CH, CONV20_KER_DIM,
										  CONV20_L_PADDING, CONV20_R_PADDING, CONV20_T_PADDING, CONV20_B_PADDING, CONV20_STRIDE, conv20_bias,
										  tensorOut, CONV20_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8001360:	4b50      	ldr	r3, [pc, #320]	@ (80014a4 <main+0xe10>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4950      	ldr	r1, [pc, #320]	@ (80014a8 <main+0xe14>)
 8001368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV20_OUT_DIM*CONV20_OUT_DIM*CONV20_OUT_CH,layerId); layerId++;
 800136e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001370:	3301      	adds	r3, #1
 8001372:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8001374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001376:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8001378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <main+0xcf0>
				tensorOut = l2_tensor_scratch;
 800137e:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <main+0xe18>)
 8001380:	657b      	str	r3, [r7, #84]	@ 0x54
 8001382:	e001      	b.n	8001388 <main+0xcf4>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV21_OUT_DIM*CONV21_OUT_DIM*CONV21_OUT_CH);
 8001384:	4b42      	ldr	r3, [pc, #264]	@ (8001490 <main+0xdfc>)
 8001386:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8001388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf0c      	ite	eq
 800138e:	2301      	moveq	r3, #1
 8001390:	2300      	movne	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 21	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV21_IM_DIM, CONV21_IM_CH,
 8001396:	2300      	movs	r3, #0
 8001398:	9310      	str	r3, [sp, #64]	@ 0x40
 800139a:	4b3e      	ldr	r3, [pc, #248]	@ (8001494 <main+0xe00>)
 800139c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800139e:	230a      	movs	r3, #10
 80013a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80013a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80013a6:	4b45      	ldr	r3, [pc, #276]	@ (80014bc <main+0xe28>)
 80013a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80013aa:	2301      	movs	r3, #1
 80013ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80013ae:	2300      	movs	r3, #0
 80013b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80013b2:	2300      	movs	r3, #0
 80013b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80013b6:	2300      	movs	r3, #0
 80013b8:	9308      	str	r3, [sp, #32]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9307      	str	r3, [sp, #28]
 80013be:	2301      	movs	r3, #1
 80013c0:	9306      	str	r3, [sp, #24]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	9305      	str	r3, [sp, #20]
 80013c6:	2305      	movs	r3, #5
 80013c8:	9304      	str	r3, [sp, #16]
 80013ca:	4b3d      	ldr	r3, [pc, #244]	@ (80014c0 <main+0xe2c>)
 80013cc:	9303      	str	r3, [sp, #12]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	236f      	movs	r3, #111	@ 0x6f
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <main+0xe30>)
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	210a      	movs	r1, #10
 80013e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80013e2:	f001 f898 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv21_wt, CONV21_W_Z, CONV21_IN_Z, CONV21_OUT_Z, CONV21_M_ZERO, CONV21_N_ZERO,
										  CONV21_OUT_CH, CONV21_KER_DIM,
										  CONV21_L_PADDING, CONV21_R_PADDING, CONV21_T_PADDING, CONV21_B_PADDING, CONV21_STRIDE, conv21_bias,
										  tensorOut, CONV21_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <main+0xe10>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	492e      	ldr	r1, [pc, #184]	@ (80014a8 <main+0xe14>)
 80013ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV21_OUT_DIM*CONV21_OUT_DIM*CONV21_OUT_CH,layerId); layerId++;
 80013f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013f6:	3301      	adds	r3, #1
 80013f8:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 80013fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013fc:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80013fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <main+0xd76>
				tensorOut = l2_tensor_scratch;
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <main+0xe18>)
 8001406:	657b      	str	r3, [r7, #84]	@ 0x54
 8001408:	e001      	b.n	800140e <main+0xd7a>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV22_OUT_DIM*CONV22_OUT_DIM*CONV22_OUT_CH);
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <main+0xdfc>)
 800140c:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 800140e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf0c      	ite	eq
 8001414:	2301      	moveq	r3, #1
 8001416:	2300      	movne	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 22	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV22_IM_DIM, CONV22_IM_CH,
 800141c:	2300      	movs	r3, #0
 800141e:	9310      	str	r3, [sp, #64]	@ 0x40
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <main+0xe00>)
 8001422:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001424:	230a      	movs	r3, #10
 8001426:	930e      	str	r3, [sp, #56]	@ 0x38
 8001428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800142a:	930d      	str	r3, [sp, #52]	@ 0x34
 800142c:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <main+0xe34>)
 800142e:	930c      	str	r3, [sp, #48]	@ 0x30
 8001430:	2301      	movs	r3, #1
 8001432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001434:	2301      	movs	r3, #1
 8001436:	930a      	str	r3, [sp, #40]	@ 0x28
 8001438:	2301      	movs	r3, #1
 800143a:	9309      	str	r3, [sp, #36]	@ 0x24
 800143c:	2301      	movs	r3, #1
 800143e:	9308      	str	r3, [sp, #32]
 8001440:	2301      	movs	r3, #1
 8001442:	9307      	str	r3, [sp, #28]
 8001444:	2303      	movs	r3, #3
 8001446:	9306      	str	r3, [sp, #24]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	9305      	str	r3, [sp, #20]
 800144c:	2304      	movs	r3, #4
 800144e:	9304      	str	r3, [sp, #16]
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <main+0xe38>)
 8001452:	9303      	str	r3, [sp, #12]
 8001454:	2300      	movs	r3, #0
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	2300      	movs	r3, #0
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	23b4      	movs	r3, #180	@ 0xb4
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <main+0xe3c>)
 8001462:	2280      	movs	r2, #128	@ 0x80
 8001464:	210a      	movs	r1, #10
 8001466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001468:	f001 fd8e 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv22_wt, CONV22_W_Z, CONV22_IN_Z, CONV22_OUT_Z, CONV22_M_ZERO, CONV22_N_ZERO,
										  CONV22_OUT_CH, CONV22_KER_DIM,
										  CONV22_L_PADDING, CONV22_R_PADDING, CONV22_T_PADDING, CONV22_B_PADDING, CONV22_STRIDE, conv22_bias,
										  tensorOut, CONV22_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <main+0xe10>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <main+0xe14>)
 8001474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV22_OUT_DIM*CONV22_OUT_DIM*CONV22_OUT_CH,layerId); layerId++;
 800147a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800147c:	3301      	adds	r3, #1
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8001480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001482:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8001484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001486:	2b00      	cmp	r3, #0
 8001488:	d124      	bne.n	80014d4 <main+0xe40>
				tensorOut = l2_tensor_scratch;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <main+0xe18>)
 800148c:	657b      	str	r3, [r7, #84]	@ 0x54
 800148e:	e023      	b.n	80014d8 <main+0xe44>
 8001490:	24022678 	.word	0x24022678
 8001494:	24025954 	.word	0x24025954
 8001498:	0801e06c 	.word	0x0801e06c
 800149c:	582c0000 	.word	0x582c0000
 80014a0:	0801a06c 	.word	0x0801a06c
 80014a4:	24000000 	.word	0x24000000
 80014a8:	24027d54 	.word	0x24027d54
 80014ac:	24000078 	.word	0x24000078
 80014b0:	0801e6ec 	.word	0x0801e6ec
 80014b4:	4aeb0000 	.word	0x4aeb0000
 80014b8:	0801e26c 	.word	0x0801e26c
 80014bc:	080228ec 	.word	0x080228ec
 80014c0:	6b5b0000 	.word	0x6b5b0000
 80014c4:	0801e8ec 	.word	0x0801e8ec
 80014c8:	08022f6c 	.word	0x08022f6c
 80014cc:	62c40000 	.word	0x62c40000
 80014d0:	08022aec 	.word	0x08022aec
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV23_OUT_DIM*CONV23_OUT_DIM*CONV23_OUT_CH);
 80014d4:	4b87      	ldr	r3, [pc, #540]	@ (80016f4 <main+0x1060>)
 80014d6:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 80014d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf0c      	ite	eq
 80014de:	2301      	moveq	r3, #1
 80014e0:	2300      	movne	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 23	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV23_IM_DIM, CONV23_IM_CH,
 80014e6:	2300      	movs	r3, #0
 80014e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80014ea:	4b83      	ldr	r3, [pc, #524]	@ (80016f8 <main+0x1064>)
 80014ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80014ee:	230a      	movs	r3, #10
 80014f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80014f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80014f6:	4b81      	ldr	r3, [pc, #516]	@ (80016fc <main+0x1068>)
 80014f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80014fa:	2301      	movs	r3, #1
 80014fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80014fe:	2300      	movs	r3, #0
 8001500:	930a      	str	r3, [sp, #40]	@ 0x28
 8001502:	2300      	movs	r3, #0
 8001504:	9309      	str	r3, [sp, #36]	@ 0x24
 8001506:	2300      	movs	r3, #0
 8001508:	9308      	str	r3, [sp, #32]
 800150a:	2300      	movs	r3, #0
 800150c:	9307      	str	r3, [sp, #28]
 800150e:	2301      	movs	r3, #1
 8001510:	9306      	str	r3, [sp, #24]
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	9305      	str	r3, [sp, #20]
 8001516:	2306      	movs	r3, #6
 8001518:	9304      	str	r3, [sp, #16]
 800151a:	4b79      	ldr	r3, [pc, #484]	@ (8001700 <main+0x106c>)
 800151c:	9303      	str	r3, [sp, #12]
 800151e:	2300      	movs	r3, #0
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	2300      	movs	r3, #0
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	237b      	movs	r3, #123	@ 0x7b
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4b76      	ldr	r3, [pc, #472]	@ (8001704 <main+0x1070>)
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	210a      	movs	r1, #10
 8001530:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001532:	f000 fff0 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv23_wt, CONV23_W_Z, CONV23_IN_Z, CONV23_OUT_Z, CONV23_M_ZERO, CONV23_N_ZERO,
										  CONV23_OUT_CH, CONV23_KER_DIM,
										  CONV23_L_PADDING, CONV23_R_PADDING, CONV23_T_PADDING, CONV23_B_PADDING, CONV23_STRIDE, conv23_bias,
										  tensorOut, CONV23_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8001536:	4b74      	ldr	r3, [pc, #464]	@ (8001708 <main+0x1074>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4973      	ldr	r1, [pc, #460]	@ (800170c <main+0x1078>)
 800153e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV23_OUT_DIM*CONV23_OUT_DIM*CONV23_OUT_CH,layerId); layerId++;
 8001544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001546:	3301      	adds	r3, #1
 8001548:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 800154a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 800154e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <main+0xec6>
				tensorOut = l2_tensor_scratch;
 8001554:	4b6e      	ldr	r3, [pc, #440]	@ (8001710 <main+0x107c>)
 8001556:	657b      	str	r3, [r7, #84]	@ 0x54
 8001558:	e001      	b.n	800155e <main+0xeca>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV24_OUT_DIM*CONV24_OUT_DIM*CONV24_OUT_CH);
 800155a:	4b6e      	ldr	r3, [pc, #440]	@ (8001714 <main+0x1080>)
 800155c:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 800155e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 24	Conv dw/ s2
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV24_IM_DIM, CONV24_IM_CH,
 800156c:	2300      	movs	r3, #0
 800156e:	9310      	str	r3, [sp, #64]	@ 0x40
 8001570:	4b61      	ldr	r3, [pc, #388]	@ (80016f8 <main+0x1064>)
 8001572:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001574:	2305      	movs	r3, #5
 8001576:	930e      	str	r3, [sp, #56]	@ 0x38
 8001578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800157a:	930d      	str	r3, [sp, #52]	@ 0x34
 800157c:	4b66      	ldr	r3, [pc, #408]	@ (8001718 <main+0x1084>)
 800157e:	930c      	str	r3, [sp, #48]	@ 0x30
 8001580:	2302      	movs	r3, #2
 8001582:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001584:	2301      	movs	r3, #1
 8001586:	930a      	str	r3, [sp, #40]	@ 0x28
 8001588:	2300      	movs	r3, #0
 800158a:	9309      	str	r3, [sp, #36]	@ 0x24
 800158c:	2301      	movs	r3, #1
 800158e:	9308      	str	r3, [sp, #32]
 8001590:	2300      	movs	r3, #0
 8001592:	9307      	str	r3, [sp, #28]
 8001594:	2303      	movs	r3, #3
 8001596:	9306      	str	r3, [sp, #24]
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	9305      	str	r3, [sp, #20]
 800159c:	2304      	movs	r3, #4
 800159e:	9304      	str	r3, [sp, #16]
 80015a0:	4b5e      	ldr	r3, [pc, #376]	@ (800171c <main+0x1088>)
 80015a2:	9303      	str	r3, [sp, #12]
 80015a4:	2300      	movs	r3, #0
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2340      	movs	r3, #64	@ 0x40
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001720 <main+0x108c>)
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	210a      	movs	r1, #10
 80015b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80015b8:	f001 fce6 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv24_wt, CONV24_W_Z, CONV24_IN_Z, CONV24_OUT_Z, CONV24_M_ZERO, CONV24_N_ZERO,
										  CONV24_OUT_CH, CONV24_KER_DIM,
										  CONV24_L_PADDING, CONV24_R_PADDING, CONV24_T_PADDING, CONV24_B_PADDING, CONV24_STRIDE, conv24_bias,
										  tensorOut, CONV24_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80015bc:	4b52      	ldr	r3, [pc, #328]	@ (8001708 <main+0x1074>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4952      	ldr	r1, [pc, #328]	@ (800170c <main+0x1078>)
 80015c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV24_OUT_DIM*CONV24_OUT_DIM*CONV24_OUT_CH,layerId); layerId++;
 80015ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015cc:	3301      	adds	r3, #1
 80015ce:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 80015d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015d2:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80015d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <main+0xf4c>
				tensorOut = l2_tensor_scratch;
 80015da:	4b4d      	ldr	r3, [pc, #308]	@ (8001710 <main+0x107c>)
 80015dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80015de:	e001      	b.n	80015e4 <main+0xf50>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV25_OUT_DIM*CONV25_OUT_DIM*CONV25_OUT_CH);
 80015e0:	4b50      	ldr	r3, [pc, #320]	@ (8001724 <main+0x1090>)
 80015e2:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 80015e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf0c      	ite	eq
 80015ea:	2301      	moveq	r3, #1
 80015ec:	2300      	movne	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 25	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV25_IM_DIM, CONV25_IM_CH,
 80015f2:	2300      	movs	r3, #0
 80015f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80015f6:	4b40      	ldr	r3, [pc, #256]	@ (80016f8 <main+0x1064>)
 80015f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80015fa:	2305      	movs	r3, #5
 80015fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80015fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001600:	930d      	str	r3, [sp, #52]	@ 0x34
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <main+0x1094>)
 8001604:	930c      	str	r3, [sp, #48]	@ 0x30
 8001606:	2301      	movs	r3, #1
 8001608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800160a:	2300      	movs	r3, #0
 800160c:	930a      	str	r3, [sp, #40]	@ 0x28
 800160e:	2300      	movs	r3, #0
 8001610:	9309      	str	r3, [sp, #36]	@ 0x24
 8001612:	2300      	movs	r3, #0
 8001614:	9308      	str	r3, [sp, #32]
 8001616:	2300      	movs	r3, #0
 8001618:	9307      	str	r3, [sp, #28]
 800161a:	2301      	movs	r3, #1
 800161c:	9306      	str	r3, [sp, #24]
 800161e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001622:	9305      	str	r3, [sp, #20]
 8001624:	2305      	movs	r3, #5
 8001626:	9304      	str	r3, [sp, #16]
 8001628:	4b40      	ldr	r3, [pc, #256]	@ (800172c <main+0x1098>)
 800162a:	9303      	str	r3, [sp, #12]
 800162c:	2300      	movs	r3, #0
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	2300      	movs	r3, #0
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2356      	movs	r3, #86	@ 0x56
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <main+0x109c>)
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	2105      	movs	r1, #5
 800163e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001640:	f000 ff69 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv25_wt, CONV25_W_Z, CONV25_IN_Z, CONV25_OUT_Z, CONV25_M_ZERO, CONV25_N_ZERO,
										  CONV25_OUT_CH, CONV25_KER_DIM,
										  CONV25_L_PADDING, CONV25_R_PADDING, CONV25_T_PADDING, CONV25_B_PADDING, CONV25_STRIDE, conv25_bias,
										  tensorOut, CONV25_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8001644:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <main+0x1074>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4930      	ldr	r1, [pc, #192]	@ (800170c <main+0x1078>)
 800164c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV25_OUT_DIM*CONV25_OUT_DIM*CONV25_OUT_CH,layerId); layerId++;
 8001652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001654:	3301      	adds	r3, #1
 8001656:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8001658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 800165c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <main+0xfd4>
				tensorOut = l2_tensor_scratch;
 8001662:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <main+0x107c>)
 8001664:	657b      	str	r3, [r7, #84]	@ 0x54
 8001666:	e001      	b.n	800166c <main+0xfd8>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV26_OUT_DIM*CONV26_OUT_DIM*CONV26_OUT_CH);
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <main+0x1090>)
 800166a:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 800166c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf0c      	ite	eq
 8001672:	2301      	moveq	r3, #1
 8001674:	2300      	movne	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 26	Conv dw/ s1
			*dephtwise
			*Cycle =
			*/
			arm_depthwise_separable_conv_HWC_asym_uint8(tensorIn, CONV26_IM_DIM, CONV26_IM_CH,
 800167a:	2300      	movs	r3, #0
 800167c:	9310      	str	r3, [sp, #64]	@ 0x40
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <main+0x1064>)
 8001680:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001682:	2305      	movs	r3, #5
 8001684:	930e      	str	r3, [sp, #56]	@ 0x38
 8001686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001688:	930d      	str	r3, [sp, #52]	@ 0x34
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <main+0x10a0>)
 800168c:	930c      	str	r3, [sp, #48]	@ 0x30
 800168e:	2301      	movs	r3, #1
 8001690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001692:	2301      	movs	r3, #1
 8001694:	930a      	str	r3, [sp, #40]	@ 0x28
 8001696:	2301      	movs	r3, #1
 8001698:	9309      	str	r3, [sp, #36]	@ 0x24
 800169a:	2301      	movs	r3, #1
 800169c:	9308      	str	r3, [sp, #32]
 800169e:	2301      	movs	r3, #1
 80016a0:	9307      	str	r3, [sp, #28]
 80016a2:	2303      	movs	r3, #3
 80016a4:	9306      	str	r3, [sp, #24]
 80016a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016aa:	9305      	str	r3, [sp, #20]
 80016ac:	2303      	movs	r3, #3
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <main+0x10a4>)
 80016b2:	9303      	str	r3, [sp, #12]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2300      	movs	r3, #0
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	23b0      	movs	r3, #176	@ 0xb0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <main+0x10a8>)
 80016c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016c6:	2105      	movs	r1, #5
 80016c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80016ca:	f001 fc5d 	bl	8002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>
										  conv26_wt, CONV26_W_Z, CONV26_IN_Z, CONV26_OUT_Z, CONV26_M_ZERO, CONV26_N_ZERO,
										  CONV26_OUT_CH, CONV26_KER_DIM,
										  CONV26_L_PADDING, CONV26_R_PADDING, CONV26_T_PADDING, CONV26_B_PADDING, CONV26_STRIDE, conv26_bias,
										  tensorOut, CONV26_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <main+0x1074>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	490d      	ldr	r1, [pc, #52]	@ (800170c <main+0x1078>)
 80016d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV26_OUT_DIM*CONV26_OUT_DIM*CONV26_OUT_CH,layerId); layerId++;
 80016dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016de:	3301      	adds	r3, #1
 80016e0:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 80016e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e4:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80016e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d129      	bne.n	8001740 <main+0x10ac>
				tensorOut = l2_tensor_scratch;
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <main+0x107c>)
 80016ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80016f0:	e028      	b.n	8001744 <main+0x10b0>
 80016f2:	bf00      	nop
 80016f4:	24022678 	.word	0x24022678
 80016f8:	24025954 	.word	0x24025954
 80016fc:	0802716c 	.word	0x0802716c
 8001700:	79630000 	.word	0x79630000
 8001704:	0802316c 	.word	0x0802316c
 8001708:	24000000 	.word	0x24000000
 800170c:	24027d54 	.word	0x24027d54
 8001710:	24000078 	.word	0x24000078
 8001714:	24024bf8 	.word	0x24024bf8
 8001718:	080277ec 	.word	0x080277ec
 800171c:	7fff0000 	.word	0x7fff0000
 8001720:	0802736c 	.word	0x0802736c
 8001724:	24023f78 	.word	0x24023f78
 8001728:	0802f9ec 	.word	0x0802f9ec
 800172c:	5e040000 	.word	0x5e040000
 8001730:	080279ec 	.word	0x080279ec
 8001734:	080306ec 	.word	0x080306ec
 8001738:	401a0000 	.word	0x401a0000
 800173c:	0802fdec 	.word	0x0802fdec
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (CONV27_OUT_DIM*CONV27_OUT_DIM*CONV27_OUT_CH);
 8001740:	4b7e      	ldr	r3, [pc, #504]	@ (800193c <main+0x12a8>)
 8001742:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8001744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf0c      	ite	eq
 800174a:	2301      	moveq	r3, #1
 800174c:	2300      	movne	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 27	Conv Point/ s1
			*pointwise
			*Cycle =
			*/
			arm_convolve_HWC_asym_uint8(tensorIn, CONV27_IM_DIM, CONV27_IM_CH,
 8001752:	2300      	movs	r3, #0
 8001754:	9310      	str	r3, [sp, #64]	@ 0x40
 8001756:	4b7a      	ldr	r3, [pc, #488]	@ (8001940 <main+0x12ac>)
 8001758:	930f      	str	r3, [sp, #60]	@ 0x3c
 800175a:	2305      	movs	r3, #5
 800175c:	930e      	str	r3, [sp, #56]	@ 0x38
 800175e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001760:	930d      	str	r3, [sp, #52]	@ 0x34
 8001762:	4b78      	ldr	r3, [pc, #480]	@ (8001944 <main+0x12b0>)
 8001764:	930c      	str	r3, [sp, #48]	@ 0x30
 8001766:	2301      	movs	r3, #1
 8001768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800176a:	2300      	movs	r3, #0
 800176c:	930a      	str	r3, [sp, #40]	@ 0x28
 800176e:	2300      	movs	r3, #0
 8001770:	9309      	str	r3, [sp, #36]	@ 0x24
 8001772:	2300      	movs	r3, #0
 8001774:	9308      	str	r3, [sp, #32]
 8001776:	2300      	movs	r3, #0
 8001778:	9307      	str	r3, [sp, #28]
 800177a:	2301      	movs	r3, #1
 800177c:	9306      	str	r3, [sp, #24]
 800177e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001782:	9305      	str	r3, [sp, #20]
 8001784:	2303      	movs	r3, #3
 8001786:	9304      	str	r3, [sp, #16]
 8001788:	4b6f      	ldr	r3, [pc, #444]	@ (8001948 <main+0x12b4>)
 800178a:	9303      	str	r3, [sp, #12]
 800178c:	2300      	movs	r3, #0
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2399      	movs	r3, #153	@ 0x99
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4b6c      	ldr	r3, [pc, #432]	@ (800194c <main+0x12b8>)
 800179a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800179e:	2105      	movs	r1, #5
 80017a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80017a2:	f000 feb8 	bl	8002516 <arm_convolve_HWC_asym_uint8>
										  conv27_wt, CONV27_W_Z, CONV27_IN_Z, CONV27_OUT_Z, CONV27_M_ZERO, CONV27_N_ZERO,
										  CONV27_OUT_CH, CONV27_KER_DIM,
										  CONV27_L_PADDING, CONV27_R_PADDING, CONV27_T_PADDING, CONV27_B_PADDING, CONV27_STRIDE, conv27_bias,
										  tensorOut, CONV27_OUT_DIM, l1_tensor_scratch, NULL);

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80017a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001950 <main+0x12bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4969      	ldr	r1, [pc, #420]	@ (8001954 <main+0x12c0>)
 80017ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,CONV27_OUT_DIM*CONV27_OUT_DIM*CONV27_OUT_CH,layerId); layerId++;
 80017b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017b6:	3301      	adds	r3, #1
 80017b8:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 80017ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017bc:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 80017be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <main+0x1136>
				tensorOut = l2_tensor_scratch;
 80017c4:	4b64      	ldr	r3, [pc, #400]	@ (8001958 <main+0x12c4>)
 80017c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80017c8:	e001      	b.n	80017ce <main+0x113a>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (FC28_IM_CH);
 80017ca:	4b64      	ldr	r3, [pc, #400]	@ (800195c <main+0x12c8>)
 80017cc:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 80017ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 28	Avgpool */
			arm_avepool_asym_uint8_HWC(tensorIn, CONV27_OUT_DIM, CONV27_OUT_CH, 5, 0, 5, 1, l1_tensor_scratch, tensorOut);
 80017dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017de:	9304      	str	r3, [sp, #16]
 80017e0:	4b57      	ldr	r3, [pc, #348]	@ (8001940 <main+0x12ac>)
 80017e2:	9303      	str	r3, [sp, #12]
 80017e4:	2301      	movs	r3, #1
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2305      	movs	r3, #5
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2300      	movs	r3, #0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2305      	movs	r3, #5
 80017f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f6:	2105      	movs	r1, #5
 80017f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80017fa:	f003 fc09 	bl	8005010 <arm_avepool_asym_uint8_HWC>

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80017fe:	4b54      	ldr	r3, [pc, #336]	@ (8001950 <main+0x12bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4953      	ldr	r1, [pc, #332]	@ (8001954 <main+0x12c0>)
 8001806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,FC28_IM_CH,layerId); layerId++;
 800180c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800180e:	3301      	adds	r3, #1
 8001810:	643b      	str	r3, [r7, #64]	@ 0x40

			tensorIn  = tensorOut;
 8001812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001814:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (!tensorId)
 8001816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <main+0x118e>
				tensorOut = l2_tensor_scratch;
 800181c:	4b4e      	ldr	r3, [pc, #312]	@ (8001958 <main+0x12c4>)
 800181e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001820:	e001      	b.n	8001826 <main+0x1192>
			else
				tensorOut = l2_tensor_scratch + L2_TENSOR_IO_SIZE - (FC28_OUT_CH);
 8001822:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <main+0x12cc>)
 8001824:	657b      	str	r3, [r7, #84]	@ 0x54
			tensorId = !tensorId;
 8001826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/*Layer 29	FC
			*Cycle =
			*/
			arm_fully_connected_asym_uint8(tensorIn, fc28_wt, FC28_IM_CH, FC28_OUT_CH, FC28_W_Z, FC28_IN_Z, FC28_OUT_Z, FC28_M_ZERO, FC28_N_ZERO, fc28_bias, tensorOut, l1_tensor_scratch);
 8001834:	4b42      	ldr	r3, [pc, #264]	@ (8001940 <main+0x12ac>)
 8001836:	9307      	str	r3, [sp, #28]
 8001838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183a:	9306      	str	r3, [sp, #24]
 800183c:	4b49      	ldr	r3, [pc, #292]	@ (8001964 <main+0x12d0>)
 800183e:	9305      	str	r3, [sp, #20]
 8001840:	2308      	movs	r3, #8
 8001842:	9304      	str	r3, [sp, #16]
 8001844:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <main+0x12d4>)
 8001846:	9303      	str	r3, [sp, #12]
 8001848:	230d      	movs	r3, #13
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2300      	movs	r3, #0
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2354      	movs	r3, #84	@ 0x54
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001858:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185c:	4943      	ldr	r1, [pc, #268]	@ (800196c <main+0x12d8>)
 800185e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001860:	f002 fe39 	bl	80044d6 <arm_fully_connected_asym_uint8>

			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 8001864:	4b3a      	ldr	r3, [pc, #232]	@ (8001950 <main+0x12bc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	493a      	ldr	r1, [pc, #232]	@ (8001954 <main+0x12c0>)
 800186c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			USR_CHECKSUM(tensorOut,FC28_OUT_CH,layerId); layerId++;
 8001872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001874:	3301      	adds	r3, #1
 8001876:	643b      	str	r3, [r7, #64]	@ 0x40

			USR_MEM_BARRIER();
			int top5[5];
			int top5_score[5];
			for (int i=0; i<5; i++){
 8001878:	2300      	movs	r3, #0
 800187a:	653b      	str	r3, [r7, #80]	@ 0x50
 800187c:	e038      	b.n	80018f0 <main+0x125c>
				int max=0;
 800187e:	2300      	movs	r3, #0
 8001880:	64fb      	str	r3, [r7, #76]	@ 0x4c
				for(int ii=0; ii<FC28_OUT_CH; ii++)
 8001882:	2300      	movs	r3, #0
 8001884:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001886:	e021      	b.n	80018cc <main+0x1238>
					if (tensorOut[ii] > max){
 8001888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800188c:	4413      	add	r3, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001894:	4293      	cmp	r3, r2
 8001896:	da16      	bge.n	80018c6 <main+0x1232>
						top5[i] = ii;
 8001898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3358      	adds	r3, #88	@ 0x58
 800189e:	443b      	add	r3, r7
 80018a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018a2:	f843 2c40 	str.w	r2, [r3, #-64]
						top5_score[i] = tensorOut[ii];
 80018a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	3358      	adds	r3, #88	@ 0x58
 80018b6:	443b      	add	r3, r7
 80018b8:	f843 2c54 	str.w	r2, [r3, #-84]
						max= tensorOut[ii];
 80018bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
				for(int ii=0; ii<FC28_OUT_CH; ii++)
 80018c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018c8:	3301      	adds	r3, #1
 80018ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018d2:	dbd9      	blt.n	8001888 <main+0x11f4>
					}
				tensorOut[top5[i]]=0;
 80018d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	3358      	adds	r3, #88	@ 0x58
 80018da:	443b      	add	r3, r7
 80018dc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80018e0:	461a      	mov	r2, r3
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	4413      	add	r3, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<5; i++){
 80018ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ec:	3301      	adds	r3, #1
 80018ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80018f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	ddc3      	ble.n	800187e <main+0x11ea>
			}
			USR_GET_CC_TIMESTAMP(cpu_cycles[layerId]);
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <main+0x12bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4915      	ldr	r1, [pc, #84]	@ (8001954 <main+0x12c0>)
 80018fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			for (int i = 0; i < 5; i++){
 8001904:	2300      	movs	r3, #0
 8001906:	647b      	str	r3, [r7, #68]	@ 0x44
 8001908:	e012      	b.n	8001930 <main+0x129c>
			      printf("%d: %d\n", top5[i], top5_score[i]);
 800190a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	3358      	adds	r3, #88	@ 0x58
 8001910:	443b      	add	r3, r7
 8001912:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8001916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	3358      	adds	r3, #88	@ 0x58
 800191c:	443b      	add	r3, r7
 800191e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001922:	461a      	mov	r2, r3
 8001924:	4812      	ldr	r0, [pc, #72]	@ (8001970 <main+0x12dc>)
 8001926:	f009 f959 	bl	800abdc <iprintf>
			for (int i = 0; i < 5; i++){
 800192a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192c:	3301      	adds	r3, #1
 800192e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001932:	2b04      	cmp	r3, #4
 8001934:	dde9      	ble.n	800190a <main+0x1276>
  {
 8001936:	f7fe bf1f 	b.w	8000778 <main+0xe4>
 800193a:	bf00      	nop
 800193c:	24023f78 	.word	0x24023f78
 8001940:	24025954 	.word	0x24025954
 8001944:	08040aec 	.word	0x08040aec
 8001948:	41420000 	.word	0x41420000
 800194c:	08030aec 	.word	0x08030aec
 8001950:	24000000 	.word	0x24000000
 8001954:	24027d54 	.word	0x24027d54
 8001958:	24000078 	.word	0x24000078
 800195c:	24025778 	.word	0x24025778
 8001960:	24025490 	.word	0x24025490
 8001964:	0807f6ec 	.word	0x0807f6ec
 8001968:	46340000 	.word	0x46340000
 800196c:	08040eec 	.word	0x08040eec
 8001970:	0800b8ec 	.word	0x0800b8ec

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b09e      	sub	sp, #120	@ 0x78
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800197e:	224c      	movs	r2, #76	@ 0x4c
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f009 f97f 	bl	800ac86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2220      	movs	r2, #32
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f009 f978 	bl	800ac86 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001996:	2002      	movs	r0, #2
 8001998:	f004 fd90 	bl	80064bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b48      	ldr	r3, [pc, #288]	@ (8001ac4 <SystemClock_Config+0x150>)
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	4a47      	ldr	r2, [pc, #284]	@ (8001ac4 <SystemClock_Config+0x150>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019ac:	4b45      	ldr	r3, [pc, #276]	@ (8001ac4 <SystemClock_Config+0x150>)
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <SystemClock_Config+0x154>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a43      	ldr	r2, [pc, #268]	@ (8001ac8 <SystemClock_Config+0x154>)
 80019bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <SystemClock_Config+0x154>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019ce:	bf00      	nop
 80019d0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <SystemClock_Config+0x154>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019dc:	d1f8      	bne.n	80019d0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b3b      	ldr	r3, [pc, #236]	@ (8001acc <SystemClock_Config+0x158>)
 80019e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019e4:	4a39      	ldr	r2, [pc, #228]	@ (8001acc <SystemClock_Config+0x158>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019ee:	4b37      	ldr	r3, [pc, #220]	@ (8001acc <SystemClock_Config+0x158>)
 80019f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <SystemClock_Config+0x154>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a30      	ldr	r2, [pc, #192]	@ (8001ac8 <SystemClock_Config+0x154>)
 8001a06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <SystemClock_Config+0x154>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <SystemClock_Config+0x150>)
 8001a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac4 <SystemClock_Config+0x150>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001a22:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <SystemClock_Config+0x150>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a2e:	bf00      	nop
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <SystemClock_Config+0x154>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a3c:	d1f8      	bne.n	8001a30 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001a54:	2378      	movs	r3, #120	@ 0x78
 8001a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a64:	230c      	movs	r3, #12
 8001a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 fd6b 	bl	8006550 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001a80:	f000 f9a4 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	233f      	movs	r3, #63	@ 0x3f
 8001a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a90:	2308      	movs	r3, #8
 8001a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a94:	2340      	movs	r3, #64	@ 0x40
 8001a96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a98:	2340      	movs	r3, #64	@ 0x40
 8001a9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001aa2:	2340      	movs	r3, #64	@ 0x40
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 f9a9 	bl	8006e04 <HAL_RCC_ClockConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001ab8:	f000 f988 	bl	8001dcc <Error_Handler>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3778      	adds	r7, #120	@ 0x78
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58000400 	.word	0x58000400
 8001ac8:	58024800 	.word	0x58024800
 8001acc:	58024400 	.word	0x58024400

08001ad0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <MX_ETH_Init+0x80>)
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <MX_ETH_Init+0x84>)
 8001ad8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <MX_ETH_Init+0x88>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <MX_ETH_Init+0x88>)
 8001ae2:	2280      	movs	r2, #128	@ 0x80
 8001ae4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <MX_ETH_Init+0x88>)
 8001ae8:	22e1      	movs	r2, #225	@ 0xe1
 8001aea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <MX_ETH_Init+0x88>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001af2:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <MX_ETH_Init+0x88>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <MX_ETH_Init+0x88>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <MX_ETH_Init+0x80>)
 8001b00:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <MX_ETH_Init+0x88>)
 8001b02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_ETH_Init+0x80>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_ETH_Init+0x80>)
 8001b0c:	4a13      	ldr	r2, [pc, #76]	@ (8001b5c <MX_ETH_Init+0x8c>)
 8001b0e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_ETH_Init+0x80>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	@ (8001b60 <MX_ETH_Init+0x90>)
 8001b14:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_ETH_Init+0x80>)
 8001b18:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001b1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b1e:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <MX_ETH_Init+0x80>)
 8001b20:	f003 fd9e 	bl	8005660 <HAL_ETH_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001b2a:	f000 f94f 	bl	8001dcc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b2e:	2238      	movs	r2, #56	@ 0x38
 8001b30:	2100      	movs	r1, #0
 8001b32:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <MX_ETH_Init+0x94>)
 8001b34:	f009 f8a7 	bl	800ac86 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_ETH_Init+0x94>)
 8001b3a:	2221      	movs	r2, #33	@ 0x21
 8001b3c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_ETH_Init+0x94>)
 8001b40:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b44:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_ETH_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24027e04 	.word	0x24027e04
 8001b54:	40028000 	.word	0x40028000
 8001b58:	2402842c 	.word	0x2402842c
 8001b5c:	240258d8 	.word	0x240258d8
 8001b60:	24025878 	.word	0x24025878
 8001b64:	24027dcc 	.word	0x24027dcc

08001b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <MX_USART3_UART_Init+0x94>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b72:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb0:	4811      	ldr	r0, [pc, #68]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001bb2:	f007 fadf 	bl	8009174 <HAL_UART_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bbc:	f000 f906 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001bc4:	f008 fb75 	bl	800a2b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bce:	f000 f8fd 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4808      	ldr	r0, [pc, #32]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001bd6:	f008 fbaa 	bl	800a32e <HAL_UARTEx_SetRxFifoThreshold>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001be0:	f000 f8f4 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <MX_USART3_UART_Init+0x90>)
 8001be6:	f008 fb2b 	bl	800a240 <HAL_UARTEx_DisableFifoMode>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bf0:	f000 f8ec 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	24027eb4 	.word	0x24027eb4
 8001bfc:	40004800 	.word	0x40004800

08001c00 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c06:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001c08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c0c:	2209      	movs	r2, #9
 8001c0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c12:	2202      	movs	r2, #2
 8001c14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c1e:	2202      	movs	r2, #2
 8001c20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c48:	f004 fb07 	bl	800625a <HAL_PCD_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001c52:	f000 f8bb 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	24027f48 	.word	0x24027f48
 8001c60:	40080000 	.word	0x40080000

08001c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	@ 0x30
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c80:	4a4e      	ldr	r2, [pc, #312]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c8a:	4b4c      	ldr	r3, [pc, #304]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c98:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9e:	4a47      	ldr	r2, [pc, #284]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca8:	4b44      	ldr	r3, [pc, #272]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	4a38      	ldr	r2, [pc, #224]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce4:	4b35      	ldr	r3, [pc, #212]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf2:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf8:	4a30      	ldr	r2, [pc, #192]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d02:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d16:	4a29      	ldr	r2, [pc, #164]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d20:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <MX_GPIO_Init+0x158>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001d34:	4822      	ldr	r0, [pc, #136]	@ (8001dc0 <MX_GPIO_Init+0x15c>)
 8001d36:	f004 fa77 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2140      	movs	r1, #64	@ 0x40
 8001d3e:	4821      	ldr	r0, [pc, #132]	@ (8001dc4 <MX_GPIO_Init+0x160>)
 8001d40:	f004 fa72 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	481b      	ldr	r0, [pc, #108]	@ (8001dc8 <MX_GPIO_Init+0x164>)
 8001d5c:	f004 f8b4 	bl	8005ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001d60:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4811      	ldr	r0, [pc, #68]	@ (8001dc0 <MX_GPIO_Init+0x15c>)
 8001d7a:	f004 f8a5 	bl	8005ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d7e:	2340      	movs	r3, #64	@ 0x40
 8001d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	4619      	mov	r1, r3
 8001d94:	480b      	ldr	r0, [pc, #44]	@ (8001dc4 <MX_GPIO_Init+0x160>)
 8001d96:	f004 f897 	bl	8005ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <MX_GPIO_Init+0x160>)
 8001dae:	f004 f88b 	bl	8005ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	@ 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	58020400 	.word	0x58020400
 8001dc4:	58021800 	.word	0x58021800
 8001dc8:	58020800 	.word	0x58020800

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x8>

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_MspInit+0x30>)
 8001de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001de4:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_MspInit+0x30>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_MspInit+0x30>)
 8001df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	58024400 	.word	0x58024400

08001e0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08e      	sub	sp, #56	@ 0x38
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a59      	ldr	r2, [pc, #356]	@ (8001f90 <HAL_ETH_MspInit+0x184>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	f040 80ab 	bne.w	8001f86 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001e30:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e36:	4a57      	ldr	r2, [pc, #348]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e40:	4b54      	ldr	r3, [pc, #336]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001e4e:	4b51      	ldr	r3, [pc, #324]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e54:	4a4f      	ldr	r2, [pc, #316]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001e6c:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e72:	4a48      	ldr	r2, [pc, #288]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e78:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e7c:	4b45      	ldr	r3, [pc, #276]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b42      	ldr	r3, [pc, #264]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e90:	4a40      	ldr	r2, [pc, #256]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eae:	4a39      	ldr	r2, [pc, #228]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb8:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4b33      	ldr	r3, [pc, #204]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eea:	4a2a      	ldr	r2, [pc, #168]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_ETH_MspInit+0x188>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f02:	2332      	movs	r3, #50	@ 0x32
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f12:	230b      	movs	r3, #11
 8001f14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481e      	ldr	r0, [pc, #120]	@ (8001f98 <HAL_ETH_MspInit+0x18c>)
 8001f1e:	f003 ffd3 	bl	8005ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f22:	2386      	movs	r3, #134	@ 0x86
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f32:	230b      	movs	r3, #11
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4817      	ldr	r0, [pc, #92]	@ (8001f9c <HAL_ETH_MspInit+0x190>)
 8001f3e:	f003 ffc3 	bl	8005ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f54:	230b      	movs	r3, #11
 8001f56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4810      	ldr	r0, [pc, #64]	@ (8001fa0 <HAL_ETH_MspInit+0x194>)
 8001f60:	f003 ffb2 	bl	8005ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f64:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f76:	230b      	movs	r3, #11
 8001f78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <HAL_ETH_MspInit+0x198>)
 8001f82:	f003 ffa1 	bl	8005ec8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001f86:	bf00      	nop
 8001f88:	3738      	adds	r7, #56	@ 0x38
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40028000 	.word	0x40028000
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58020800 	.word	0x58020800
 8001f9c:	58020000 	.word	0x58020000
 8001fa0:	58020400 	.word	0x58020400
 8001fa4:	58021800 	.word	0x58021800

08001fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0ba      	sub	sp, #232	@ 0xe8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	22c0      	movs	r2, #192	@ 0xc0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f008 fe5c 	bl	800ac86 <memset>
  if(huart->Instance==USART3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a27      	ldr	r2, [pc, #156]	@ (8002070 <HAL_UART_MspInit+0xc8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d146      	bne.n	8002066 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fd8:	f04f 0202 	mov.w	r2, #2
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 fa94 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ffa:	f7ff fee7 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <HAL_UART_MspInit+0xcc>)
 8002000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002004:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <HAL_UART_MspInit+0xcc>)
 8002006:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800200a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_UART_MspInit+0xcc>)
 8002010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_UART_MspInit+0xcc>)
 800201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002022:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <HAL_UART_MspInit+0xcc>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800202c:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <HAL_UART_MspInit+0xcc>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800203a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800203e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002054:	2307      	movs	r3, #7
 8002056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <HAL_UART_MspInit+0xd0>)
 8002062:	f003 ff31 	bl	8005ec8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002066:	bf00      	nop
 8002068:	37e8      	adds	r7, #232	@ 0xe8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40004800 	.word	0x40004800
 8002074:	58024400 	.word	0x58024400
 8002078:	58020c00 	.word	0x58020c00

0800207c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0ba      	sub	sp, #232	@ 0xe8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	22c0      	movs	r2, #192	@ 0xc0
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f008 fdf2 	bl	800ac86 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a30      	ldr	r2, [pc, #192]	@ (8002168 <HAL_PCD_MspInit+0xec>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d159      	bne.n	8002160 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80020ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80020b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 fa29 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80020d0:	f7ff fe7c 	bl	8001dcc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80020d4:	f004 fa2c 	bl	8006530 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_PCD_MspInit+0xf0>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020de:	4a23      	ldr	r2, [pc, #140]	@ (800216c <HAL_PCD_MspInit+0xf0>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_PCD_MspInit+0xf0>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80020f6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80020fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002110:	230a      	movs	r3, #10
 8002112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800211a:	4619      	mov	r1, r3
 800211c:	4814      	ldr	r0, [pc, #80]	@ (8002170 <HAL_PCD_MspInit+0xf4>)
 800211e:	f003 fed3 	bl	8005ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800213a:	4619      	mov	r1, r3
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <HAL_PCD_MspInit+0xf4>)
 800213e:	f003 fec3 	bl	8005ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_PCD_MspInit+0xf0>)
 8002144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002148:	4a08      	ldr	r2, [pc, #32]	@ (800216c <HAL_PCD_MspInit+0xf0>)
 800214a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800214e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_PCD_MspInit+0xf0>)
 8002154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002160:	bf00      	nop
 8002162:	37e8      	adds	r7, #232	@ 0xe8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40080000 	.word	0x40080000
 800216c:	58024400 	.word	0x58024400
 8002170:	58020000 	.word	0x58020000

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <NMI_Handler+0x4>

0800217c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <HardFault_Handler+0x4>

08002184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <MemManage_Handler+0x4>

0800218c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <BusFault_Handler+0x4>

08002194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <UsageFault_Handler+0x4>

0800219c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ca:	f003 f901 	bl	80053d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e00a      	b.n	80021fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021e4:	f3af 8000 	nop.w
 80021e8:	4601      	mov	r1, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	60ba      	str	r2, [r7, #8]
 80021f0:	b2ca      	uxtb	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbf0      	blt.n	80021e4 <_read+0x12>
  }

  return len;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e009      	b.n	8002232 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	60ba      	str	r2, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fa22 	bl	8000670 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	dbf1      	blt.n	800221e <_write+0x12>
  }
  return len;
 800223a:	687b      	ldr	r3, [r7, #4]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_close>:

int _close(int file)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800226c:	605a      	str	r2, [r3, #4]
  return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_isatty>:

int _isatty(int file)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002284:	2301      	movs	r3, #1
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002292:	b480      	push	{r7}
 8002294:	b085      	sub	sp, #20
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b4:	4a14      	ldr	r2, [pc, #80]	@ (8002308 <_sbrk+0x5c>)
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <_sbrk+0x60>)
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c0:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <_sbrk+0x64>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <_sbrk+0x68>)
 80022cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d207      	bcs.n	80022ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022dc:	f008 fd22 	bl	800ad24 <__errno>
 80022e0:	4603      	mov	r3, r0
 80022e2:	220c      	movs	r2, #12
 80022e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	e009      	b.n	8002300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <_sbrk+0x64>)
 80022fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022fe:	68fb      	ldr	r3, [r7, #12]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	24080000 	.word	0x24080000
 800230c:	00000400 	.word	0x00000400
 8002310:	24028434 	.word	0x24028434
 8002314:	24028588 	.word	0x24028588

08002318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800231c:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <SystemInit+0xe4>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	4a36      	ldr	r2, [pc, #216]	@ (80023fc <SystemInit+0xe4>)
 8002324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800232c:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <SystemInit+0xe8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	2b06      	cmp	r3, #6
 8002336:	d807      	bhi.n	8002348 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002338:	4b31      	ldr	r3, [pc, #196]	@ (8002400 <SystemInit+0xe8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 030f 	bic.w	r3, r3, #15
 8002340:	4a2f      	ldr	r2, [pc, #188]	@ (8002400 <SystemInit+0xe8>)
 8002342:	f043 0307 	orr.w	r3, r3, #7
 8002346:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002348:	4b2e      	ldr	r3, [pc, #184]	@ (8002404 <SystemInit+0xec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2d      	ldr	r2, [pc, #180]	@ (8002404 <SystemInit+0xec>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002354:	4b2b      	ldr	r3, [pc, #172]	@ (8002404 <SystemInit+0xec>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800235a:	4b2a      	ldr	r3, [pc, #168]	@ (8002404 <SystemInit+0xec>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4929      	ldr	r1, [pc, #164]	@ (8002404 <SystemInit+0xec>)
 8002360:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <SystemInit+0xf0>)
 8002362:	4013      	ands	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002366:	4b26      	ldr	r3, [pc, #152]	@ (8002400 <SystemInit+0xe8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002372:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <SystemInit+0xe8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 030f 	bic.w	r3, r3, #15
 800237a:	4a21      	ldr	r2, [pc, #132]	@ (8002400 <SystemInit+0xe8>)
 800237c:	f043 0307 	orr.w	r3, r3, #7
 8002380:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002382:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <SystemInit+0xec>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002388:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <SystemInit+0xec>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <SystemInit+0xec>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <SystemInit+0xec>)
 8002396:	4a1d      	ldr	r2, [pc, #116]	@ (800240c <SystemInit+0xf4>)
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <SystemInit+0xec>)
 800239c:	4a1c      	ldr	r2, [pc, #112]	@ (8002410 <SystemInit+0xf8>)
 800239e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <SystemInit+0xec>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002414 <SystemInit+0xfc>)
 80023a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <SystemInit+0xec>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <SystemInit+0xec>)
 80023ae:	4a19      	ldr	r2, [pc, #100]	@ (8002414 <SystemInit+0xfc>)
 80023b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <SystemInit+0xec>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <SystemInit+0xec>)
 80023ba:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <SystemInit+0xfc>)
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <SystemInit+0xec>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <SystemInit+0xec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002404 <SystemInit+0xec>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <SystemInit+0xec>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <SystemInit+0x100>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <SystemInit+0x104>)
 80023dc:	4013      	ands	r3, r2
 80023de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023e2:	d202      	bcs.n	80023ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <SystemInit+0x108>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <SystemInit+0x10c>)
 80023ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00
 8002400:	52002000 	.word	0x52002000
 8002404:	58024400 	.word	0x58024400
 8002408:	eaf6ed7f 	.word	0xeaf6ed7f
 800240c:	02020200 	.word	0x02020200
 8002410:	01ff0000 	.word	0x01ff0000
 8002414:	01010280 	.word	0x01010280
 8002418:	5c001000 	.word	0x5c001000
 800241c:	ffff0000 	.word	0xffff0000
 8002420:	51008108 	.word	0x51008108
 8002424:	52004000 	.word	0x52004000

08002428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002460 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800242c:	f7ff ff74 	bl	8002318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002430:	480c      	ldr	r0, [pc, #48]	@ (8002464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002432:	490d      	ldr	r1, [pc, #52]	@ (8002468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002434:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002448:	4c0a      	ldr	r4, [pc, #40]	@ (8002474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002456:	f008 fc6b 	bl	800ad30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245a:	f7fe f91b 	bl	8000694 <main>
  bx  lr
 800245e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002460:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002464:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002468:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800246c:	08099708 	.word	0x08099708
  ldr r2, =_sbss
 8002470:	24025938 	.word	0x24025938
  ldr r4, =_ebss
 8002474:	24028588 	.word	0x24028588

08002478 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <ADC3_IRQHandler>

0800247a <read_and_pad_reordered_uint8>:

/*
 * @brief read and expand four UINT8 into four INT16 with reordering
 */
__STATIC_INLINE void *read_and_pad_reordered_uint8(void *source, int32_t * out1, int32_t * out2)
{
 800247a:	b480      	push	{r7}
 800247c:	b08d      	sub	sp, #52	@ 0x34
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
		int32_t inA = *__SIMD32(source)++;
 8002486:	f107 020c 	add.w	r2, r7, #12
 800248a:	6813      	ldr	r3, [r2, #0]
 800248c:	1d19      	adds	r1, r3, #4
 800248e:	6011      	str	r1, [r2, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __UXTB16(__ROR(inA, 8));
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	2308      	movs	r3, #8
 800249a:	617b      	str	r3, [r7, #20]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <read_and_pad_reordered_uint8+0x34>
  {
    return op1;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	e003      	b.n	80024b6 <read_and_pad_reordered_uint8+0x3c>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa62 f303 	ror.w	r3, r2, r3
 80024b6:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	fa3f f383 	uxtb16	r3, r3
 80024be:	61fb      	str	r3, [r7, #28]
  return(result);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
        *out1 = __UXTB16(inA);
 80024c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ce:	fa3f f383 	uxtb16	r3, r3
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	461a      	mov	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	601a      	str	r2, [r3, #0]
#else
        *out1 = __UXTB16(__ROR(inA, 8));
        *out2 = __UXTB16(inA);
#endif

        return source;
 80024dc:	68fb      	ldr	r3, [r7, #12]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3734      	adds	r7, #52	@ 0x34
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <__HI_SMULL>:

__STATIC_INLINE int32_t __HI_SMULL(int32_t a, int32_t b)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  int hi = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  int lo = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6838      	ldr	r0, [r7, #0]
 8002500:	fb81 2300 	smull	r2, r3, r1, r0
 8002504:	60ba      	str	r2, [r7, #8]
 8002506:	60fb      	str	r3, [r7, #12]
    : [lo_out] "=&r" (lo), [hi_out] "=&r" (hi)
    : [a_operand] "r" (a), [b_operand] "r" (b)
  );
  return hi;
 8002508:	68fb      	ldr	r3, [r7, #12]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <arm_convolve_HWC_asym_uint8>:
                         const int32_t * bias,
                         uint8_t * Im_out,
                         const uint16_t dim_im_out, 
						 int16_t * bufferA,
						 uint8_t * bufferB)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b0ae      	sub	sp, #184	@ 0xb8
 800251a:	af08      	add	r7, sp, #32
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
 8002524:	4613      	mov	r3, r2
 8002526:	813b      	strh	r3, [r7, #8]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
    int16_t  *pBuffer = bufferA;
 8002528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800252c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t  *pOut = Im_out;
 8002530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 8002538:	893b      	ldrh	r3, [r7, #8]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <arm_convolve_HWC_asym_uint8+0x3c>
 8002544:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <arm_convolve_HWC_asym_uint8+0x44>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8002552:	f06f 0302 	mvn.w	r3, #2
 8002556:	f000 bcfd 	b.w	8002f54 <arm_convolve_HWC_asym_uint8+0xa3e>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 800255a:	2300      	movs	r3, #0
 800255c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8002560:	e0db      	b.n	800271a <arm_convolve_HWC_asym_uint8+0x204>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002562:	2300      	movs	r3, #0
 8002564:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002568:	e0c9      	b.n	80026fe <arm_convolve_HWC_asym_uint8+0x1e8>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 800256a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800256e:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002572:	fb12 f303 	smulbb	r3, r2, r3
 8002576:	b29a      	uxth	r2, r3
 8002578:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 800257c:	b29b      	uxth	r3, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002586:	e063      	b.n	8002650 <arm_convolve_HWC_asym_uint8+0x13a>
            {
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8002588:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800258c:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002590:	fb12 f303 	smulbb	r3, r2, r3
 8002594:	b29a      	uxth	r2, r3
 8002596:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 800259a:	b29b      	uxth	r3, r3
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80025a4:	e03d      	b.n	8002622 <arm_convolve_HWC_asym_uint8+0x10c>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80025a6:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0d      	blt.n	80025ca <arm_convolve_HWC_asym_uint8+0xb4>
 80025ae:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 80025b2:	897b      	ldrh	r3, [r7, #10]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	da08      	bge.n	80025ca <arm_convolve_HWC_asym_uint8+0xb4>
 80025b8:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db04      	blt.n	80025ca <arm_convolve_HWC_asym_uint8+0xb4>
 80025c0:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 80025c4:	897b      	ldrh	r3, [r7, #10]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	db08      	blt.n	80025dc <arm_convolve_HWC_asym_uint8+0xc6>
                    {
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 80025ca:	893b      	ldrh	r3, [r7, #8]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	461a      	mov	r2, r3
 80025d0:	2100      	movs	r1, #0
 80025d2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80025d6:	f008 fb56 	bl	800ac86 <memset>
 80025da:	e014      	b.n	8002606 <arm_convolve_HWC_asym_uint8+0xf0>
                    }
                    else
                    {
                    	arm_asym_uint8_to_int16_reordered_no_shift
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 80025dc:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 80025e0:	897a      	ldrh	r2, [r7, #10]
 80025e2:	fb03 f202 	mul.w	r2, r3, r2
 80025e6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 80025ea:	4413      	add	r3, r2
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	461a      	mov	r2, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1898      	adds	r0, r3, r2
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	f897 10a4 	ldrb.w	r1, [r7, #164]	@ 0xa4
 80025fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002602:	f002 fb71 	bl	8004ce8 <arm_asym_uint8_to_int16_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8002606:	893b      	ldrh	r3, [r7, #8]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800260e:	4413      	add	r3, r2
 8002610:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8002614:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002618:	b29b      	uxth	r3, r3
 800261a:	3301      	adds	r3, #1
 800261c:	b29b      	uxth	r3, r3
 800261e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8002622:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 8002626:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 800262a:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 800262e:	fb03 f101 	mul.w	r1, r3, r1
 8002632:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8002636:	1ac9      	subs	r1, r1, r3
 8002638:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800263c:	440b      	add	r3, r1
 800263e:	429a      	cmp	r2, r3
 8002640:	dbb1      	blt.n	80025a6 <arm_convolve_HWC_asym_uint8+0x90>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8002642:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002646:	b29b      	uxth	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002650:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 8002654:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 8002658:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 800265c:	fb03 f101 	mul.w	r1, r3, r1
 8002660:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002664:	1ac9      	subs	r1, r1, r3
 8002666:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800266a:	440b      	add	r3, r1
 800266c:	429a      	cmp	r2, r3
 800266e:	db8b      	blt.n	8002588 <arm_convolve_HWC_asym_uint8+0x72>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002688:	4413      	add	r3, r2
 800268a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800268e:	429a      	cmp	r2, r3
 8002690:	d12e      	bne.n	80026f0 <arm_convolve_HWC_asym_uint8+0x1da>
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8002692:	893a      	ldrh	r2, [r7, #8]
 8002694:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002698:	fb12 f303 	smulbb	r3, r2, r3
 800269c:	b29b      	uxth	r3, r3
 800269e:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 80026a2:	fb12 f303 	smulbb	r3, r2, r3
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f897 00a4 	ldrb.w	r0, [r7, #164]	@ 0xa4
 80026ac:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 80026b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80026b4:	9206      	str	r2, [sp, #24]
 80026b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026ba:	9205      	str	r2, [sp, #20]
 80026bc:	9304      	str	r3, [sp, #16]
 80026be:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4603      	mov	r3, r0
 80026d8:	460a      	mov	r2, r1
 80026da:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f001 fb50 	bl	8003d84 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 80026e4:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 80026e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80026f0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80026fe:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	@ 0x94
 8002702:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8002706:	429a      	cmp	r2, r3
 8002708:	f6ff af2f 	blt.w	800256a <arm_convolve_HWC_asym_uint8+0x54>
    for (i_out_y = 0; i_out_y < top_padding; i_out_y++)
 800270c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 8002710:	b29b      	uxth	r3, r3
 8002712:	3301      	adds	r3, #1
 8002714:	b29b      	uxth	r3, r3
 8002716:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 800271a:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 800271e:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002722:	429a      	cmp	r2, r3
 8002724:	f6ff af1d 	blt.w	8002562 <arm_convolve_HWC_asym_uint8+0x4c>
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out - bottom_padding; i_out_y++)
 8002728:	e23e      	b.n	8002ba8 <arm_convolve_HWC_asym_uint8+0x692>
    {

        /* left part */
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 800272a:	2300      	movs	r3, #0
 800272c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002730:	e0c0      	b.n	80028b4 <arm_convolve_HWC_asym_uint8+0x39e>
        {
            /* This part implements the im2col function */
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8002732:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002736:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 800273a:	fb12 f303 	smulbb	r3, r2, r3
 800273e:	b29a      	uxth	r2, r3
 8002740:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002744:	b29b      	uxth	r3, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	b29b      	uxth	r3, r3
 800274a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800274e:	e05a      	b.n	8002806 <arm_convolve_HWC_asym_uint8+0x2f0>
            {
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8002750:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002754:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002758:	fb12 f303 	smulbb	r3, r2, r3
 800275c:	b29a      	uxth	r2, r3
 800275e:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8002762:	b29b      	uxth	r3, r3
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	b29b      	uxth	r3, r3
 8002768:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800276c:	e034      	b.n	80027d8 <arm_convolve_HWC_asym_uint8+0x2c2>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 800276e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002772:	2b00      	cmp	r3, #0
 8002774:	db04      	blt.n	8002780 <arm_convolve_HWC_asym_uint8+0x26a>
 8002776:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	429a      	cmp	r2, r3
 800277e:	db08      	blt.n	8002792 <arm_convolve_HWC_asym_uint8+0x27c>
                    {
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8002780:	893b      	ldrh	r3, [r7, #8]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	461a      	mov	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800278c:	f008 fa7b 	bl	800ac86 <memset>
 8002790:	e014      	b.n	80027bc <arm_convolve_HWC_asym_uint8+0x2a6>
                    }
                    else
                    {
                    	arm_asym_uint8_to_int16_reordered_no_shift
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8002792:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002796:	897a      	ldrh	r2, [r7, #10]
 8002798:	fb03 f202 	mul.w	r2, r3, r2
 800279c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 80027a0:	4413      	add	r3, r2
 80027a2:	893a      	ldrh	r2, [r7, #8]
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	461a      	mov	r2, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1898      	adds	r0, r3, r2
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	f897 10a4 	ldrb.w	r1, [r7, #164]	@ 0xa4
 80027b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80027b8:	f002 fa96 	bl	8004ce8 <arm_asym_uint8_to_int16_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 80027bc:	893b      	ldrh	r3, [r7, #8]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80027c4:	4413      	add	r3, r2
 80027c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 80027ca:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3301      	adds	r3, #1
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80027d8:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 80027dc:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80027e0:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 80027e4:	fb03 f101 	mul.w	r1, r3, r1
 80027e8:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 80027ec:	1ac9      	subs	r1, r1, r3
 80027ee:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80027f2:	440b      	add	r3, r1
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dbba      	blt.n	800276e <arm_convolve_HWC_asym_uint8+0x258>
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80027f8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002806:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 800280a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 800280e:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 8002812:	fb03 f101 	mul.w	r1, r3, r1
 8002816:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 800281a:	1ac9      	subs	r1, r1, r3
 800281c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002820:	440b      	add	r3, r1
 8002822:	429a      	cmp	r2, r3
 8002824:	db94      	blt.n	8002750 <arm_convolve_HWC_asym_uint8+0x23a>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800283e:	4413      	add	r3, r2
 8002840:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002844:	429a      	cmp	r2, r3
 8002846:	d12e      	bne.n	80028a6 <arm_convolve_HWC_asym_uint8+0x390>
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8002848:	893a      	ldrh	r2, [r7, #8]
 800284a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800284e:	fb12 f303 	smulbb	r3, r2, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002858:	fb12 f303 	smulbb	r3, r2, r3
 800285c:	b29b      	uxth	r3, r3
 800285e:	f897 00a4 	ldrb.w	r0, [r7, #164]	@ 0xa4
 8002862:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8002866:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800286a:	9206      	str	r2, [sp, #24]
 800286c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002870:	9205      	str	r2, [sp, #20]
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8002878:	9303      	str	r3, [sp, #12]
 800287a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	4603      	mov	r3, r0
 800288e:	460a      	mov	r2, r1
 8002890:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f001 fa75 	bl	8003d84 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 800289a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 800289e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i_out_x = 0; i_out_x < left_padding; i_out_x++)
 80028a6:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80028b4:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	@ 0x94
 80028b8:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 80028bc:	429a      	cmp	r2, r3
 80028be:	f6ff af38 	blt.w	8002732 <arm_convolve_HWC_asym_uint8+0x21c>
            }
        }

        /* mid part */
        for (; i_out_x < dim_im_out - right_padding; i_out_x++)
 80028c2:	e097      	b.n	80029f4 <arm_convolve_HWC_asym_uint8+0x4de>
        {
            /* This part implements the im2col function */
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 80028c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80028c8:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 80028cc:	fb12 f303 	smulbb	r3, r2, r3
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80028e0:	e031      	b.n	8002946 <arm_convolve_HWC_asym_uint8+0x430>
            {
            	arm_asym_uint8_to_int16_reordered_no_shift(Im_in
                                                 +
                                                 (i_ker_y *
 80028e2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 80028e6:	897a      	ldrh	r2, [r7, #10]
 80028e8:	fb03 f202 	mul.w	r2, r3, r2
                                                  dim_im_in +
                                                  i_out_x *
 80028ec:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80028f0:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
                                                  dim_im_in +
 80028f8:	441a      	add	r2, r3
                                                  stride - top_padding) * ch_im_in, z_in, pBuffer, ch_im_in * dim_kernel);
 80028fa:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	893a      	ldrh	r2, [r7, #8]
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	461a      	mov	r2, r3
            	arm_asym_uint8_to_int16_reordered_no_shift(Im_in
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1898      	adds	r0, r3, r2
                                                  stride - top_padding) * ch_im_in, z_in, pBuffer, ch_im_in * dim_kernel);
 800290c:	893b      	ldrh	r3, [r7, #8]
 800290e:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002912:	fb02 f303 	mul.w	r3, r2, r3
            	arm_asym_uint8_to_int16_reordered_no_shift(Im_in
 8002916:	f897 10a4 	ldrb.w	r1, [r7, #164]	@ 0xa4
 800291a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800291e:	f002 f9e3 	bl	8004ce8 <arm_asym_uint8_to_int16_reordered_no_shift>
                pBuffer += ch_im_in * dim_kernel;
 8002922:	893b      	ldrh	r3, [r7, #8]
 8002924:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002932:	4413      	add	r3, r2
 8002934:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8002938:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 800293c:	b29b      	uxth	r3, r3
 800293e:	3301      	adds	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002946:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 800294a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 800294e:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 8002952:	fb03 f101 	mul.w	r1, r3, r1
 8002956:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 800295a:	1ac9      	subs	r1, r1, r3
 800295c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002960:	440b      	add	r3, r1
 8002962:	429a      	cmp	r2, r3
 8002964:	dbbd      	blt.n	80028e2 <arm_convolve_HWC_asym_uint8+0x3cc>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800297e:	4413      	add	r3, r2
 8002980:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002984:	429a      	cmp	r2, r3
 8002986:	d12e      	bne.n	80029e6 <arm_convolve_HWC_asym_uint8+0x4d0>
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8002988:	893a      	ldrh	r2, [r7, #8]
 800298a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800298e:	fb12 f303 	smulbb	r3, r2, r3
 8002992:	b29b      	uxth	r3, r3
 8002994:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002998:	fb12 f303 	smulbb	r3, r2, r3
 800299c:	b29b      	uxth	r3, r3
 800299e:	f897 00a4 	ldrb.w	r0, [r7, #164]	@ 0xa4
 80029a2:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 80029a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80029aa:	9206      	str	r2, [sp, #24]
 80029ac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029b0:	9205      	str	r2, [sp, #20]
 80029b2:	9304      	str	r3, [sp, #16]
 80029b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4603      	mov	r3, r0
 80029ce:	460a      	mov	r2, r1
 80029d0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f001 f9d5 	bl	8003d84 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 80029da:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 80029de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (; i_out_x < dim_im_out - right_padding; i_out_x++)
 80029e6:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80029f4:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	@ 0x94
 80029f8:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	@ 0xd8
 80029fc:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8002a00:	1acb      	subs	r3, r1, r3
 8002a02:	429a      	cmp	r2, r3
 8002a04:	f6ff af5e 	blt.w	80028c4 <arm_convolve_HWC_asym_uint8+0x3ae>
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out; i_out_x++)
 8002a08:	e0c0      	b.n	8002b8c <arm_convolve_HWC_asym_uint8+0x676>
        {
            /* This part implements the im2col function */
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8002a0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a0e:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002a12:	fb12 f303 	smulbb	r3, r2, r3
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002a26:	e05a      	b.n	8002ade <arm_convolve_HWC_asym_uint8+0x5c8>
            {
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8002a28:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002a2c:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002a30:	fb12 f303 	smulbb	r3, r2, r3
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8002a44:	e034      	b.n	8002ab0 <arm_convolve_HWC_asym_uint8+0x59a>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8002a46:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db04      	blt.n	8002a58 <arm_convolve_HWC_asym_uint8+0x542>
 8002a4e:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	db08      	blt.n	8002a6a <arm_convolve_HWC_asym_uint8+0x554>
                    {
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2100      	movs	r1, #0
 8002a60:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002a64:	f008 f90f 	bl	800ac86 <memset>
 8002a68:	e014      	b.n	8002a94 <arm_convolve_HWC_asym_uint8+0x57e>
                    }
                    else
                    {
                    	arm_asym_uint8_to_int16_reordered_no_shift
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8002a6a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002a6e:	897a      	ldrh	r2, [r7, #10]
 8002a70:	fb03 f202 	mul.w	r2, r3, r2
 8002a74:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002a78:	4413      	add	r3, r2
 8002a7a:	893a      	ldrh	r2, [r7, #8]
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	461a      	mov	r2, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1898      	adds	r0, r3, r2
 8002a86:	893b      	ldrh	r3, [r7, #8]
 8002a88:	f897 10a4 	ldrb.w	r1, [r7, #164]	@ 0xa4
 8002a8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002a90:	f002 f92a 	bl	8004ce8 <arm_asym_uint8_to_int16_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8002aa2:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8002ab0:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 8002ab4:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002ab8:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 8002abc:	fb03 f101 	mul.w	r1, r3, r1
 8002ac0:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8002ac4:	1ac9      	subs	r1, r1, r3
 8002ac6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002aca:	440b      	add	r3, r1
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dbba      	blt.n	8002a46 <arm_convolve_HWC_asym_uint8+0x530>
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8002ad0:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002ade:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 8002ae2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 8002ae6:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 8002aea:	fb03 f101 	mul.w	r1, r3, r1
 8002aee:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002af2:	1ac9      	subs	r1, r1, r3
 8002af4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002af8:	440b      	add	r3, r1
 8002afa:	429a      	cmp	r2, r3
 8002afc:	db94      	blt.n	8002a28 <arm_convolve_HWC_asym_uint8+0x512>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002afe:	893b      	ldrh	r3, [r7, #8]
 8002b00:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002b16:	4413      	add	r3, r2
 8002b18:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d12e      	bne.n	8002b7e <arm_convolve_HWC_asym_uint8+0x668>
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002b26:	fb12 f303 	smulbb	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002b30:	fb12 f303 	smulbb	r3, r2, r3
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f897 00a4 	ldrb.w	r0, [r7, #164]	@ 0xa4
 8002b3a:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8002b3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002b42:	9206      	str	r2, [sp, #24]
 8002b44:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b48:	9205      	str	r2, [sp, #20]
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8002b50:	9303      	str	r3, [sp, #12]
 8002b52:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	460a      	mov	r2, r1
 8002b68:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f001 f909 	bl	8003d84 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 8002b72:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8002b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (; i_out_x < dim_im_out; i_out_x++)
 8002b7e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002b8c:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	@ 0x94
 8002b90:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f6ff af38 	blt.w	8002a0a <arm_convolve_HWC_asym_uint8+0x4f4>
    for (; i_out_y < dim_im_out - bottom_padding; i_out_y++)
 8002b9a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8002ba8:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 8002bac:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	@ 0xd8
 8002bb0:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002bb4:	1acb      	subs	r3, r1, r3
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	f6ff adb7 	blt.w	800272a <arm_convolve_HWC_asym_uint8+0x214>
            }
        }
    }

    for (; i_out_y < dim_im_out; i_out_y++)
 8002bbc:	e0db      	b.n	8002d76 <arm_convolve_HWC_asym_uint8+0x860>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002bc4:	e0c9      	b.n	8002d5a <arm_convolve_HWC_asym_uint8+0x844>
        {
            /* This part implements the im2col function */
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8002bc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002bca:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002bce:	fb12 f303 	smulbb	r3, r2, r3
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002be2:	e063      	b.n	8002cac <arm_convolve_HWC_asym_uint8+0x796>
            {
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8002be4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002be8:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002bec:	fb12 f303 	smulbb	r3, r2, r3
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8002c00:	e03d      	b.n	8002c7e <arm_convolve_HWC_asym_uint8+0x768>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8002c02:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0d      	blt.n	8002c26 <arm_convolve_HWC_asym_uint8+0x710>
 8002c0a:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	da08      	bge.n	8002c26 <arm_convolve_HWC_asym_uint8+0x710>
 8002c14:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db04      	blt.n	8002c26 <arm_convolve_HWC_asym_uint8+0x710>
 8002c1c:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 8002c20:	897b      	ldrh	r3, [r7, #10]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	db08      	blt.n	8002c38 <arm_convolve_HWC_asym_uint8+0x722>
                    {
                        memset(pBuffer, 0, sizeof(int16_t)*ch_im_in);
 8002c26:	893b      	ldrh	r3, [r7, #8]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002c32:	f008 f828 	bl	800ac86 <memset>
 8002c36:	e014      	b.n	8002c62 <arm_convolve_HWC_asym_uint8+0x74c>
                    }
                    else
                    {
                    	arm_asym_uint8_to_int16_reordered_no_shift
                            (Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, z_in, pBuffer, ch_im_in);
 8002c38:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002c3c:	897a      	ldrh	r2, [r7, #10]
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002c46:	4413      	add	r3, r2
 8002c48:	893a      	ldrh	r2, [r7, #8]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	461a      	mov	r2, r3
                    	arm_asym_uint8_to_int16_reordered_no_shift
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1898      	adds	r0, r3, r2
 8002c54:	893b      	ldrh	r3, [r7, #8]
 8002c56:	f897 10a4 	ldrb.w	r1, [r7, #164]	@ 0xa4
 8002c5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c5e:	f002 f843 	bl	8004ce8 <arm_asym_uint8_to_int16_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8002c62:	893b      	ldrh	r3, [r7, #8]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        		for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8002c70:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8002c7e:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	@ 0x90
 8002c82:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002c86:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 8002c8a:	fb03 f101 	mul.w	r1, r3, r1
 8002c8e:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8002c92:	1ac9      	subs	r1, r1, r3
 8002c94:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002c98:	440b      	add	r3, r1
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dbb1      	blt.n	8002c02 <arm_convolve_HWC_asym_uint8+0x6ec>
        	for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8002c9e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002cac:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	@ 0x92
 8002cb0:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 8002cb4:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 8002cb8:	fb03 f101 	mul.w	r1, r3, r1
 8002cbc:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8002cc0:	1ac9      	subs	r1, r1, r3
 8002cc2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002cc6:	440b      	add	r3, r1
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	db8b      	blt.n	8002be4 <arm_convolve_HWC_asym_uint8+0x6ce>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d12e      	bne.n	8002d4c <arm_convolve_HWC_asym_uint8+0x836>
            {
                pOut =
                    arm_nn_mat_mult_kernel_asym_uint8_int16_reordered(wt,
 8002cee:	893a      	ldrh	r2, [r7, #8]
 8002cf0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002cf4:	fb12 f303 	smulbb	r3, r2, r3
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002cfe:	fb12 f303 	smulbb	r3, r2, r3
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f897 00a4 	ldrb.w	r0, [r7, #164]	@ 0xa4
 8002d08:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8002d0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002d10:	9206      	str	r2, [sp, #24]
 8002d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d16:	9205      	str	r2, [sp, #20]
 8002d18:	9304      	str	r3, [sp, #16]
 8002d1a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8002d1e:	9303      	str	r3, [sp, #12]
 8002d20:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	4603      	mov	r3, r0
 8002d34:	460a      	mov	r2, r1
 8002d36:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f001 f822 	bl	8003d84 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>
 8002d40:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8002d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002d4c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d5a:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	@ 0x94
 8002d5e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f6ff af2f 	blt.w	8002bc6 <arm_convolve_HWC_asym_uint8+0x6b0>
    for (; i_out_y < dim_im_out; i_out_y++)
 8002d68:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8002d76:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 8002d7a:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	f6ff af1d 	blt.w	8002bbe <arm_convolve_HWC_asym_uint8+0x6a8>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8002d84:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f000 80e0 	beq.w	8002f52 <arm_convolve_HWC_asym_uint8+0xa3c>
    {
        const uint8_t *pA = wt;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        int       i;

		 int16_t v_za[2] __attribute__((aligned(4))) = {z_wt,z_wt};
 8002d98:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002da0:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8002da4:	b21b      	sxth	r3, r3
 8002da6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		 const int32_t *v_za_ptr = (int32_t *) v_za;
 8002da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dac:	623b      	str	r3, [r7, #32]
		 int32_t 		inzA = *__SIMD32(v_za_ptr);
 8002dae:	f107 0320 	add.w	r3, r7, #32
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	677b      	str	r3, [r7, #116]	@ 0x74

        for (i = 0; i < ch_im_out; i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dbe:	e0c1      	b.n	8002f44 <arm_convolve_HWC_asym_uint8+0xa2e>
        {
        	int32_t sum = bias[i];
 8002dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
        	int16_t *pB = bufferA;
 8002dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dd4:	61fb      	str	r3, [r7, #28]

            /* each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 8002dd6:	893b      	ldrh	r3, [r7, #8]
 8002dd8:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	109b      	asrs	r3, r3, #2
 8002dea:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

            while (colCnt)
 8002dee:	e053      	b.n	8002e98 <arm_convolve_HWC_asym_uint8+0x982>
            {

            	int32_t inA1, inA2;
            	int32_t inB1, inB2;

                pA = (uint8_t *) read_and_pad_reordered_uint8((void *)pA, &inA1, &inA2);
 8002df0:	f107 0214 	add.w	r2, r7, #20
 8002df4:	f107 0318 	add.w	r3, r7, #24
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002dfe:	f7ff fb3c 	bl	800247a <read_and_pad_reordered_uint8>
 8002e02:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

                inB1 = *__SIMD32(pB)++;
 8002e06:	f107 021c 	add.w	r2, r7, #28
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	1d19      	adds	r1, r3, #4
 8002e0e:	6011      	str	r1, [r2, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	667b      	str	r3, [r7, #100]	@ 0x64
				inA1 = __SSUB16(inA1, inzA);
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	461a      	mov	r2, r3
 8002e18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e22:	fad3 f302 	ssub16	r3, r3, r2
 8002e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	61bb      	str	r3, [r7, #24]
				inA2 = __SSUB16(inA2, inzA);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e34:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e3a:	fad3 f302 	ssub16	r3, r3, r2
 8002e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	617b      	str	r3, [r7, #20]
                sum = __SMLAD(inA1, inB1, sum);
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e4c:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8002e4e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002e50:	647b      	str	r3, [r7, #68]	@ 0x44

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e58:	fb23 1302 	smlad	r3, r3, r2, r1
 8002e5c:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e60:	67fb      	str	r3, [r7, #124]	@ 0x7c
                inB2 = *__SIMD32(pB)++;
 8002e62:	f107 021c 	add.w	r2, r7, #28
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	1d19      	adds	r1, r3, #4
 8002e6a:	6011      	str	r1, [r2, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	663b      	str	r3, [r7, #96]	@ 0x60
                sum = __SMLAD(inA2, inB2, sum);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	4619      	mov	r1, r3
 8002e74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e78:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002e7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e7c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e84:	fb23 1302 	smlad	r3, r3, r2, r1
 8002e88:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8002e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c

                colCnt--;
 8002e8e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
            while (colCnt)
 8002e98:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1a7      	bne.n	8002df0 <arm_convolve_HWC_asym_uint8+0x8da>
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 8002ea0:	893a      	ldrh	r2, [r7, #8]
 8002ea2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002ea6:	fb12 f303 	smulbb	r3, r2, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8002eb0:	fb12 f303 	smulbb	r3, r2, r3
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
            while (colCnt)
 8002ebe:	e01b      	b.n	8002ef8 <arm_convolve_HWC_asym_uint8+0x9e2>
            {
            	int16_t inA1 = (int16_t)*pA++;
 8002ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
            	int16_t inB1 = *pB++;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	1c9a      	adds	r2, r3, #2
 8002ed4:	61fa      	str	r2, [r7, #28]
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

                sum += inA1 * inB1;
 8002edc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8002ee0:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	@ 0x68
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002eea:	4413      	add	r3, r2
 8002eec:	67fb      	str	r3, [r7, #124]	@ 0x7c

                colCnt--;
 8002eee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
            while (colCnt)
 8002ef8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1df      	bne.n	8002ec0 <arm_convolve_HWC_asym_uint8+0x9aa>
            }

    		sum = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8002f00:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002f04:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002f06:	f7ff faf0 	bl	80024ea <__HI_SMULL>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8002f10:	411a      	asrs	r2, r3
 8002f12:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002f16:	4413      	add	r3, r2
 8002f18:	67fb      	str	r3, [r7, #124]	@ 0x7c

            *pOut = (uint8_t) __USAT(sum , 8);
 8002f1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f20:	f383 0308 	usat	r3, #8, r3
 8002f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f2e:	701a      	strb	r2, [r3, #0]
            pOut++;
 8002f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f34:	3301      	adds	r3, #1
 8002f36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (i = 0; i < ch_im_out; i++)
 8002f3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f44:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8002f48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f6ff af37 	blt.w	8002dc0 <arm_convolve_HWC_asym_uint8+0x8aa>
	#error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3798      	adds	r7, #152	@ 0x98
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <__HI_SMULL>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  int hi = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  int lo = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	fb81 2300 	smull	r2, r3, r1, r0
 8002f76:	60ba      	str	r2, [r7, #8]
 8002f78:	60fb      	str	r3, [r7, #12]
  return hi;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <arm_depthwise_separable_conv_HWC_asym_uint8>:
											   const int32_t * bias,
											   uint8_t * Im_out,
											   const uint16_t dim_im_out,
											   int16_t * bufferA,
											   uint8_t * bufferB)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b0f1      	sub	sp, #452	@ 0x1c4
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	f507 74e0 	add.w	r4, r7, #448	@ 0x1c0
 8002f92:	f5a4 74da 	sub.w	r4, r4, #436	@ 0x1b4
 8002f96:	6020      	str	r0, [r4, #0]
 8002f98:	4608      	mov	r0, r1
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8002fa0:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002faa:	f5a3 73db 	sub.w	r3, r3, #438	@ 0x1b6
 8002fae:	4602      	mov	r2, r0
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fb6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fba:	460a      	mov	r2, r1
 8002fbc:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    int16_t   i_out_y, i_out_x;
    int16_t   i_ker_y, i_ker_x;
    uint8_t    *colBuffer = (uint8_t *) bufferA;
 8002fbe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002fc2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    uint8_t    *pBuffer = colBuffer;
 8002fc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002fca:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    const int32_t *pBias = bias;
 8002fce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fd2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    uint8_t   *pOut = Im_out;
 8002fd6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002fda:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    uint16_t  rowCnt;
    uint16_t  row_shift;

    int16_t Vz_wt[2] = {z_wt,z_wt};
 8002fde:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 8002fe2:	b21a      	sxth	r2, r3
 8002fe4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fe8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 8002ff2:	b21a      	sxth	r2, r3
 8002ff4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ff8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ffc:	805a      	strh	r2, [r3, #2]
	const int32_t *pz_wt = (int32_t *)Vz_wt;
 8002ffe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003002:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003006:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800300a:	601a      	str	r2, [r3, #0]
	int32_t inz_wt = *__SIMD32(pz_wt);
 800300c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c

	int16_t Vz_in[2] = {z_in,z_in};
 8003018:	f897 31d4 	ldrb.w	r3, [r7, #468]	@ 0x1d4
 800301c:	b21a      	sxth	r2, r3
 800301e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003022:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003026:	801a      	strh	r2, [r3, #0]
 8003028:	f897 31d4 	ldrb.w	r3, [r7, #468]	@ 0x1d4
 800302c:	b21a      	sxth	r2, r3
 800302e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003032:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003036:	805a      	strh	r2, [r3, #2]
	const int32_t *pz_in = (int32_t *) Vz_in;
 8003038:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800303c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003040:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003044:	601a      	str	r2, [r3, #0]
	int32_t inz_in = *__SIMD32(pz_in);
 8003046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8003052:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003056:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	f8b7 31e4 	ldrh.w	r3, [r7, #484]	@ 0x1e4
 8003060:	429a      	cmp	r2, r3
 8003062:	d003      	beq.n	800306c <arm_depthwise_separable_conv_HWC_asym_uint8+0xe4>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8003064:	f06f 0302 	mvn.w	r3, #2
 8003068:	f000 be39 	b.w	8003cde <arm_depthwise_separable_conv_HWC_asym_uint8+0xd56>
    }

    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 800306c:	2300      	movs	r3, #0
 800306e:	f8a7 31be 	strh.w	r3, [r7, #446]	@ 0x1be
 8003072:	f000 be2c 	b.w	8003cce <arm_depthwise_separable_conv_HWC_asym_uint8+0xd46>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8003076:	2300      	movs	r3, #0
 8003078:	f8a7 31bc 	strh.w	r3, [r7, #444]	@ 0x1bc
 800307c:	f000 be19 	b.w	8003cb2 <arm_depthwise_separable_conv_HWC_asym_uint8+0xd2a>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8003080:	f8b7 31be 	ldrh.w	r3, [r7, #446]	@ 0x1be
 8003084:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	@ 0x1fc
 8003088:	fb12 f303 	smulbb	r3, r2, r3
 800308c:	b29a      	uxth	r2, r3
 800308e:	f897 31f4 	ldrb.w	r3, [r7, #500]	@ 0x1f4
 8003092:	b29b      	uxth	r3, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	b29b      	uxth	r3, r3
 8003098:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 800309c:	e080      	b.n	80031a0 <arm_depthwise_separable_conv_HWC_asym_uint8+0x218>
            {
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 800309e:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	@ 0x1bc
 80030a2:	f8b7 21fc 	ldrh.w	r2, [r7, #508]	@ 0x1fc
 80030a6:	fb12 f303 	smulbb	r3, r2, r3
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f8a7 31b8 	strh.w	r3, [r7, #440]	@ 0x1b8
 80030ba:	e05a      	b.n	8003172 <arm_depthwise_separable_conv_HWC_asym_uint8+0x1ea>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80030bc:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	db15      	blt.n	80030f0 <arm_depthwise_separable_conv_HWC_asym_uint8+0x168>
 80030c4:	f9b7 21ba 	ldrsh.w	r2, [r7, #442]	@ 0x1ba
 80030c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030cc:	f5a3 73db 	sub.w	r3, r3, #438	@ 0x1b6
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	da0c      	bge.n	80030f0 <arm_depthwise_separable_conv_HWC_asym_uint8+0x168>
 80030d6:	f9b7 31b8 	ldrsh.w	r3, [r7, #440]	@ 0x1b8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db08      	blt.n	80030f0 <arm_depthwise_separable_conv_HWC_asym_uint8+0x168>
 80030de:	f9b7 21b8 	ldrsh.w	r2, [r7, #440]	@ 0x1b8
 80030e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030e6:	f5a3 73db 	sub.w	r3, r3, #438	@ 0x1b6
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	db0b      	blt.n	8003108 <arm_depthwise_separable_conv_HWC_asym_uint8+0x180>
                    {
                        memset(pBuffer, 0, ch_im_in);
 80030f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030f4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	2100      	movs	r1, #0
 80030fe:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8003102:	f007 fdc0 	bl	800ac86 <memset>
 8003106:	e023      	b.n	8003150 <arm_depthwise_separable_conv_HWC_asym_uint8+0x1c8>

                    } else
                    {
                        memcpy(pBuffer, Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
 8003108:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 800310c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003110:	f5a2 72db 	sub.w	r2, r2, #438	@ 0x1b6
 8003114:	8812      	ldrh	r2, [r2, #0]
 8003116:	fb03 f202 	mul.w	r2, r3, r2
 800311a:	f9b7 31b8 	ldrsh.w	r3, [r7, #440]	@ 0x1b8
 800311e:	4413      	add	r3, r2
 8003120:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003124:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	461a      	mov	r2, r3
 8003130:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003134:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1899      	adds	r1, r3, r2
 800313c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003140:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 800314c:	f007 fe17 	bl	800ad7e <memcpy>
                    }
                    pBuffer += ch_im_in;
 8003150:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003154:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800315e:	4413      	add	r3, r2
 8003160:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                for (i_ker_x = i_out_x * stride - left_padding; i_ker_x < i_out_x * stride - left_padding + dim_kernel; i_ker_x++)
 8003164:	f9b7 31b8 	ldrsh.w	r3, [r7, #440]	@ 0x1b8
 8003168:	b29b      	uxth	r3, r3
 800316a:	3301      	adds	r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	f8a7 31b8 	strh.w	r3, [r7, #440]	@ 0x1b8
 8003172:	f9b7 21b8 	ldrsh.w	r2, [r7, #440]	@ 0x1b8
 8003176:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	@ 0x1bc
 800317a:	f8b7 11fc 	ldrh.w	r1, [r7, #508]	@ 0x1fc
 800317e:	fb03 f101 	mul.w	r1, r3, r1
 8003182:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 8003186:	1ac9      	subs	r1, r1, r3
 8003188:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 800318c:	440b      	add	r3, r1
 800318e:	429a      	cmp	r2, r3
 8003190:	db94      	blt.n	80030bc <arm_depthwise_separable_conv_HWC_asym_uint8+0x134>
            for (i_ker_y = i_out_y * stride - top_padding; i_ker_y < i_out_y * stride - top_padding + dim_kernel; i_ker_y++)
 8003192:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8003196:	b29b      	uxth	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	b29b      	uxth	r3, r3
 800319c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 80031a0:	f9b7 21ba 	ldrsh.w	r2, [r7, #442]	@ 0x1ba
 80031a4:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	@ 0x1be
 80031a8:	f8b7 11fc 	ldrh.w	r1, [r7, #508]	@ 0x1fc
 80031ac:	fb03 f101 	mul.w	r1, r3, r1
 80031b0:	f897 31f4 	ldrb.w	r3, [r7, #500]	@ 0x1f4
 80031b4:	1ac9      	subs	r1, r1, r3
 80031b6:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 80031ba:	440b      	add	r3, r1
 80031bc:	429a      	cmp	r2, r3
 80031be:	f6ff af6e 	blt.w	800309e <arm_depthwise_separable_conv_HWC_asym_uint8+0x116>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 80031c2:	f8b7 31e4 	ldrh.w	r3, [r7, #484]	@ 0x1e4
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	f8a7 31aa 	strh.w	r3, [r7, #426]	@ 0x1aa
            row_shift = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8
            pBias = bias;
 80031d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

            while (rowCnt)
 80031da:	f000 bce0 	b.w	8003b9e <arm_depthwise_separable_conv_HWC_asym_uint8+0xc16>
            {
            	int32_t     sum =  (q31_t)(*pBias++);
 80031de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
            	int32_t     sum2 = (q31_t)(*pBias++);
 80031ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80031f2:	1d1a      	adds	r2, r3, #4
 80031f4:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
            	int32_t     sum3 = (q31_t)(*pBias++);
 80031fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
            	int32_t     sum4 = (q31_t)(*pBias++);
 800320e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003212:	1d1a      	adds	r2, r3, #4
 8003214:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                uint16_t    colCnt = (dim_kernel * dim_kernel) >> 1;
 800321e:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8003222:	f8b7 21e8 	ldrh.w	r2, [r7, #488]	@ 0x1e8
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	105b      	asrs	r3, r3, #1
 800322c:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
                uint8_t     *pB = colBuffer + row_shift;
 8003230:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8003234:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8003238:	441a      	add	r2, r3
 800323a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800323e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003242:	601a      	str	r2, [r3, #0]
                const uint8_t *pA = wt + row_shift;
 8003244:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8003248:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800324c:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	441a      	add	r2, r3
 8003254:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003258:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800325c:	601a      	str	r2, [r3, #0]
                row_shift += 4;
 800325e:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8003262:	3304      	adds	r3, #4
 8003264:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 8003268:	e34d      	b.n	8003906 <arm_depthwise_separable_conv_HWC_asym_uint8+0x97e>
                {
                    q31_t     inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = *__SIMD32(pB);
 800326a:	f107 0320 	add.w	r3, r7, #32
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                    pB += ch_im_in;
 8003276:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800327a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003284:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	441a      	add	r2, r3
 800328c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003290:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003294:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pB);
 8003296:	f107 0320 	add.w	r3, r7, #32
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
                    pB += ch_im_in;
 80032a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032a6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032b0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	441a      	add	r2, r3
 80032b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032bc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80032c0:	601a      	str	r2, [r3, #0]
                    inB2 = __PKHTB(opB, inB1, 16);
 80032c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80032c6:	4bb9      	ldr	r3, [pc, #740]	@ (80035ac <arm_depthwise_separable_conv_HWC_asym_uint8+0x624>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80032ce:	0c12      	lsrs	r2, r2, #16
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                    inB1 = __PKHBT(inB1, opB, 16);
 80032d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                    inA1 = *__SIMD32(pA);
 80032e8:	f107 031c 	add.w	r3, r7, #28
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    pA += ch_im_in;
 80032f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032f8:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003302:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	441a      	add	r2, r3
 800330a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800330e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8003312:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pA);
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
                    pA += ch_im_in;
 8003320:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003324:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800332e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	441a      	add	r2, r3
 8003336:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800333a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800333e:	601a      	str	r2, [r3, #0]
                    inA2 = __PKHTB(opB, inA1, 16);
 8003340:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003344:	4b99      	ldr	r3, [pc, #612]	@ (80035ac <arm_depthwise_separable_conv_HWC_asym_uint8+0x624>)
 8003346:	4013      	ands	r3, r2
 8003348:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800334c:	0c12      	lsrs	r2, r2, #16
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                    inA1 = __PKHBT(inA1, opB, 16);
 8003354:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003358:	b29a      	uxth	r2, r3
 800335a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

                    //sum
                    opA = __UXTB16(inA1);
 8003366:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800336a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800336e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003372:	601a      	str	r2, [r3, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003374:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003378:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	fa3f f283 	uxtb16	r2, r3
 8003382:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003386:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800338a:	601a      	str	r2, [r3, #0]
  return(result);
 800338c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003390:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    opB = __UXTB16(inB1);
 800339a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800339e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033a2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80033a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80033a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033ac:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa3f f283 	uxtb16	r2, r3
 80033b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033ba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80033be:	601a      	str	r2, [r3, #0]
  return(result);
 80033c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

                    opA = __SSUB16(opA, inz_wt);
 80033ce:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80033d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80033d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033da:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80033de:	6019      	str	r1, [r3, #0]
 80033e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033e4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80033e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80033ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033ee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80033f8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	fad3 f202 	ssub16	r2, r3, r2
 8003402:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003406:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800340a:	601a      	str	r2, [r3, #0]
  return(result);
 800340c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003410:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    opB = __SSUB16(opB, inz_in);
 800341a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800341e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003422:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003426:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800342a:	6019      	str	r1, [r3, #0]
 800342c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003430:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003436:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800343a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003444:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	fad3 f202 	ssub16	r2, r3, r2
 800344e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003452:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003456:	601a      	str	r2, [r3, #0]
  return(result);
 8003458:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800345c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
                    sum = __SMLAD(opA, opB, sum);
 8003466:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800346a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800346e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003472:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003476:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800347a:	6018      	str	r0, [r3, #0]
 800347c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003480:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003484:	6019      	str	r1, [r3, #0]
 8003486:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800348a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800348e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003490:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003494:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800349e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80034a8:	f5a1 71b0 	sub.w	r1, r1, #352	@ 0x160
 80034ac:	6809      	ldr	r1, [r1, #0]
 80034ae:	fb23 1202 	smlad	r2, r3, r2, r1
 80034b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034b6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034ba:	601a      	str	r2, [r3, #0]
  return(result);
 80034bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                    //sum2
                    opA = __UXTB16(__ROR(inA1, 8));
 80034ca:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80034ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034d2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034dc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80034e0:	2208      	movs	r2, #8
 80034e2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80034e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034e8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80034ec:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80034f0:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	f002 021f 	and.w	r2, r2, #31
 80034fa:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80034fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003500:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <arm_depthwise_separable_conv_HWC_asym_uint8+0x58e>
    return op1;
 800350a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800350e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e00b      	b.n	800352e <arm_depthwise_separable_conv_HWC_asym_uint8+0x5a6>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003516:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800351a:	f5a3 72a8 	sub.w	r2, r3, #336	@ 0x150
 800351e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003522:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa62 f303 	ror.w	r3, r2, r3
 800352e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003532:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003536:	6013      	str	r3, [r2, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003538:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800353c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa3f f283 	uxtb16	r2, r3
 8003546:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800354a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800354e:	601a      	str	r2, [r3, #0]
  return(result);
 8003550:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003554:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    opB = __UXTB16(__ROR(inB1, 8));
 800355e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003562:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003566:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003570:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003574:	2208      	movs	r2, #8
 8003576:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8003578:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800357c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003580:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003584:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	f002 021f 	and.w	r2, r2, #31
 800358e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8003590:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003594:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <arm_depthwise_separable_conv_HWC_asym_uint8+0x628>
    return op1;
 800359e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	e00e      	b.n	80035c8 <arm_depthwise_separable_conv_HWC_asym_uint8+0x640>
 80035aa:	bf00      	nop
 80035ac:	ffff0000 	.word	0xffff0000
  return (op1 >> op2) | (op1 << (32U - op2));
 80035b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035b4:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80035b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035bc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fa62 f303 	ror.w	r3, r2, r3
 80035c8:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80035cc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80035d0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80035d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa3f f283 	uxtb16	r2, r3
 80035e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80035e8:	601a      	str	r2, [r3, #0]
  return(result);
 80035ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

                    opA = __SSUB16(opA, inz_wt);
 80035f8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80035fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003600:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003604:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003608:	6019      	str	r1, [r3, #0]
 800360a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800360e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003612:	601a      	str	r2, [r3, #0]
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003614:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003618:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003622:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	fad3 f202 	ssub16	r2, r3, r2
 800362c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003630:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003634:	601a      	str	r2, [r3, #0]
  return(result);
 8003636:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800363a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
					opB = __SSUB16(opB, inz_in);
 8003644:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003648:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800364c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003650:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003654:	6019      	str	r1, [r3, #0]
 8003656:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800365a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800365e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003660:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003664:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800366e:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	fad3 f202 	ssub16	r2, r3, r2
 8003678:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800367c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003680:	601a      	str	r2, [r3, #0]
  return(result);
 8003682:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003686:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
                    sum2 = __SMLAD(opA, opB, sum2);
 8003690:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8003694:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003698:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800369c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80036a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036a4:	6018      	str	r0, [r3, #0]
 80036a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80036aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036ae:	6019      	str	r1, [r3, #0]
 80036b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80036b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80036ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80036be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80036c8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80036d2:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 80036d6:	6809      	ldr	r1, [r1, #0]
 80036d8:	fb23 1202 	smlad	r2, r3, r2, r1
 80036dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80036e0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036e4:	601a      	str	r2, [r3, #0]
  return(result);
 80036e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80036ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                    //sum3
                    opA = __UXTB16(inA2);
 80036f4:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80036f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80036fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003700:	601a      	str	r2, [r3, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003702:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa3f f283 	uxtb16	r2, r3
 8003710:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003714:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003718:	601a      	str	r2, [r3, #0]
  return(result);
 800371a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800371e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    opB = __UXTB16(inB2);
 8003728:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800372c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003730:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003736:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800373a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa3f f283 	uxtb16	r2, r3
 8003744:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800374c:	601a      	str	r2, [r3, #0]
  return(result);
 800374e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

                    opA = __SSUB16(opA, inz_wt);
 800375c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003760:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003764:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003768:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800376c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003770:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003774:	fad3 f302 	ssub16	r3, r3, r2
 8003778:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  return(result);
 800377c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003780:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
					opB = __SSUB16(opB, inz_in);
 8003784:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003788:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800378c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003790:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003798:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800379c:	fad3 f302 	ssub16	r3, r3, r2
 80037a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  return(result);
 80037a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80037a8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
                    sum3 = __SMLAD(opA, opB, sum3);
 80037ac:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80037b0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80037b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80037b8:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 80037bc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80037c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80037c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80037cc:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80037d0:	fb23 1302 	smlad	r3, r3, r2, r1
 80037d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  return(result);
 80037d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037dc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

                    //sum4
                    opA = __UXTB16(__ROR(inA2, 8));
 80037e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037e8:	2308      	movs	r3, #8
 80037ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  op2 %= 32U;
 80037ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  if (op2 == 0U)
 80037fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <arm_depthwise_separable_conv_HWC_asym_uint8+0x880>
    return op1;
 8003802:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003806:	e005      	b.n	8003814 <arm_depthwise_separable_conv_HWC_asym_uint8+0x88c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003808:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800380c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003810:	fa62 f303 	ror.w	r3, r2, r3
 8003814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003818:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800381c:	fa3f f383 	uxtb16	r3, r3
 8003820:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  return(result);
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    opB = __UXTB16(__ROR(inB2, 8));
 800382c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003830:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003834:	2308      	movs	r3, #8
 8003836:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  op2 %= 32U;
 800383a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  if (op2 == 0U)
 8003846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <arm_depthwise_separable_conv_HWC_asym_uint8+0x8cc>
    return op1;
 800384e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003852:	e005      	b.n	8003860 <arm_depthwise_separable_conv_HWC_asym_uint8+0x8d8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003854:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385c:	fa62 f303 	ror.w	r3, r2, r3
 8003860:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003864:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003868:	fa3f f383 	uxtb16	r3, r3
 800386c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  return(result);
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

                    opA = __SSUB16(opA, inz_wt);
 8003878:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800387c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003880:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8003884:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003890:	fad3 f302 	ssub16	r3, r3, r2
 8003894:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return(result);
 8003898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800389c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
					opB = __SSUB16(opB, inz_in);
 80038a0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80038a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80038a8:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80038ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80038b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80038b8:	fad3 f302 	ssub16	r3, r3, r2
 80038bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  return(result);
 80038c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80038c4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
                    sum4 = __SMLAD(opA, opB, sum4);
 80038c8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80038cc:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80038d0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80038d4:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80038d8:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80038dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80038e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80038e4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80038e8:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80038ec:	fb23 1302 	smlad	r3, r3, r2, r1
 80038f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  return(result);
 80038f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80038f8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
                    colCnt--;
 80038fc:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 8003900:	3b01      	subs	r3, #1
 8003902:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
                while (colCnt)
 8003906:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 800390a:	2b00      	cmp	r3, #0
 800390c:	f47f acad 	bne.w	800326a <arm_depthwise_separable_conv_HWC_asym_uint8+0x2e2>
                    colCnt--;
                }

#endif                          /* ARM_MATH_BIG_ENDIAN */

                colCnt = (dim_kernel * dim_kernel) & 0x1;
 8003910:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8003914:	fb13 f303 	smulbb	r3, r3, r3
 8003918:	b29b      	uxth	r3, r3
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
                while (colCnt)
 8003922:	e0aa      	b.n	8003a7a <arm_depthwise_separable_conv_HWC_asym_uint8+0xaf2>
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003930:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003934:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 8003936:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800393a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003944:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	441a      	add	r2, r3
 800394c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003950:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8003954:	601a      	str	r2, [r3, #0]
                    inB.word = *__SIMD32(pB);
 8003956:	f107 0320 	add.w	r3, r7, #32
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003962:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003966:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 8003968:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800396c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003976:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	441a      	add	r2, r3
 800397e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003982:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003986:	601a      	str	r2, [r3, #0]

                    sum  += (((uint8_t) inA.bytes[0])-z_wt) * (((uint8_t) inB.bytes[0])-z_in);
 8003988:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800398c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003990:	f993 3000 	ldrsb.w	r3, [r3]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80039a2:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80039a6:	f992 2000 	ldrsb.w	r2, [r2]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	4611      	mov	r1, r2
 80039ae:	f897 21d4 	ldrb.w	r2, [r7, #468]	@ 0x1d4
 80039b2:	1a8a      	subs	r2, r1, r2
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80039bc:	4413      	add	r3, r2
 80039be:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
                    sum2 += (((uint8_t) inA.bytes[1])-z_wt) * (((uint8_t) inB.bytes[1])-z_in);
 80039c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80039c6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80039ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80039dc:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80039e0:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	4611      	mov	r1, r2
 80039e8:	f897 21d4 	ldrb.w	r2, [r7, #468]	@ 0x1d4
 80039ec:	1a8a      	subs	r2, r1, r2
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80039f6:	4413      	add	r3, r2
 80039f8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
                    sum3 += (((uint8_t) inA.bytes[2])-z_wt) * (((uint8_t) inB.bytes[2])-z_in);
 80039fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003a00:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003a04:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003a16:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8003a1a:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	4611      	mov	r1, r2
 8003a22:	f897 21d4 	ldrb.w	r2, [r7, #468]	@ 0x1d4
 8003a26:	1a8a      	subs	r2, r1, r2
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003a30:	4413      	add	r3, r2
 8003a32:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                    sum4 += (((uint8_t) inA.bytes[3])-z_wt) * (((uint8_t) inB.bytes[3])-z_in);
 8003a36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003a3a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003a3e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003a50:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8003a54:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	f897 21d4 	ldrb.w	r2, [r7, #468]	@ 0x1d4
 8003a60:	1a8a      	subs	r2, r1, r2
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
                    colCnt--;
 8003a70:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 8003a74:	3b01      	subs	r3, #1
 8003a76:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
                while (colCnt)
 8003a7a:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f47f af50 	bne.w	8003924 <arm_depthwise_separable_conv_HWC_asym_uint8+0x99c>
                }

        		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8003a84:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8003a88:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8003a8c:	f7ff fa66 	bl	8002f5c <__HI_SMULL>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 8003a96:	411a      	asrs	r2, r3
 8003a98:	f897 31d8 	ldrb.w	r3, [r7, #472]	@ 0x1d8
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
        		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 8003aa2:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8003aa6:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8003aaa:	f7ff fa57 	bl	8002f5c <__HI_SMULL>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 8003ab4:	411a      	asrs	r2, r3
 8003ab6:	f897 31d8 	ldrb.w	r3, [r7, #472]	@ 0x1d8
 8003aba:	4413      	add	r3, r2
 8003abc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
        		sum3 = ((__HI_SMULL(sum3,m_zero)) >> n_zero) + z_out;
 8003ac0:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8003ac4:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8003ac8:	f7ff fa48 	bl	8002f5c <__HI_SMULL>
 8003acc:	4602      	mov	r2, r0
 8003ace:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 8003ad2:	411a      	asrs	r2, r3
 8003ad4:	f897 31d8 	ldrb.w	r3, [r7, #472]	@ 0x1d8
 8003ad8:	4413      	add	r3, r2
 8003ada:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
        		sum4 = ((__HI_SMULL(sum4,m_zero)) >> n_zero) + z_out;
 8003ade:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8003ae2:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8003ae6:	f7ff fa39 	bl	8002f5c <__HI_SMULL>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 8003af0:	411a      	asrs	r2, r3
 8003af2:	f897 31d8 	ldrb.w	r3, [r7, #472]	@ 0x1d8
 8003af6:	4413      	add	r3, r2
 8003af8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                *pOut++ = (uint8_t) __USAT(sum, 8);
 8003afc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003b00:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8003b04:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003b08:	f383 0308 	usat	r3, #8, r3
 8003b0c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8003b10:	f8d7 1164 	ldr.w	r1, [r7, #356]	@ 0x164
 8003b14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003b1e:	b2ca      	uxtb	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]
                *pOut++ = (uint8_t) __USAT(sum2, 8);
 8003b22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003b26:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003b2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003b2e:	f383 0308 	usat	r3, #8, r3
 8003b32:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003b36:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 8003b3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003b44:	b2ca      	uxtb	r2, r1
 8003b46:	701a      	strb	r2, [r3, #0]
                *pOut++ = (uint8_t) __USAT(sum3, 8);
 8003b48:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003b4c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003b50:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003b54:	f383 0308 	usat	r3, #8, r3
 8003b58:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003b5c:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8003b60:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003b6a:	b2ca      	uxtb	r2, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
                *pOut++ = (uint8_t) __USAT(sum4, 8);
 8003b6e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003b72:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003b76:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003b7a:	f383 0308 	usat	r3, #8, r3
 8003b7e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003b82:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8003b86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003b90:	b2ca      	uxtb	r2, r1
 8003b92:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 8003b94:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	@ 0x1aa
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	f8a7 31aa 	strh.w	r3, [r7, #426]	@ 0x1aa
            while (rowCnt)
 8003b9e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	@ 0x1aa
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f47f ab1b 	bne.w	80031de <arm_depthwise_separable_conv_HWC_asym_uint8+0x256>
            }

            rowCnt = ch_im_out & 0x3;
 8003ba8:	f8b7 31e4 	ldrh.w	r3, [r7, #484]	@ 0x1e4
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	f8a7 31aa 	strh.w	r3, [r7, #426]	@ 0x1aa
            while (rowCnt)
 8003bb4:	e06e      	b.n	8003c94 <arm_depthwise_separable_conv_HWC_asym_uint8+0xd0c>
            {
                uint8_t     *pB = colBuffer + row_shift;
 8003bb6:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8003bba:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                const uint8_t *pA = wt + row_shift;
 8003bc4:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8003bc8:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8003bcc:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                int32_t     sum = *pBias++;
 8003bd8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003bdc:	1d1a      	adds	r2, r3, #4
 8003bde:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                uint16_t  colCnt = (dim_kernel * dim_kernel);
 8003be8:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8003bec:	fb13 f303 	smulbb	r3, r3, r3
 8003bf0:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186

                row_shift += 1;
 8003bf4:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8

                while (colCnt)
 8003bfe:	e02d      	b.n	8003c5c <arm_depthwise_separable_conv_HWC_asym_uint8+0xcd4>
                {
                    uint8_t A1 = *pA;
 8003c00:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
                    uint8_t B1 = *pB;
 8003c0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e
                    pA += ch_im_in;
 8003c14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003c18:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003c22:	4413      	add	r3, r2
 8003c24:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                    pB += ch_im_in;
 8003c28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003c2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8003c36:	4413      	add	r3, r2
 8003c38:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

                    sum += A1 * B1;
 8003c3c:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8003c40:	f897 216e 	ldrb.w	r2, [r7, #366]	@ 0x16e
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

                    colCnt--;
 8003c52:	f8b7 3186 	ldrh.w	r3, [r7, #390]	@ 0x186
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
                while (colCnt)
 8003c5c:	f8b7 3186 	ldrh.w	r3, [r7, #390]	@ 0x186
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1cd      	bne.n	8003c00 <arm_depthwise_separable_conv_HWC_asym_uint8+0xc78>
                }
                *pOut++ = (uint8_t) __USAT(sum, 8);
 8003c64:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003c68:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8003c6c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8003c70:	f383 0308 	usat	r3, #8, r3
 8003c74:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003c78:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003c7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003c86:	b2ca      	uxtb	r2, r1
 8003c88:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 8003c8a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	@ 0x1aa
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	f8a7 31aa 	strh.w	r3, [r7, #426]	@ 0x1aa
            while (rowCnt)
 8003c94:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	@ 0x1aa
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d18c      	bne.n	8003bb6 <arm_depthwise_separable_conv_HWC_asym_uint8+0xc2e>
            }

            /* clear counter and pointers */
            pBuffer = colBuffer;
 8003c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ca0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8003ca4:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	@ 0x1bc
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f8a7 31bc 	strh.w	r3, [r7, #444]	@ 0x1bc
 8003cb2:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	@ 0x1bc
 8003cb6:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f6ff a9e0 	blt.w	8003080 <arm_depthwise_separable_conv_HWC_asym_uint8+0xf8>
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8003cc0:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	@ 0x1be
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f8a7 31be 	strh.w	r3, [r7, #446]	@ 0x1be
 8003cce:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	@ 0x1be
 8003cd2:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	f6ff a9cd 	blt.w	8003076 <arm_depthwise_separable_conv_HWC_asym_uint8+0xee>
	#error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8003cdc:	2300      	movs	r3, #0

}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f507 77e2 	add.w	r7, r7, #452	@ 0x1c4
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}

08003ce8 <read_and_pad_reordered_uint8>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b08d      	sub	sp, #52	@ 0x34
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
		int32_t inA = *__SIMD32(source)++;
 8003cf4:	f107 020c 	add.w	r2, r7, #12
 8003cf8:	6813      	ldr	r3, [r2, #0]
 8003cfa:	1d19      	adds	r1, r3, #4
 8003cfc:	6011      	str	r1, [r2, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        *out2 = __UXTB16(__ROR(inA, 8));
 8003d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	2308      	movs	r3, #8
 8003d08:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <read_and_pad_reordered_uint8+0x34>
    return op1;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <read_and_pad_reordered_uint8+0x3c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	fa62 f303 	ror.w	r3, r2, r3
 8003d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	fa3f f383 	uxtb16	r3, r3
 8003d2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
        *out1 = __UXTB16(inA);
 8003d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	fa3f f383 	uxtb16	r3, r3
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	601a      	str	r2, [r3, #0]
        return source;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3734      	adds	r7, #52	@ 0x34
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <__HI_SMULL>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  int hi = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
  int lo = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	fb81 2300 	smull	r2, r3, r1, r0
 8003d72:	60ba      	str	r2, [r7, #8]
 8003d74:	60fb      	str	r3, [r7, #12]
  return hi;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered>:
												  const uint16_t n_zero,
                                                  const uint16_t ch_im_out,
                                                  const uint16_t numCol_A,
                                                  const int32_t * bias,
												  uint8_t * pOut)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b0cf      	sub	sp, #316	@ 0x13c
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8003d8e:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8003d92:	6020      	str	r0, [r4, #0]
 8003d94:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8003d98:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8003d9c:	6001      	str	r1, [r0, #0]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003da4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003dae:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8003db2:	460a      	mov	r2, r1
 8003db4:	701a      	strb	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
	uint8_t     *pOut2 = pOut + ch_im_out;
 8003db6:	f8b7 3154 	ldrh.w	r3, [r7, #340]	@ 0x154
 8003dba:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    int       i;
    int16_t VzA[2] = {z_a,z_a};
 8003dc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003dc8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b21a      	sxth	r2, r3
 8003dd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003dde:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dee:	805a      	strh	r2, [r3, #2]
	const int16_t *pzA = VzA;
 8003df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003df4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003df8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003dfc:	601a      	str	r2, [r3, #0]
	int32_t inzA = *__SIMD32(pzA);
 8003dfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003e10:	e2fe      	b.n	8004410 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x68c>
    {
        /* setup pointers for B */
        const int16_t *pB = pInBuffer;
 8003e12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e16:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e1a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003e1e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	601a      	str	r2, [r3, #0]
        const int16_t *pB2 = pB + numCol_A;
 8003e26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	441a      	add	r2, r3
 8003e38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003e3c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e40:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const uint8_t *pA2 = pA + numCol_A;
 8003e42:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8003e46:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003e4a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	4413      	add	r3, r2
 8003e52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

        int32_t     sum =  bias[i];
 8003e56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        int32_t     sum2 = bias[i];
 8003e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8003e72:	4413      	add	r3, r2
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        int32_t     sum3 = bias[i + 1];
 8003e7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e7e:	3301      	adds	r3, #1
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8003e86:	4413      	add	r3, r2
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        int32_t     sum4 = bias[i + 1];
 8003e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e92:	3301      	adds	r3, #1
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8003e9a:	4413      	add	r3, r2
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

        uint16_t  colCnt = numCol_A >> 2;
 8003ea2:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a

        /* accumulate over the vector */
        while (colCnt)
 8003eac:	e188      	b.n	80041c0 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x43c>
        {
        	int32_t inA11, inA12, inA21, inA22;
        	int32_t inB1 = *__SIMD32(pB)++;
 8003eae:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003eb2:	6813      	ldr	r3, [r2, #0]
 8003eb4:	1d19      	adds	r1, r3, #4
 8003eb6:	6011      	str	r1, [r2, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        	int32_t inB2 = *__SIMD32(pB2)++;
 8003ebe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	1d19      	adds	r1, r3, #4
 8003ec6:	6011      	str	r1, [r2, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

            pA = (uint8_t *) read_and_pad_reordered_uint8((void *)pA, &inA11, &inA12);
 8003ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003ed2:	f5a3 7496 	sub.w	r4, r3, #300	@ 0x12c
 8003ed6:	f107 021c 	add.w	r2, r7, #28
 8003eda:	f107 0120 	add.w	r1, r7, #32
 8003ede:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003ee2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	f7ff fefe 	bl	8003ce8 <read_and_pad_reordered_uint8>
 8003eec:	6020      	str	r0, [r4, #0]
            pA2 = (uint8_t *) read_and_pad_reordered_uint8((void *)pA2, &inA21, &inA22);
 8003eee:	f107 0214 	add.w	r2, r7, #20
 8003ef2:	f107 0318 	add.w	r3, r7, #24
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8003efc:	f7ff fef4 	bl	8003ce8 <read_and_pad_reordered_uint8>
 8003f00:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			inA11 = __SSUB16(inA11, inzA);
 8003f04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f20:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003f24:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	fad3 f202 	ssub16	r2, r3, r2
 8003f2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f36:	601a      	str	r2, [r3, #0]
  return(result);
 8003f38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f4c:	601a      	str	r2, [r3, #0]
			inA12 = __SSUB16(inA12, inzA);
 8003f4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f60:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f66:	fad3 f302 	ssub16	r3, r3, r2
 8003f6a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f74:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f78:	601a      	str	r2, [r3, #0]
			inA21 = __SSUB16(inA21, inzA);
 8003f7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003f7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003f8c:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003f92:	fad3 f302 	ssub16	r3, r3, r2
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8003f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003fa0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003fa4:	601a      	str	r2, [r3, #0]
			inA22 = __SSUB16(inA22, inzA);
 8003fa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003faa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	663a      	str	r2, [r7, #96]	@ 0x60
 8003fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003fbe:	fad3 f302 	ssub16	r3, r3, r2
 8003fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8003fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003fcc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003fd0:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8003fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003fd6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003fe6:	6739      	str	r1, [r7, #112]	@ 0x70
 8003fe8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fea:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003fec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ff0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ff2:	fb23 1302 	smlad	r3, r3, r2, r1
 8003ff6:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8003ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            sum2 = __SMLAD(inA11, inB2, sum2);
 8003ffe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004002:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800400e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004012:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004016:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004018:	67bb      	str	r3, [r7, #120]	@ 0x78
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800401a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800401e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004020:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004022:	fb23 1302 	smlad	r3, r3, r2, r1
 8004026:	677b      	str	r3, [r7, #116]	@ 0x74
  return(result);
 8004028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800402a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            sum3 = __SMLAD(inA21, inB1, sum3);
 800402e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004032:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800403e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004042:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004046:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800404a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800404e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004052:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004056:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800405a:	fb23 1302 	smlad	r3, r3, r2, r1
 800405e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8004062:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004066:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            sum4 = __SMLAD(inA21, inB2, sum4);
 800406a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800406e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800407a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800407e:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004082:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004086:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800408a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800408e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8004092:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8004096:	fb23 1302 	smlad	r3, r3, r2, r1
 800409a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return(result);
 800409e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            inB1 = *__SIMD32(pB)++;
 80040a6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80040aa:	6813      	ldr	r3, [r2, #0]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	6011      	str	r1, [r2, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            inB2 = *__SIMD32(pB2)++;
 80040b6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	1d19      	adds	r1, r3, #4
 80040be:	6011      	str	r1, [r2, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

            sum = __SMLAD(inA12, inB1, sum);
 80040c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80040ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4619      	mov	r1, r3
 80040d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80040d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80040da:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80040de:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80040e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040ee:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80040f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return(result);
 80040fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            sum2 = __SMLAD(inA12, inB2, sum2);
 8004102:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004106:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004112:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004116:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800411a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004126:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800412a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800412e:	fb23 1302 	smlad	r3, r3, r2, r1
 8004132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return(result);
 8004136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800413a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            sum3 = __SMLAD(inA22, inB1, sum3);
 800413e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004142:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4619      	mov	r1, r3
 800414a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800414e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004152:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8004156:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800415a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800415e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004162:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004166:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 800416a:	fb23 1302 	smlad	r3, r3, r2, r1
 800416e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  return(result);
 8004172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004176:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            sum4 = __SMLAD(inA22, inB2, sum4);
 800417a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800417e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4619      	mov	r1, r3
 8004186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800418a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800418e:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8004192:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800419a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80041a2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80041a6:	fb23 1302 	smlad	r3, r3, r2, r1
 80041aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  return(result);
 80041ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            colCnt--;
 80041b6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80041ba:	3b01      	subs	r3, #1
 80041bc:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        while (colCnt)
 80041c0:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f ae72 	bne.w	8003eae <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x12a>
        } /* while over colCnt */


        //*** TO BE TESTED ***
        colCnt = numCol_A & 0x3;
 80041ca:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        while (colCnt)
 80041d6:	e07c      	b.n	80042d2 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x54e>
        {
            int16_t   inA1 = (int16_t)*pA++;
 80041d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80041dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80041e6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80041ea:	1c59      	adds	r1, r3, #1
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
            int16_t   inB1 = *pB++;
 80041f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80041f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1c99      	adds	r1, r3, #2
 8004200:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004204:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004208:	6011      	str	r1, [r2, #0]
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
            int16_t   inA2 = (int16_t)*pA2++;
 8004210:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
            int16_t   inB2 = *pB2++;
 8004220:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004224:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c99      	adds	r1, r3, #2
 800422c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004230:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8004234:	6011      	str	r1, [r2, #0]
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec

			inA1 = inA1 - VzA[0];
 800423c:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	@ 0xf2
 8004240:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424c:	b29b      	uxth	r3, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	b29b      	uxth	r3, r3
 8004252:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
			inA2 = inA2 - VzA[0];
 8004256:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 800425a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800425e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004266:	b29b      	uxth	r3, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee

            sum += inA1 * inB1;
 8004270:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	@ 0xf2
 8004274:	f9b7 20f0 	ldrsh.w	r2, [r7, #240]	@ 0xf0
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004280:	4413      	add	r3, r2
 8004282:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            sum2 += inA1 * inB2;
 8004286:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	@ 0xf2
 800428a:	f9b7 20ec 	ldrsh.w	r2, [r7, #236]	@ 0xec
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004296:	4413      	add	r3, r2
 8004298:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            sum3 += inA2 * inB1;
 800429c:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	@ 0xee
 80042a0:	f9b7 20f0 	ldrsh.w	r2, [r7, #240]	@ 0xf0
 80042a4:	fb02 f303 	mul.w	r3, r2, r3
 80042a8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80042ac:	4413      	add	r3, r2
 80042ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            sum4 += inA2 * inB2;
 80042b2:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	@ 0xee
 80042b6:	f9b7 20ec 	ldrsh.w	r2, [r7, #236]	@ 0xec
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80042c2:	4413      	add	r3, r2
 80042c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            colCnt--;
 80042c8:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80042cc:	3b01      	subs	r3, #1
 80042ce:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        while (colCnt)
 80042d2:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f47f af7e 	bne.w	80041d8 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x454>
        } /* while over colCnt */

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 80042dc:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80042e0:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80042e4:	f7ff fd38 	bl	8003d58 <__HI_SMULL>
 80042e8:	4602      	mov	r2, r0
 80042ea:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 80042ee:	411a      	asrs	r2, r3
 80042f0:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 80042f4:	4413      	add	r3, r2
 80042f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 80042fa:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80042fe:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8004302:	f7ff fd29 	bl	8003d58 <__HI_SMULL>
 8004306:	4602      	mov	r2, r0
 8004308:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 800430c:	411a      	asrs	r2, r3
 800430e:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8004312:	4413      	add	r3, r2
 8004314:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		sum3 = ((__HI_SMULL(sum3,m_zero)) >> n_zero) + z_out;
 8004318:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800431c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8004320:	f7ff fd1a 	bl	8003d58 <__HI_SMULL>
 8004324:	4602      	mov	r2, r0
 8004326:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 800432a:	411a      	asrs	r2, r3
 800432c:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8004330:	4413      	add	r3, r2
 8004332:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		sum4 = ((__HI_SMULL(sum4,m_zero)) >> n_zero) + z_out;
 8004336:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800433a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800433e:	f7ff fd0b 	bl	8003d58 <__HI_SMULL>
 8004342:	4602      	mov	r2, r0
 8004344:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8004348:	411a      	asrs	r2, r3
 800434a:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800434e:	4413      	add	r3, r2
 8004350:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

		*pOut++ = (uint8_t) __USAT(sum, 8);
 8004354:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004358:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800435c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004360:	f383 0308 	usat	r3, #8, r3
 8004364:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004368:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800436c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 8004376:	b2ca      	uxtb	r2, r1
 8004378:	701a      	strb	r2, [r3, #0]
		*pOut++ = (uint8_t) __USAT(sum3, 8);
 800437a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800437e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004382:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004386:	f383 0308 	usat	r3, #8, r3
 800438a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800438e:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8004392:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 800439c:	b2ca      	uxtb	r2, r1
 800439e:	701a      	strb	r2, [r3, #0]
		*pOut2++ = (uint8_t) __USAT(sum2, 8);
 80043a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80043a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80043a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80043ac:	f383 0308 	usat	r3, #8, r3
 80043b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043b4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 80043b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80043c2:	b2ca      	uxtb	r2, r1
 80043c4:	701a      	strb	r2, [r3, #0]
		*pOut2++ = (uint8_t) __USAT(sum4, 8);
 80043c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80043ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043d2:	f383 0308 	usat	r3, #8, r3
 80043d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043da:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 80043de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80043e8:	b2ca      	uxtb	r2, r1
 80043ea:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80043ec:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 80043f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80043f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80043f8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80043fc:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8004400:	6809      	ldr	r1, [r1, #0]
 8004402:	440a      	add	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 8004406:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800440a:	3302      	adds	r3, #2
 800440c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004410:	f8b7 3154 	ldrh.w	r3, [r7, #340]	@ 0x154
 8004414:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8004418:	429a      	cmp	r2, r3
 800441a:	f6ff acfa 	blt.w	8003e12 <arm_nn_mat_mult_kernel_asym_uint8_int16_reordered+0x8e>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 800441e:	f8b7 3154 	ldrh.w	r3, [r7, #340]	@ 0x154
 8004422:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004426:	4413      	add	r3, r2
 8004428:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
	#error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* return the new output pointer with offset */
    return pOut;
 800442c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
}
 8004430:	4618      	mov	r0, r3
 8004432:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}

0800443a <read_and_pad_reordered_uint8>:
{
 800443a:	b480      	push	{r7}
 800443c:	b08d      	sub	sp, #52	@ 0x34
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
		int32_t inA = *__SIMD32(source)++;
 8004446:	f107 020c 	add.w	r2, r7, #12
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	1d19      	adds	r1, r3, #4
 800444e:	6011      	str	r1, [r2, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        *out2 = __UXTB16(__ROR(inA, 8));
 8004454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	2308      	movs	r3, #8
 800445a:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <read_and_pad_reordered_uint8+0x34>
    return op1;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	e003      	b.n	8004476 <read_and_pad_reordered_uint8+0x3c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa62 f303 	ror.w	r3, r2, r3
 8004476:	623b      	str	r3, [r7, #32]
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	fa3f f383 	uxtb16	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
        *out1 = __UXTB16(inA);
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448e:	fa3f f383 	uxtb16	r3, r3
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	601a      	str	r2, [r3, #0]
        return source;
 800449c:	68fb      	ldr	r3, [r7, #12]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3734      	adds	r7, #52	@ 0x34
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <__HI_SMULL>:
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  int hi = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  int lo = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
  asm volatile ("SMULL %[lo_out], %[hi_out], %[a_operand], %[b_operand]"
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	6838      	ldr	r0, [r7, #0]
 80044c0:	fb81 2300 	smull	r2, r3, r1, r0
 80044c4:	60ba      	str	r2, [r7, #8]
 80044c6:	60fb      	str	r3, [r7, #12]
  return hi;
 80044c8:	68fb      	ldr	r3, [r7, #12]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <arm_fully_connected_asym_uint8>:
								   const int32_t m_zero,
								   const uint16_t n_zero,
								   const int32_t * bias,
								   uint8_t * pOut,
								   int16_t * vec_buffer)
{
 80044d6:	b590      	push	{r4, r7, lr}
 80044d8:	b0cf      	sub	sp, #316	@ 0x13c
 80044da:	af00      	add	r7, sp, #0
 80044dc:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 80044e0:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 80044e4:	6020      	str	r0, [r4, #0]
 80044e6:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80044ea:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 80044ee:	6001      	str	r1, [r0, #0]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80044f6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004500:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004504:	460a      	mov	r2, r1
 8004506:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const uint8_t *pB = pM;
 8004508:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800450c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    const uint8_t *pB2;
    uint8_t       *pO = pOut;
 8004516:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800451a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    const int32_t *pBias = bias;
 800451e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004522:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int16_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
 8004526:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800452a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    int16_t VzA[2] = {z_wt,z_wt};
 8004536:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800453a:	b21a      	sxth	r2, r3
 800453c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004544:	801a      	strh	r2, [r3, #0]
 8004546:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800454a:	b21a      	sxth	r2, r3
 800454c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004554:	805a      	strh	r2, [r3, #2]
	const int16_t *pzA = VzA;
 8004556:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800455a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800455e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8004562:	601a      	str	r2, [r3, #0]
	int32_t inzA = *__SIMD32(pzA);
 8004564:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    /* expand the vector into the buffer */
    arm_asym_uint8_to_int16_reordered_no_shift(pV, z_in, vec_buffer, dim_vec);
 8004570:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004574:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	f897 114c 	ldrb.w	r1, [r7, #332]	@ 0x14c
 800457e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004582:	f5a2 7096 	sub.w	r0, r2, #300	@ 0x12c
 8004586:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	f000 fbac 	bl	8004ce8 <arm_asym_uint8_to_int16_reordered_no_shift>

    while (rowCnt)
 8004590:	e1ed      	b.n	800496e <arm_fully_connected_asym_uint8+0x498>
    {
    	int32_t   sum =  *pBias++;
 8004592:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    	int32_t   sum2 = *pBias++;
 80045a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80045a6:	1d1a      	adds	r2, r3, #4
 80045a8:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        uint16_t  colCnt = dim_vec >> 2;
 80045b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80045b6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	089b      	lsrs	r3, r3, #2
 80045be:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a

        pA = vec_buffer;
 80045c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80045c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045ca:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80045ce:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 80045d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80045d4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80045de:	4413      	add	r3, r2
 80045e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

        while (colCnt)
 80045e4:	e10a      	b.n	80047fc <arm_fully_connected_asym_uint8+0x326>
        {
        	int32_t     inV, inM11, inM12, inM21, inM22;
            pB = (uint8_t *) read_and_pad_reordered_uint8((void *)pB, &inM11, &inM12);
 80045e6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80045ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045ee:	4619      	mov	r1, r3
 80045f0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80045f4:	f7ff ff21 	bl	800443a <read_and_pad_reordered_uint8>
 80045f8:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
            pB2 = (uint8_t *) read_and_pad_reordered_uint8((void *)pB2, &inM21, &inM22);
 80045fc:	f107 021c 	add.w	r2, r7, #28
 8004600:	f107 0320 	add.w	r3, r7, #32
 8004604:	4619      	mov	r1, r3
 8004606:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800460a:	f7ff ff16 	bl	800443a <read_and_pad_reordered_uint8>
 800460e:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

            inV = *__SIMD32(pA)++;
 8004612:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004616:	6813      	ldr	r3, [r2, #0]
 8004618:	1d19      	adds	r1, r3, #4
 800461a:	6011      	str	r1, [r2, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            inM11 = __SSUB16(inM11, inzA);
 8004622:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004626:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004632:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004634:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004636:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004638:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800463a:	fad3 f302 	ssub16	r3, r3, r2
 800463e:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 8004640:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004642:	461a      	mov	r2, r3
 8004644:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004648:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800464c:	601a      	str	r2, [r3, #0]
            inM21 = __SSUB16(inM21, inzA);
 800464e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004652:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800465e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004662:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800466a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800466e:	fad3 f302 	ssub16	r3, r3, r2
 8004672:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return(result);
 8004674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004676:	461a      	mov	r2, r3
 8004678:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800467c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004680:	601a      	str	r2, [r3, #0]
            sum = __SMLAD(inV, inM11, sum);
 8004682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004686:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800468a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4619      	mov	r1, r3
 8004692:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004696:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800469a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800469e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80046a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80046aa:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80046ae:	fb23 1302 	smlad	r3, r3, r2, r1
 80046b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return(result);
 80046b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            sum2 = __SMLAD(inV, inM21, sum2);
 80046be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80046c6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4619      	mov	r1, r3
 80046ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046d6:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80046da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80046de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046e2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80046e6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80046ea:	fb23 1302 	smlad	r3, r3, r2, r1
 80046ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  return(result);
 80046f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            inV = *__SIMD32(pA)++;
 80046fa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	1d19      	adds	r1, r3, #4
 8004702:	6011      	str	r1, [r2, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            inM12 = __SSUB16(inM12, inzA);
 800470a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800470e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800471a:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 800471e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004722:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004726:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800472a:	fad3 f302 	ssub16	r3, r3, r2
 800472e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return(result);
 8004732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004736:	461a      	mov	r2, r3
 8004738:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800473c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004740:	601a      	str	r2, [r3, #0]
            inM22 = __SSUB16(inM22, inzA);
 8004742:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004746:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004752:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004756:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800475a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800475e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004762:	fad3 f302 	ssub16	r3, r3, r2
 8004766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return(result);
 800476a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800476e:	461a      	mov	r2, r3
 8004770:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004774:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004778:	601a      	str	r2, [r3, #0]
            sum = __SMLAD(inV, inM12, sum);
 800477a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800477e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004782:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4619      	mov	r1, r3
 800478a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800478e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004792:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8004796:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800479a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800479e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047a2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80047a6:	fb23 1302 	smlad	r3, r3, r2, r1
 80047aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return(result);
 80047ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            sum2 = __SMLAD(inV, inM22, sum2);
 80047b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80047ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80047be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047ce:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80047d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80047de:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80047e2:	fb23 1302 	smlad	r3, r3, r2, r1
 80047e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  return(result);
 80047ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            colCnt--;
 80047f2:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80047f6:	3b01      	subs	r3, #1
 80047f8:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        while (colCnt)
 80047fc:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f aef0 	bne.w	80045e6 <arm_fully_connected_asym_uint8+0x110>
        }
        colCnt = dim_vec & 0x3;
 8004806:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800480a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        while (colCnt)
 8004818:	e052      	b.n	80048c0 <arm_fully_connected_asym_uint8+0x3ea>
        {
        	int16_t   inV  = (int16_t) *pA++;
 800481a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800481e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	1c99      	adds	r1, r3, #2
 8004826:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800482a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800482e:	6011      	str	r1, [r2, #0]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
        	int16_t   inM  = (int16_t) *pB++;
 8004836:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
        	int16_t   inM2 = (int16_t) *pB2++;
 8004846:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6

            inM = inM - VzA[0];
 8004856:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	@ 0xe8
 800485a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800485e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004866:	b29b      	uxth	r3, r3
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	b29b      	uxth	r3, r3
 800486c:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
            inM2 = inM2 - VzA[0];
 8004870:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	@ 0xe6
 8004874:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004880:	b29b      	uxth	r3, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	b29b      	uxth	r3, r3
 8004886:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
            sum += inV * inM;
 800488a:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	@ 0xea
 800488e:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	@ 0xe8
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800489a:	4413      	add	r3, r2
 800489c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            sum2 += inV * inM2;
 80048a0:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	@ 0xea
 80048a4:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	@ 0xe6
 80048a8:	fb02 f303 	mul.w	r3, r2, r3
 80048ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80048b0:	4413      	add	r3, r2
 80048b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            colCnt--;
 80048b6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80048ba:	3b01      	subs	r3, #1
 80048bc:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        while (colCnt)
 80048c0:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1a8      	bne.n	800481a <arm_fully_connected_asym_uint8+0x344>
        }                       /* while over colCnt */

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 80048c8:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 80048cc:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80048d0:	f7ff fdeb 	bl	80044aa <__HI_SMULL>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80048da:	411a      	asrs	r2, r3
 80048dc:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 80048e0:	4413      	add	r3, r2
 80048e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		sum2 = ((__HI_SMULL(sum2,m_zero)) >> n_zero) + z_out;
 80048e6:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 80048ea:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80048ee:	f7ff fddc 	bl	80044aa <__HI_SMULL>
 80048f2:	4602      	mov	r2, r0
 80048f4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80048f8:	411a      	asrs	r2, r3
 80048fa:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 80048fe:	4413      	add	r3, r2
 8004900:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		*pO++ = (uint8_t) __USAT(sum, 8);
 8004904:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004908:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800490c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004910:	f383 0308 	usat	r3, #8, r3
 8004914:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004918:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 800491c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004926:	b2ca      	uxtb	r2, r1
 8004928:	701a      	strb	r2, [r3, #0]
		*pO++ = (uint8_t) __USAT(sum2, 8);
 800492a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800492e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004932:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004936:	f383 0308 	usat	r3, #8, r3
 800493a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800493e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8004942:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 800494c:	b2ca      	uxtb	r2, r1
 800494e:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8004950:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004954:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800495e:	4413      	add	r3, r2
 8004960:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        rowCnt--;
 8004964:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8004968:	3b01      	subs	r3, #1
 800496a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    while (rowCnt)
 800496e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8004972:	2b00      	cmp	r3, #0
 8004974:	f47f ae0d 	bne.w	8004592 <arm_fully_connected_asym_uint8+0xbc>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8004978:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800497c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

    while (rowCnt)
 800498a:	e104      	b.n	8004b96 <arm_fully_connected_asym_uint8+0x6c0>
    {
        uint16_t  colCnt = dim_vec >> 2;
 800498c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004990:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        int32_t   sum =  *pBias++;
 800499c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

        pA = vec_buffer;
 80049ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049b4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80049b8:	601a      	str	r2, [r3, #0]

        while (colCnt)
 80049ba:	e07f      	b.n	8004abc <arm_fully_connected_asym_uint8+0x5e6>
        {
        	int32_t     inV1, inV2, inM11, inM12;

            pB = (uint8_t *) read_and_pad_reordered_uint8((void *)pB, &inM11, &inM12);
 80049bc:	f107 0214 	add.w	r2, r7, #20
 80049c0:	f107 0318 	add.w	r3, r7, #24
 80049c4:	4619      	mov	r1, r3
 80049c6:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80049ca:	f7ff fd36 	bl	800443a <read_and_pad_reordered_uint8>
 80049ce:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
            inM11 = __SSUB16(inM11, inzA);
 80049d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80049e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80049e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049ea:	fad3 f202 	ssub16	r2, r3, r2
 80049ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049f2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049f6:	601a      	str	r2, [r3, #0]
  return(result);
 80049f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a0c:	601a      	str	r2, [r3, #0]
            inM12 = __SSUB16(inM12, inzA);
 8004a0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004a1e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a20:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a26:	fad3 f302 	ssub16	r3, r3, r2
 8004a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a38:	601a      	str	r2, [r3, #0]

            inV1 = *__SIMD32(pA)++;
 8004a3a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	6011      	str	r1, [r2, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            sum = __SMLAD(inV1, inM11, sum);
 8004a4a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8004a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a62:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a6a:	fb23 1302 	smlad	r3, r3, r2, r1
 8004a6e:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8004a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

            inV2 = *__SIMD32(pA)++;
 8004a76:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	1d19      	adds	r1, r3, #4
 8004a7e:	6011      	str	r1, [r2, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
            sum = __SMLAD(inV2, inM12, sum);
 8004a86:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8004a8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004a8e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a9c:	66b9      	str	r1, [r7, #104]	@ 0x68
 8004a9e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004aa4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004aa6:	fb23 1302 	smlad	r3, r3, r2, r1
 8004aaa:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

            colCnt--;
 8004ab2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        while (colCnt)
 8004abc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f47f af7b 	bne.w	80049bc <arm_fully_connected_asym_uint8+0x4e6>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8004ac6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004aca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        while (colCnt)
 8004ad8:	e032      	b.n	8004b40 <arm_fully_connected_asym_uint8+0x66a>
        {
        	int16_t   inV  = (int16_t) *pA++;
 8004ada:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	1c99      	adds	r1, r3, #2
 8004ae6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004aea:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004aee:	6011      	str	r1, [r2, #0]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        	int16_t   inM  = (int16_t) *pB++;
 8004af6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104

            inM = inM - VzA[0];
 8004b06:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8004b0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
            sum += inV * inM;
 8004b20:	f9b7 3106 	ldrsh.w	r3, [r7, #262]	@ 0x106
 8004b24:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	@ 0x104
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004b30:	4413      	add	r3, r2
 8004b32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            colCnt--;
 8004b36:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        while (colCnt)
 8004b40:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1c8      	bne.n	8004ada <arm_fully_connected_asym_uint8+0x604>
        }

		sum  = ((__HI_SMULL(sum,m_zero)) >> n_zero) + z_out;
 8004b48:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8004b4c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8004b50:	f7ff fcab 	bl	80044aa <__HI_SMULL>
 8004b54:	4602      	mov	r2, r0
 8004b56:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8004b5a:	411a      	asrs	r2, r3
 8004b5c:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 8004b60:	4413      	add	r3, r2
 8004b62:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		*pO++ = (uint8_t) __USAT(sum, 8);
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b72:	f383 0308 	usat	r3, #8, r3
 8004b76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b7a:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8004b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004b88:	b2ca      	uxtb	r2, r1
 8004b8a:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8004b8c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8004b90:	3b01      	subs	r3, #1
 8004b92:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    while (rowCnt)
 8004b96:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f47f aef6 	bne.w	800498c <arm_fully_connected_asym_uint8+0x4b6>
	#error "Cortex-M0 and Cortex-M3 not supported"
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8004ba0:	2300      	movs	r3, #0

}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd90      	pop	{r4, r7, pc}

08004bac <arm_asym_uint8_to_int16_no_shift>:
void arm_asym_uint8_to_int16_no_shift(
		const uint8_t * pSrc,
		const uint8_t offset,
		int16_t * pDst,
		uint32_t blockSize)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b09b      	sub	sp, #108	@ 0x6c
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	72fb      	strb	r3, [r7, #11]
    const uint8_t *pIn = pSrc;     /* Src pointer */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	61bb      	str	r3, [r7, #24]
    uint32_t  blkCnt;           /* loop counter */
    int16_t offsets[2] = {offset, offset};
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	82bb      	strh	r3, [r7, #20]
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	82fb      	strh	r3, [r7, #22]
    const int16_t *offset_ptr = offsets;
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	613b      	str	r3, [r7, #16]

#ifndef ARM_MATH_CM0_FAMILY
    int32_t   in;
    int32_t   in1, in2;
    int32_t   out1, out2;
    int32_t   offset_vect = *__SIMD32(offset_ptr);
 8004bd2:	f107 0310 	add.w	r3, r7, #16
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	65bb      	str	r3, [r7, #88]	@ 0x58

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	667b      	str	r3, [r7, #100]	@ 0x64

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8004be2:	e05b      	b.n	8004c9c <arm_asym_uint8_to_int16_no_shift+0xf0>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8004be4:	f107 0218 	add.w	r2, r7, #24
 8004be8:	6813      	ldr	r3, [r2, #0]
 8004bea:	1d19      	adds	r1, r3, #4
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __UXTB16(__ROR(in, 8));
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  op2 %= 32U;
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	637b      	str	r3, [r7, #52]	@ 0x34
  if (op2 == 0U)
 8004c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <arm_asym_uint8_to_int16_no_shift+0x60>
    return op1;
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	e003      	b.n	8004c14 <arm_asym_uint8_to_int16_no_shift+0x68>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c10:	fa62 f303 	ror.w	r3, r2, r3
 8004c14:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c18:	fa3f f383 	uxtb16	r3, r3
 8004c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c20:	663b      	str	r3, [r7, #96]	@ 0x60

        /* extend remainig two q7_t values to q15_t values */
        in2 = __UXTB16(in);
 8004c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c28:	fa3f f383 	uxtb16	r3, r3
 8004c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c30:	65fb      	str	r3, [r7, #92]	@ 0x5c

        if(offset){
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d015      	beq.n	8004c64 <arm_asym_uint8_to_int16_no_shift+0xb8>
        	in1 = __SSUB16(in1, offset_vect);
 8004c38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	fad3 f302 	ssub16	r3, r3, r2
 8004c48:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	663b      	str	r3, [r7, #96]	@ 0x60
        	in2 = __SSUB16(in2, offset_vect);
 8004c4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c5a:	fad3 f302 	ssub16	r3, r3, r2
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8004c64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <arm_asym_uint8_to_int16_no_shift+0x138>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c6c:	0c12      	lsrs	r2, r2, #16
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	653b      	str	r3, [r7, #80]	@ 0x50
        out1 = __PKHBT(in2, in1, 16);
 8004c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 8004c7e:	1d3a      	adds	r2, r7, #4
 8004c80:	6813      	ldr	r3, [r2, #0]
 8004c82:	1d19      	adds	r1, r3, #4
 8004c84:	6011      	str	r1, [r2, #0]
 8004c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c88:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 8004c8a:	1d3a      	adds	r2, r7, #4
 8004c8c:	6813      	ldr	r3, [r2, #0]
 8004c8e:	1d19      	adds	r1, r3, #4
 8004c90:	6011      	str	r1, [r2, #0]
 8004c92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c94:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8004c96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	667b      	str	r3, [r7, #100]	@ 0x64
    while (blkCnt > 0u)
 8004c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1a0      	bne.n	8004be4 <arm_asym_uint8_to_int16_no_shift+0x38>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	667b      	str	r3, [r7, #100]	@ 0x64

#else
#error "Cortex-M0 is not supported"
#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8004caa:	e010      	b.n	8004cce <arm_asym_uint8_to_int16_no_shift+0x122>
    {
    	*pDst++ = ((int16_t) * pIn++)-offset;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	61ba      	str	r2, [r7, #24]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	b299      	uxth	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	b20a      	sxth	r2, r1
 8004cc6:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8004cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	667b      	str	r3, [r7, #100]	@ 0x64
    while (blkCnt > 0u)
 8004cce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1eb      	bne.n	8004cac <arm_asym_uint8_to_int16_no_shift+0x100>
    }

}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	376c      	adds	r7, #108	@ 0x6c
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	ffff0000 	.word	0xffff0000

08004ce8 <arm_asym_uint8_to_int16_reordered_no_shift>:
void arm_asym_uint8_to_int16_reordered_no_shift(
		const uint8_t * pSrc,
		const uint8_t offset,
		int16_t * pDst,
		uint32_t blockSize)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b09f      	sub	sp, #124	@ 0x7c
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	72fb      	strb	r3, [r7, #11]
    const uint8_t *pIn = pSrc;  /* Src pointer */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	61bb      	str	r3, [r7, #24]
    uint32_t  blkCnt;           /* loop counter */
    int16_t offsets[2] = {offset, offset};
 8004cfc:	7afb      	ldrb	r3, [r7, #11]
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	82bb      	strh	r3, [r7, #20]
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	82fb      	strh	r3, [r7, #22]
    const int16_t *offset_ptr = offsets;
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	613b      	str	r3, [r7, #16]

#ifndef ARM_MATH_CM0_FAMILY
    int32_t   in;
    int32_t   in1, in2;
    int32_t   offset_vect = *__SIMD32(offset_ptr);
 8004d0e:	f107 0310 	add.w	r3, r7, #16
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	673b      	str	r3, [r7, #112]	@ 0x70

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	677b      	str	r3, [r7, #116]	@ 0x74

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    if(offset)
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8087 	beq.w	8004e34 <arm_asym_uint8_to_int16_reordered_no_shift+0x14c>
    {
		while (blkCnt > 0u)
 8004d26:	e04b      	b.n	8004dc0 <arm_asym_uint8_to_int16_reordered_no_shift+0xd8>
		{
			/* C = (int16_t) A << 8 */
			/* convert from uint8_t to int16_t and then store the results in the destination buffer */
			in = *__SIMD32(pIn)++;
 8004d28:	f107 0218 	add.w	r2, r7, #24
 8004d2c:	6813      	ldr	r3, [r2, #0]
 8004d2e:	1d19      	adds	r1, r3, #4
 8004d30:	6011      	str	r1, [r2, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	66fb      	str	r3, [r7, #108]	@ 0x6c

			/* Rotate in by 8 and extend two uint8_t values to int16_t values */
			in1 = __UXTB16(__ROR(in, 8));
 8004d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  op2 %= 32U;
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
  if (op2 == 0U)
 8004d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <arm_asym_uint8_to_int16_reordered_no_shift+0x68>
    return op1;
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4e:	e003      	b.n	8004d58 <arm_asym_uint8_to_int16_reordered_no_shift+0x70>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d54:	fa62 f303 	ror.w	r3, r2, r3
 8004d58:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d5c:	fa3f f383 	uxtb16	r3, r3
 8004d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d64:	66bb      	str	r3, [r7, #104]	@ 0x68

			/* extend remaining two uint8_t values to int16_t values */
			in2 = __UXTB16(in);
 8004d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d68:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d6c:	fa3f f383 	uxtb16	r3, r3
 8004d70:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d74:	667b      	str	r3, [r7, #100]	@ 0x64

			in1 = __SSUB16(in1, offset_vect);
 8004d76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d7a:	657a      	str	r2, [r7, #84]	@ 0x54
 8004d7c:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d82:	fad3 f302 	ssub16	r3, r3, r2
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8004d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
	        in2 = __SSUB16(in2, offset_vect);
 8004d8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d90:	663a      	str	r2, [r7, #96]	@ 0x60
 8004d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004d94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d98:	fad3 f302 	ssub16	r3, r3, r2
 8004d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8004d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da0:	667b      	str	r3, [r7, #100]	@ 0x64

#ifndef ARM_MATH_BIG_ENDIAN
	        *__SIMD32(pDst)++ = in2;
 8004da2:	1d3a      	adds	r2, r7, #4
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	1d19      	adds	r1, r3, #4
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004dac:	601a      	str	r2, [r3, #0]
	        *__SIMD32(pDst)++ = in1;
 8004dae:	1d3a      	adds	r2, r7, #4
 8004db0:	6813      	ldr	r3, [r2, #0]
 8004db2:	1d19      	adds	r1, r3, #4
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004db8:	601a      	str	r2, [r3, #0]
			*__SIMD32(pDst)++ = in1;
			*__SIMD32(pDst)++ = in2;
#endif

			/* Decrement the loop counter */
			blkCnt--;
 8004dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	677b      	str	r3, [r7, #116]	@ 0x74
		while (blkCnt > 0u)
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1b0      	bne.n	8004d28 <arm_asym_uint8_to_int16_reordered_no_shift+0x40>
 8004dc6:	e038      	b.n	8004e3a <arm_asym_uint8_to_int16_reordered_no_shift+0x152>
    {
		while (blkCnt > 0u)
		{
			/* C = (int16_t) A << 8 */
			/* convert from uint8_t to int16_t and then store the results in the destination buffer */
			in = *__SIMD32(pIn)++;
 8004dc8:	f107 0218 	add.w	r2, r7, #24
 8004dcc:	6813      	ldr	r3, [r2, #0]
 8004dce:	1d19      	adds	r1, r3, #4
 8004dd0:	6011      	str	r1, [r2, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	66fb      	str	r3, [r7, #108]	@ 0x6c

			/* Rotate in by 8 and extend two uint8_t values to int16_t values */
			in1 = __UXTB16(__ROR(in, 8));
 8004dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd8:	623b      	str	r3, [r7, #32]
 8004dda:	2308      	movs	r3, #8
 8004ddc:	61fb      	str	r3, [r7, #28]
  op2 %= 32U;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	61fb      	str	r3, [r7, #28]
  if (op2 == 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <arm_asym_uint8_to_int16_reordered_no_shift+0x108>
    return op1;
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	e003      	b.n	8004df8 <arm_asym_uint8_to_int16_reordered_no_shift+0x110>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa62 f303 	ror.w	r3, r2, r3
 8004df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	fa3f f383 	uxtb16	r3, r3
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	66bb      	str	r3, [r7, #104]	@ 0x68

			/* extend remaining two uint8_t values to int16_t values */
			in2 = __UXTB16(in);
 8004e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e08:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0c:	fa3f f383 	uxtb16	r3, r3
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e14:	667b      	str	r3, [r7, #100]	@ 0x64

#ifndef ARM_MATH_BIG_ENDIAN
			*__SIMD32(pDst)++ = in2;
 8004e16:	1d3a      	adds	r2, r7, #4
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	1d19      	adds	r1, r3, #4
 8004e1c:	6011      	str	r1, [r2, #0]
 8004e1e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e20:	601a      	str	r2, [r3, #0]
			*__SIMD32(pDst)++ = in1;
 8004e22:	1d3a      	adds	r2, r7, #4
 8004e24:	6813      	ldr	r3, [r2, #0]
 8004e26:	1d19      	adds	r1, r3, #4
 8004e28:	6011      	str	r1, [r2, #0]
 8004e2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e2c:	601a      	str	r2, [r3, #0]
			*__SIMD32(pDst)++ = in1;
			*__SIMD32(pDst)++ = in2;
#endif

			/* Decrement the loop counter */
			blkCnt--;
 8004e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e30:	3b01      	subs	r3, #1
 8004e32:	677b      	str	r3, [r7, #116]	@ 0x74
		while (blkCnt > 0u)
 8004e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1c6      	bne.n	8004dc8 <arm_asym_uint8_to_int16_reordered_no_shift+0xe0>
		}
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	677b      	str	r3, [r7, #116]	@ 0x74
#else
#error "Cortex-M0 is not supported"

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8004e42:	e010      	b.n	8004e66 <arm_asym_uint8_to_int16_reordered_no_shift+0x17e>
    {
        *pDst++ = ((int16_t) * pIn++)-offset;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	61ba      	str	r2, [r7, #24]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	7afb      	ldrb	r3, [r7, #11]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	b299      	uxth	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	b20a      	sxth	r2, r1
 8004e5e:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8004e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e62:	3b01      	subs	r3, #1
 8004e64:	677b      	str	r3, [r7, #116]	@ 0x74
    while (blkCnt > 0u)
 8004e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1eb      	bne.n	8004e44 <arm_asym_uint8_to_int16_reordered_no_shift+0x15c>
    }

}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	377c      	adds	r7, #124	@ 0x7c
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <buffer_scale_back_int16_to_uint8>:

static void buffer_scale_back_int16_to_uint8(int16_t * buffer,
		uint8_t * target,
		uint16_t length,
		uint16_t scale)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	4611      	mov	r1, r2
 8004e86:	461a      	mov	r2, r3
 8004e88:	460b      	mov	r3, r1
 8004e8a:	80fb      	strh	r3, [r7, #6]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	80bb      	strh	r3, [r7, #4]
    int i;
    for (i = 0; i < length; i++)
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e011      	b.n	8004eba <buffer_scale_back_int16_to_uint8+0x40>
        target[i] = (uint8_t) (buffer[i] / scale);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	88bb      	ldrh	r3, [r7, #4]
 8004ea6:	fb92 f1f3 	sdiv	r1, r2, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	4413      	add	r3, r2
 8004eb0:	b2ca      	uxtb	r2, r1
 8004eb2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < length; i++)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	dbe9      	blt.n	8004e96 <buffer_scale_back_int16_to_uint8+0x1c>
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <accumulate_uint8_to_int16>:
        cnt--;
    }
}

static void accumulate_uint8_to_int16(int16_t * base, uint8_t * target, const uint16_t length)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b09b      	sub	sp, #108	@ 0x6c
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
	int16_t  *pCnt = base;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	61bb      	str	r3, [r7, #24]
	uint8_t  *pV = target;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	617b      	str	r3, [r7, #20]
	int32_t  v1, v2, vo1, vo2;
    uint16_t cnt = length >> 2;
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    int32_t  in;

    while (cnt > 0u)
 8004eee:	e064      	b.n	8004fba <accumulate_uint8_to_int16+0xea>
    {
    	int32_t value = *__SIMD32(pV)++;
 8004ef0:	f107 0214 	add.w	r2, r7, #20
 8004ef4:	6813      	ldr	r3, [r2, #0]
 8004ef6:	1d19      	adds	r1, r3, #4
 8004ef8:	6011      	str	r1, [r2, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	663b      	str	r3, [r7, #96]	@ 0x60
        v1 = __UXTB16(__ROR(value, 8));
 8004efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f00:	623b      	str	r3, [r7, #32]
 8004f02:	2308      	movs	r3, #8
 8004f04:	61fb      	str	r3, [r7, #28]
  op2 %= 32U;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	61fb      	str	r3, [r7, #28]
  if (op2 == 0U)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <accumulate_uint8_to_int16+0x48>
    return op1;
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	e003      	b.n	8004f20 <accumulate_uint8_to_int16+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004f18:	6a3a      	ldr	r2, [r7, #32]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	fa62 f303 	ror.w	r3, r2, r3
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	fa3f f383 	uxtb16	r3, r3
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        v2 = __UXTB16(value);
 8004f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f30:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	fa3f f383 	uxtb16	r3, r3
 8004f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifndef ARM_MATH_BIG_ENDIAN

        vo2 = __PKHTB(v1, v2, 16);
 8004f3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f40:	4b32      	ldr	r3, [pc, #200]	@ (800500c <accumulate_uint8_to_int16+0x13c>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f46:	0c12      	lsrs	r2, r2, #16
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	657b      	str	r3, [r7, #84]	@ 0x54
        vo1 = __PKHBT(v2, v1, 16);
 8004f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	4313      	orrs	r3, r2
 8004f56:	653b      	str	r3, [r7, #80]	@ 0x50
        vo1 = __PKHTB(v1, v2, 16);
        vo2 = __PKHBT(v2, v1, 16);

#endif

        in = *__SIMD32(pCnt);
 8004f58:	f107 0318 	add.w	r3, r7, #24
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
        *__SIMD32(pCnt)++ = __QADD16(vo1, in);
 8004f62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f66:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f6e:	fa93 f312 	qadd16	r3, r3, r2
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004f74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f76:	f107 0218 	add.w	r2, r7, #24
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	1d19      	adds	r1, r3, #4
 8004f7e:	6011      	str	r1, [r2, #0]
 8004f80:	4602      	mov	r2, r0
 8004f82:	601a      	str	r2, [r3, #0]

        in = *__SIMD32(pCnt);
 8004f84:	f107 0318 	add.w	r3, r7, #24
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        *__SIMD32(pCnt)++ = __QADD16(vo2, in);
 8004f8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f92:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f94:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f9a:	fa93 f312 	qadd16	r3, r3, r2
 8004f9e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004fa0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004fa2:	f107 0218 	add.w	r2, r7, #24
 8004fa6:	6813      	ldr	r3, [r2, #0]
 8004fa8:	1d19      	adds	r1, r3, #4
 8004faa:	6011      	str	r1, [r2, #0]
 8004fac:	4602      	mov	r2, r0
 8004fae:	601a      	str	r2, [r3, #0]

        cnt--;
 8004fb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    while (cnt > 0u)
 8004fba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d196      	bne.n	8004ef0 <accumulate_uint8_to_int16+0x20>
    }
    cnt = length & 0x3;
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    while (cnt > 0u)
 8004fcc:	e012      	b.n	8004ff4 <accumulate_uint8_to_int16+0x124>
    {
        *pCnt++ += *pV++;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	617a      	str	r2, [r7, #20]
 8004fd4:	7819      	ldrb	r1, [r3, #0]
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	61ba      	str	r2, [r7, #24]
 8004fdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	440a      	add	r2, r1
 8004fe4:	b292      	uxth	r2, r2
 8004fe6:	b212      	sxth	r2, r2
 8004fe8:	801a      	strh	r2, [r3, #0]
        cnt--;
 8004fea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    while (cnt > 0u)
 8004ff4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e8      	bne.n	8004fce <accumulate_uint8_to_int16+0xfe>
    }
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	376c      	adds	r7, #108	@ 0x6c
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	ffff0000 	.word	0xffff0000

08005010 <arm_avepool_asym_uint8_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, int16_t * bufferA, uint8_t * Im_out)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08e      	sub	sp, #56	@ 0x38
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	4608      	mov	r0, r1
 800501a:	4611      	mov	r1, r2
 800501c:	461a      	mov	r2, r3
 800501e:	4603      	mov	r3, r0
 8005020:	817b      	strh	r3, [r7, #10]
 8005022:	460b      	mov	r3, r1
 8005024:	813b      	strh	r3, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

	int16_t   *buffer = (int16_t *) bufferA;
 800502a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800502c:	61fb      	str	r3, [r7, #28]
    int16_t   i_x, i_y;
    int16_t   count = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	867b      	strh	r3, [r7, #50]	@ 0x32

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8005032:	2300      	movs	r3, #0
 8005034:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005036:	e0a4      	b.n	8005182 <arm_avepool_asym_uint8_HWC+0x172>
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 8005038:	2300      	movs	r3, #0
 800503a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800503c:	e094      	b.n	8005168 <arm_avepool_asym_uint8_HWC+0x158>
        {
            /* for each output pixel */
        	uint8_t *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 800503e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8005042:	897a      	ldrh	r2, [r7, #10]
 8005044:	fb03 f202 	mul.w	r2, r3, r2
 8005048:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800504c:	4413      	add	r3, r2
 800504e:	893a      	ldrh	r2, [r7, #8]
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	461a      	mov	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
        	uint8_t *win_start;
        	uint8_t *win_stop;
            if (i_x * stride - padding < 0)
 800505c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005060:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8005064:	fb03 f202 	mul.w	r2, r3, r2
 8005068:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	da02      	bge.n	8005078 <arm_avepool_asym_uint8_HWC+0x68>
            {
                win_start = target;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005076:	e015      	b.n	80050a4 <arm_avepool_asym_uint8_HWC+0x94>
            } else
            {
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 8005078:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800507c:	897a      	ldrh	r2, [r7, #10]
 800507e:	fb03 f202 	mul.w	r2, r3, r2
 8005082:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005086:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	441a      	add	r2, r3
 8005090:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	893a      	ldrh	r2, [r7, #8]
 8005098:	fb02 f303 	mul.w	r3, r2, r3
 800509c:	461a      	mov	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 80050a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80050a8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80050ac:	fb03 f202 	mul.w	r2, r3, r2
 80050b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80050b4:	1ad2      	subs	r2, r2, r3
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	441a      	add	r2, r3
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	429a      	cmp	r2, r3
 80050be:	db0e      	blt.n	80050de <arm_avepool_asym_uint8_HWC+0xce>
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 80050c0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80050c4:	897a      	ldrh	r2, [r7, #10]
 80050c6:	fb03 f202 	mul.w	r2, r3, r2
 80050ca:	897b      	ldrh	r3, [r7, #10]
 80050cc:	4413      	add	r3, r2
 80050ce:	893a      	ldrh	r2, [r7, #8]
 80050d0:	fb02 f303 	mul.w	r3, r2, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050dc:	e017      	b.n	800510e <arm_avepool_asym_uint8_HWC+0xfe>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 80050de:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80050e2:	897a      	ldrh	r2, [r7, #10]
 80050e4:	fb03 f202 	mul.w	r2, r3, r2
 80050e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80050ec:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	441a      	add	r2, r3
 80050f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	4413      	add	r3, r2
 8005100:	893a      	ldrh	r2, [r7, #8]
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            /* first step is to copy over initial data */
            arm_asym_uint8_to_int16_no_shift(win_start, 0, buffer, ch_im_in);
 800510e:	893b      	ldrh	r3, [r7, #8]
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	2100      	movs	r1, #0
 8005114:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005116:	f7ff fd49 	bl	8004bac <arm_asym_uint8_to_int16_no_shift>
            count = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* start the max operation from the second part */
            win_start += ch_im_in;
 800511e:	893b      	ldrh	r3, [r7, #8]
 8005120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005122:	4413      	add	r3, r2
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
            for (; win_start < win_stop; win_start += ch_im_in)
 8005126:	e00f      	b.n	8005148 <arm_avepool_asym_uint8_HWC+0x138>
            {
                accumulate_uint8_to_int16(buffer, win_start, ch_im_in);
 8005128:	893b      	ldrh	r3, [r7, #8]
 800512a:	461a      	mov	r2, r3
 800512c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800512e:	69f8      	ldr	r0, [r7, #28]
 8005130:	f7ff fece 	bl	8004ed0 <accumulate_uint8_to_int16>
                count++;
 8005134:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005138:	b29b      	uxth	r3, r3
 800513a:	3301      	adds	r3, #1
 800513c:	b29b      	uxth	r3, r3
 800513e:	867b      	strh	r3, [r7, #50]	@ 0x32
            for (; win_start < win_stop; win_start += ch_im_in)
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005144:	4413      	add	r3, r2
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	429a      	cmp	r2, r3
 800514e:	d3eb      	bcc.n	8005128 <arm_avepool_asym_uint8_HWC+0x118>
            }
            buffer_scale_back_int16_to_uint8(buffer, target, ch_im_in, count);
 8005150:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005152:	893a      	ldrh	r2, [r7, #8]
 8005154:	6979      	ldr	r1, [r7, #20]
 8005156:	69f8      	ldr	r0, [r7, #28]
 8005158:	f7ff fe8f 	bl	8004e7a <buffer_scale_back_int16_to_uint8>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 800515c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005160:	b29b      	uxth	r3, r3
 8005162:	3301      	adds	r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005168:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 800516c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005170:	429a      	cmp	r2, r3
 8005172:	f6ff af64 	blt.w	800503e <arm_avepool_asym_uint8_HWC+0x2e>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8005176:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800517a:	b29b      	uxth	r3, r3
 800517c:	3301      	adds	r3, #1
 800517e:	b29b      	uxth	r3, r3
 8005180:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005182:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	429a      	cmp	r2, r3
 800518a:	f6ff af55 	blt.w	8005038 <arm_avepool_asym_uint8_HWC+0x28>
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 800518e:	2300      	movs	r3, #0
 8005190:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005192:	e09f      	b.n	80052d4 <arm_avepool_asym_uint8_HWC+0x2c4>
    {
        /* for each output row */
    	uint8_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 8005194:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8005198:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800519c:	fb02 f303 	mul.w	r3, r2, r3
 80051a0:	893a      	ldrh	r2, [r7, #8]
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051aa:	4413      	add	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
    	uint8_t     *row_start;
        uint8_t     *row_end;
        /* setting the starting row */
        if (i_y * stride - padding < 0)
 80051ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80051b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80051b6:	fb03 f202 	mul.w	r2, r3, r2
 80051ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	da02      	bge.n	80051ca <arm_avepool_asym_uint8_HWC+0x1ba>
        {
            row_start = Im_in;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c8:	e012      	b.n	80051f0 <arm_avepool_asym_uint8_HWC+0x1e0>
        } else
        {
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 80051ca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80051ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80051d2:	fb03 f202 	mul.w	r2, r3, r2
 80051d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	897a      	ldrh	r2, [r7, #10]
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	893a      	ldrh	r2, [r7, #8]
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 80051f0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80051f4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80051f8:	fb03 f202 	mul.w	r2, r3, r2
 80051fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005200:	1ad2      	subs	r2, r2, r3
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	441a      	add	r2, r3
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	429a      	cmp	r2, r3
 800520a:	db0b      	blt.n	8005224 <arm_avepool_asym_uint8_HWC+0x214>
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 800520c:	897b      	ldrh	r3, [r7, #10]
 800520e:	897a      	ldrh	r2, [r7, #10]
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	893a      	ldrh	r2, [r7, #8]
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	e014      	b.n	800524e <arm_avepool_asym_uint8_HWC+0x23e>
        } else
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 8005224:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8005228:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800522c:	fb03 f202 	mul.w	r2, r3, r2
 8005230:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005234:	1ad2      	subs	r2, r2, r3
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	4413      	add	r3, r2
 800523a:	897a      	ldrh	r2, [r7, #10]
 800523c:	fb02 f303 	mul.w	r3, r2, r3
 8005240:	893a      	ldrh	r2, [r7, #8]
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	623b      	str	r3, [r7, #32]
        }

        /* copy over the first row */
        arm_asym_uint8_to_int16_no_shift(row_start, 0, buffer, dim_im_out * ch_im_in);
 800524e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005252:	893a      	ldrh	r2, [r7, #8]
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	2100      	movs	r1, #0
 800525c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800525e:	f7ff fca5 	bl	8004bac <arm_asym_uint8_to_int16_no_shift>
        count = 1;
 8005262:	2301      	movs	r3, #1
 8005264:	867b      	strh	r3, [r7, #50]	@ 0x32

        /* move over to next row */
        row_start += ch_im_in * dim_im_in;
 8005266:	893b      	ldrh	r3, [r7, #8]
 8005268:	897a      	ldrh	r2, [r7, #10]
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	461a      	mov	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	4413      	add	r3, r2
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8005276:	e018      	b.n	80052aa <arm_avepool_asym_uint8_HWC+0x29a>
        {
        	accumulate_uint8_to_int16(buffer, row_start, dim_im_out * ch_im_in);
 8005278:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800527c:	893b      	ldrh	r3, [r7, #8]
 800527e:	fb12 f303 	smulbb	r3, r2, r3
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005288:	69f8      	ldr	r0, [r7, #28]
 800528a:	f7ff fe21 	bl	8004ed0 <accumulate_uint8_to_int16>
            count++;
 800528e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005292:	b29b      	uxth	r3, r3
 8005294:	3301      	adds	r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	867b      	strh	r3, [r7, #50]	@ 0x32
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	893a      	ldrh	r2, [r7, #8]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	4413      	add	r3, r2
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d3e2      	bcc.n	8005278 <arm_avepool_asym_uint8_HWC+0x268>
        }
        buffer_scale_back_int16_to_uint8(buffer, target, dim_im_out * ch_im_in, count);
 80052b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	fb12 f303 	smulbb	r3, r2, r3
 80052bc:	b29a      	uxth	r2, r3
 80052be:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80052c0:	69b9      	ldr	r1, [r7, #24]
 80052c2:	69f8      	ldr	r0, [r7, #28]
 80052c4:	f7ff fdd9 	bl	8004e7a <buffer_scale_back_int16_to_uint8>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 80052c8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80052d4:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 80052d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80052dc:	429a      	cmp	r2, r3
 80052de:	f6ff af59 	blt.w	8005194 <arm_avepool_asym_uint8_HWC+0x184>
#else
#error "Cortex-M0 and Cortex-M3 not supported"
/* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
#endif                          /* ARM_MATH_DSP */

}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	3738      	adds	r7, #56	@ 0x38
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052f2:	2003      	movs	r0, #3
 80052f4:	f000 f982 	bl	80055fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052f8:	f001 ff3a 	bl	8007170 <HAL_RCC_GetSysClockFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <HAL_Init+0x68>)
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	4913      	ldr	r1, [pc, #76]	@ (8005358 <HAL_Init+0x6c>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005316:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <HAL_Init+0x68>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	4a0e      	ldr	r2, [pc, #56]	@ (8005358 <HAL_Init+0x6c>)
 8005320:	5cd3      	ldrb	r3, [r2, r3]
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	4a0b      	ldr	r2, [pc, #44]	@ (800535c <HAL_Init+0x70>)
 800532e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005330:	4a0b      	ldr	r2, [pc, #44]	@ (8005360 <HAL_Init+0x74>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005336:	2000      	movs	r0, #0
 8005338:	f000 f814 	bl	8005364 <HAL_InitTick>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e002      	b.n	800534c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005346:	f7fc fd47 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	58024400 	.word	0x58024400
 8005358:	0809968c 	.word	0x0809968c
 800535c:	24000010 	.word	0x24000010
 8005360:	2400000c 	.word	0x2400000c

08005364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800536c:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <HAL_InitTick+0x60>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e021      	b.n	80053bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005378:	4b13      	ldr	r3, [pc, #76]	@ (80053c8 <HAL_InitTick+0x64>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <HAL_InitTick+0x60>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	4619      	mov	r1, r3
 8005382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005386:	fbb3 f3f1 	udiv	r3, r3, r1
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f959 	bl	8005646 <HAL_SYSTICK_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e00e      	b.n	80053bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d80a      	bhi.n	80053ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053a4:	2200      	movs	r2, #0
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	f000 f931 	bl	8005612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053b0:	4a06      	ldr	r2, [pc, #24]	@ (80053cc <HAL_InitTick+0x68>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	24000018 	.word	0x24000018
 80053c8:	2400000c 	.word	0x2400000c
 80053cc:	24000014 	.word	0x24000014

080053d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053d4:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <HAL_IncTick+0x20>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <HAL_IncTick+0x24>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4413      	add	r3, r2
 80053e0:	4a04      	ldr	r2, [pc, #16]	@ (80053f4 <HAL_IncTick+0x24>)
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	24000018 	.word	0x24000018
 80053f4:	24028438 	.word	0x24028438

080053f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return uwTick;
 80053fc:	4b03      	ldr	r3, [pc, #12]	@ (800540c <HAL_GetTick+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	24028438 	.word	0x24028438

08005410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7ff ffee 	bl	80053f8 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d005      	beq.n	8005436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800542a:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <HAL_Delay+0x44>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005436:	bf00      	nop
 8005438:	f7ff ffde 	bl	80053f8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	429a      	cmp	r2, r3
 8005446:	d8f7      	bhi.n	8005438 <HAL_Delay+0x28>
  {
  }
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	24000018 	.word	0x24000018

08005458 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800545c:	4b03      	ldr	r3, [pc, #12]	@ (800546c <HAL_GetREVID+0x14>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	0c1b      	lsrs	r3, r3, #16
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	5c001000 	.word	0x5c001000

08005470 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8005478:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8005480:	4904      	ldr	r1, [pc, #16]	@ (8005494 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	58000400 	.word	0x58000400

08005498 <__NVIC_SetPriorityGrouping>:
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <__NVIC_SetPriorityGrouping+0x40>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054b4:	4013      	ands	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054c0:	4b06      	ldr	r3, [pc, #24]	@ (80054dc <__NVIC_SetPriorityGrouping+0x44>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054c6:	4a04      	ldr	r2, [pc, #16]	@ (80054d8 <__NVIC_SetPriorityGrouping+0x40>)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	60d3      	str	r3, [r2, #12]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	e000ed00 	.word	0xe000ed00
 80054dc:	05fa0000 	.word	0x05fa0000

080054e0 <__NVIC_GetPriorityGrouping>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054e4:	4b04      	ldr	r3, [pc, #16]	@ (80054f8 <__NVIC_GetPriorityGrouping+0x18>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f003 0307 	and.w	r3, r3, #7
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	e000ed00 	.word	0xe000ed00

080054fc <__NVIC_SetPriority>:
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	6039      	str	r1, [r7, #0]
 8005506:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db0a      	blt.n	8005526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	490c      	ldr	r1, [pc, #48]	@ (8005548 <__NVIC_SetPriority+0x4c>)
 8005516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551a:	0112      	lsls	r2, r2, #4
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	440b      	add	r3, r1
 8005520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005524:	e00a      	b.n	800553c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4908      	ldr	r1, [pc, #32]	@ (800554c <__NVIC_SetPriority+0x50>)
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	3b04      	subs	r3, #4
 8005534:	0112      	lsls	r2, r2, #4
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	440b      	add	r3, r1
 800553a:	761a      	strb	r2, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	e000e100 	.word	0xe000e100
 800554c:	e000ed00 	.word	0xe000ed00

08005550 <NVIC_EncodePriority>:
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	@ 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f1c3 0307 	rsb	r3, r3, #7
 800556a:	2b04      	cmp	r3, #4
 800556c:	bf28      	it	cs
 800556e:	2304      	movcs	r3, #4
 8005570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3304      	adds	r3, #4
 8005576:	2b06      	cmp	r3, #6
 8005578:	d902      	bls.n	8005580 <NVIC_EncodePriority+0x30>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3b03      	subs	r3, #3
 800557e:	e000      	b.n	8005582 <NVIC_EncodePriority+0x32>
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	401a      	ands	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005598:	f04f 31ff 	mov.w	r1, #4294967295
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	43d9      	mvns	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a8:	4313      	orrs	r3, r2
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3724      	adds	r7, #36	@ 0x24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055c8:	d301      	bcc.n	80055ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ca:	2301      	movs	r3, #1
 80055cc:	e00f      	b.n	80055ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ce:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <SysTick_Config+0x40>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055d6:	210f      	movs	r1, #15
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	f7ff ff8e 	bl	80054fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <SysTick_Config+0x40>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055e6:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <SysTick_Config+0x40>)
 80055e8:	2207      	movs	r2, #7
 80055ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	e000e010 	.word	0xe000e010

080055fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff47 	bl	8005498 <__NVIC_SetPriorityGrouping>
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	4603      	mov	r3, r0
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005620:	f7ff ff5e 	bl	80054e0 <__NVIC_GetPriorityGrouping>
 8005624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f7ff ff90 	bl	8005550 <NVIC_EncodePriority>
 8005630:	4602      	mov	r2, r0
 8005632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff5f 	bl	80054fc <__NVIC_SetPriority>
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ffb2 	bl	80055b8 <SysTick_Config>
 8005654:	4603      	mov	r3, r0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0e3      	b.n	800583a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2223      	movs	r2, #35	@ 0x23
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fc fbc1 	bl	8001e0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568a:	4b6e      	ldr	r3, [pc, #440]	@ (8005844 <HAL_ETH_Init+0x1e4>)
 800568c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005690:	4a6c      	ldr	r2, [pc, #432]	@ (8005844 <HAL_ETH_Init+0x1e4>)
 8005692:	f043 0302 	orr.w	r3, r3, #2
 8005696:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800569a:	4b6a      	ldr	r3, [pc, #424]	@ (8005844 <HAL_ETH_Init+0x1e4>)
 800569c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	7a1b      	ldrb	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80056b0:	2000      	movs	r0, #0
 80056b2:	f7ff fedd 	bl	8005470 <HAL_SYSCFG_ETHInterfaceSelect>
 80056b6:	e003      	b.n	80056c0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80056b8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80056bc:	f7ff fed8 	bl	8005470 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80056c0:	4b61      	ldr	r3, [pc, #388]	@ (8005848 <HAL_ETH_Init+0x1e8>)
 80056c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056dc:	f7ff fe8c 	bl	80053f8 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80056e2:	e011      	b.n	8005708 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80056e4:	f7ff fe88 	bl	80053f8 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80056f2:	d909      	bls.n	8005708 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2204      	movs	r2, #4
 80056f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	22e0      	movs	r2, #224	@ 0xe0
 8005700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e098      	b.n	800583a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e4      	bne.n	80056e4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f89e 	bl	800585c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005720:	f001 fea0 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 8005724:	4603      	mov	r3, r0
 8005726:	4a49      	ldr	r2, [pc, #292]	@ (800584c <HAL_ETH_Init+0x1ec>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	0c9a      	lsrs	r2, r3, #18
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3a01      	subs	r2, #1
 8005734:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fa81 	bl	8005c40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005746:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800574a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005756:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800575a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	22e0      	movs	r2, #224	@ 0xe0
 8005776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e05d      	b.n	800583a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005786:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800578a:	4b31      	ldr	r3, [pc, #196]	@ (8005850 <HAL_ETH_Init+0x1f0>)
 800578c:	4013      	ands	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6952      	ldr	r2, [r2, #20]
 8005792:	0051      	lsls	r1, r2, #1
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	430b      	orrs	r3, r1
 800579a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800579e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fae9 	bl	8005d7a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fb2f 	bl	8005e0c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	3305      	adds	r3, #5
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	021a      	lsls	r2, r3, #8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	3304      	adds	r3, #4
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	4619      	mov	r1, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	3303      	adds	r3, #3
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	061a      	lsls	r2, r3, #24
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	3302      	adds	r3, #2
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	3301      	adds	r3, #1
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80057ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80057fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80057fc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <HAL_ETH_Init+0x1f4>)
 800580e:	430b      	orrs	r3, r1
 8005810:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <HAL_ETH_Init+0x1f8>)
 8005822:	430b      	orrs	r3, r1
 8005824:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2210      	movs	r2, #16
 8005834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	58024400 	.word	0x58024400
 8005848:	58000400 	.word	0x58000400
 800584c:	431bde83 	.word	0x431bde83
 8005850:	ffff8001 	.word	0xffff8001
 8005854:	0c020060 	.word	0x0c020060
 8005858:	0c20c000 	.word	0x0c20c000

0800585c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800586c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005874:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005876:	f001 fdf5 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 800587a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4a1a      	ldr	r2, [pc, #104]	@ (80058e8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d804      	bhi.n	800588e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e022      	b.n	80058d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4a16      	ldr	r2, [pc, #88]	@ (80058ec <HAL_ETH_SetMDIOClockRange+0x90>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d204      	bcs.n	80058a0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e019      	b.n	80058d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4a13      	ldr	r2, [pc, #76]	@ (80058f0 <HAL_ETH_SetMDIOClockRange+0x94>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d915      	bls.n	80058d4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4a12      	ldr	r2, [pc, #72]	@ (80058f4 <HAL_ETH_SetMDIOClockRange+0x98>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d804      	bhi.n	80058ba <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e00c      	b.n	80058d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4a0e      	ldr	r2, [pc, #56]	@ (80058f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d804      	bhi.n	80058cc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e003      	b.n	80058d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80058d2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	02160ebf 	.word	0x02160ebf
 80058ec:	03938700 	.word	0x03938700
 80058f0:	05f5e0ff 	.word	0x05f5e0ff
 80058f4:	08f0d17f 	.word	0x08f0d17f
 80058f8:	0ee6b27f 	.word	0x0ee6b27f

080058fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800590e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	791b      	ldrb	r3, [r3, #4]
 8005914:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	7b1b      	ldrb	r3, [r3, #12]
 800591c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800591e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	7b5b      	ldrb	r3, [r3, #13]
 8005924:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	7b9b      	ldrb	r3, [r3, #14]
 800592c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800592e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	7bdb      	ldrb	r3, [r3, #15]
 8005934:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005936:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	7c12      	ldrb	r2, [r2, #16]
 800593c:	2a00      	cmp	r2, #0
 800593e:	d102      	bne.n	8005946 <ETH_SetMACConfig+0x4a>
 8005940:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005944:	e000      	b.n	8005948 <ETH_SetMACConfig+0x4c>
 8005946:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005948:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	7c52      	ldrb	r2, [r2, #17]
 800594e:	2a00      	cmp	r2, #0
 8005950:	d102      	bne.n	8005958 <ETH_SetMACConfig+0x5c>
 8005952:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005956:	e000      	b.n	800595a <ETH_SetMACConfig+0x5e>
 8005958:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800595a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	7c9b      	ldrb	r3, [r3, #18]
 8005960:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005962:	431a      	orrs	r2, r3
               macconf->Speed |
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005968:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800596e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	7f1b      	ldrb	r3, [r3, #28]
 8005974:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	7f5b      	ldrb	r3, [r3, #29]
 800597c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800597e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	7f92      	ldrb	r2, [r2, #30]
 8005984:	2a00      	cmp	r2, #0
 8005986:	d102      	bne.n	800598e <ETH_SetMACConfig+0x92>
 8005988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800598c:	e000      	b.n	8005990 <ETH_SetMACConfig+0x94>
 800598e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005990:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	7fdb      	ldrb	r3, [r3, #31]
 8005996:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005998:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	d102      	bne.n	80059aa <ETH_SetMACConfig+0xae>
 80059a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059a8:	e000      	b.n	80059ac <ETH_SetMACConfig+0xb0>
 80059aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80059ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80059b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80059bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4b56      	ldr	r3, [pc, #344]	@ (8005b28 <ETH_SetMACConfig+0x22c>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	68f9      	ldr	r1, [r7, #12]
 80059d6:	430b      	orrs	r3, r1
 80059d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80059e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80059f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80059fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	d102      	bne.n	8005a0e <ETH_SetMACConfig+0x112>
 8005a08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005a0c:	e000      	b.n	8005a10 <ETH_SetMACConfig+0x114>
 8005a0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005a10:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4b42      	ldr	r3, [pc, #264]	@ (8005b2c <ETH_SetMACConfig+0x230>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	4b3a      	ldr	r3, [pc, #232]	@ (8005b30 <ETH_SetMACConfig+0x234>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005a5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d101      	bne.n	8005a6e <ETH_SetMACConfig+0x172>
 8005a6a:	2280      	movs	r2, #128	@ 0x80
 8005a6c:	e000      	b.n	8005a70 <ETH_SetMACConfig+0x174>
 8005a6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005a70:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a82:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8005a86:	4013      	ands	r3, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	68f9      	ldr	r1, [r7, #12]
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005a98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005aa0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aae:	f023 0103 	bic.w	r1, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005ac6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	d101      	bne.n	8005aea <ETH_SetMACConfig+0x1ee>
 8005ae6:	2240      	movs	r2, #64	@ 0x40
 8005ae8:	e000      	b.n	8005aec <ETH_SetMACConfig+0x1f0>
 8005aea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005aec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005af4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005afe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005b0c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	00048083 	.word	0x00048083
 8005b2c:	c0f88000 	.word	0xc0f88000
 8005b30:	fffffef0 	.word	0xfffffef0

08005b34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b38      	ldr	r3, [pc, #224]	@ (8005c2c <ETH_SetDMAConfig+0xf8>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	6811      	ldr	r1, [r2, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	430b      	orrs	r3, r1
 8005b56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b5a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	791b      	ldrb	r3, [r3, #4]
 8005b60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005b66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	7b1b      	ldrb	r3, [r3, #12]
 8005b6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c30 <ETH_SetDMAConfig+0xfc>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b8c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	7b5b      	ldrb	r3, [r3, #13]
 8005b92:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005ba8:	4b22      	ldr	r3, [pc, #136]	@ (8005c34 <ETH_SetDMAConfig+0x100>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	68f9      	ldr	r1, [r7, #12]
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bb8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	7d1b      	ldrb	r3, [r3, #20]
 8005bc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005bc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	7f5b      	ldrb	r3, [r3, #29]
 8005bcc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bda:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005bde:	4b16      	ldr	r3, [pc, #88]	@ (8005c38 <ETH_SetDMAConfig+0x104>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	430b      	orrs	r3, r1
 8005bea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	7f1b      	ldrb	r3, [r3, #28]
 8005bf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c08:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <ETH_SetDMAConfig+0x108>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	68f9      	ldr	r1, [r7, #12]
 8005c16:	430b      	orrs	r3, r1
 8005c18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c1c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	ffff87fd 	.word	0xffff87fd
 8005c30:	ffff2ffe 	.word	0xffff2ffe
 8005c34:	fffec000 	.word	0xfffec000
 8005c38:	ffc0efef 	.word	0xffc0efef
 8005c3c:	7fc0ffff 	.word	0x7fc0ffff

08005c40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b0a4      	sub	sp, #144	@ 0x90
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c80:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005c98:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005c9c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005cd8:	2320      	movs	r3, #32
 8005cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005cea:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005cf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cf4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fde6 	bl	80058fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005d34:	2301      	movs	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005d4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005d4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005d54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005d58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005d60:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fee1 	bl	8005b34 <ETH_SetDMAConfig>
}
 8005d72:	bf00      	nop
 8005d74:	3790      	adds	r7, #144	@ 0x90
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e01d      	b.n	8005dc4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68d9      	ldr	r1, [r3, #12]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4413      	add	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	440b      	add	r3, r1
 8005d98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2200      	movs	r2, #0
 8005daa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	3206      	adds	r2, #6
 8005dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d9de      	bls.n	8005d88 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2303      	movs	r3, #3
 8005ddc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dfc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e023      	b.n	8005e62 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6919      	ldr	r1, [r3, #16]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	440b      	add	r3, r1
 8005e2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2200      	movs	r2, #0
 8005e36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2200      	movs	r2, #0
 8005e42:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	3212      	adds	r2, #18
 8005e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d9d8      	bls.n	8005e1a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e8e:	461a      	mov	r2, r3
 8005e90:	2303      	movs	r3, #3
 8005e92:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	@ 0x24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ed6:	4b89      	ldr	r3, [pc, #548]	@ (80060fc <HAL_GPIO_Init+0x234>)
 8005ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eda:	e194      	b.n	8006206 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee8:	4013      	ands	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8186 	beq.w	8006200 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d005      	beq.n	8005f0c <HAL_GPIO_Init+0x44>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d130      	bne.n	8005f6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	2203      	movs	r2, #3
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	4013      	ands	r3, r2
 8005f22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f42:	2201      	movs	r2, #1
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	091b      	lsrs	r3, r3, #4
 8005f58:	f003 0201 	and.w	r2, r3, #1
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d017      	beq.n	8005faa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	2203      	movs	r2, #3
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d123      	bne.n	8005ffe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	08da      	lsrs	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3208      	adds	r2, #8
 8005fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	220f      	movs	r2, #15
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	08da      	lsrs	r2, r3, #3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3208      	adds	r2, #8
 8005ff8:	69b9      	ldr	r1, [r7, #24]
 8005ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	2203      	movs	r2, #3
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	43db      	mvns	r3, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4013      	ands	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 0203 	and.w	r2, r3, #3
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4313      	orrs	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80e0 	beq.w	8006200 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006040:	4b2f      	ldr	r3, [pc, #188]	@ (8006100 <HAL_GPIO_Init+0x238>)
 8006042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006046:	4a2e      	ldr	r2, [pc, #184]	@ (8006100 <HAL_GPIO_Init+0x238>)
 8006048:	f043 0302 	orr.w	r3, r3, #2
 800604c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006050:	4b2b      	ldr	r3, [pc, #172]	@ (8006100 <HAL_GPIO_Init+0x238>)
 8006052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800605e:	4a29      	ldr	r2, [pc, #164]	@ (8006104 <HAL_GPIO_Init+0x23c>)
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	3302      	adds	r3, #2
 8006066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	220f      	movs	r2, #15
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43db      	mvns	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a20      	ldr	r2, [pc, #128]	@ (8006108 <HAL_GPIO_Init+0x240>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d052      	beq.n	8006130 <HAL_GPIO_Init+0x268>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1f      	ldr	r2, [pc, #124]	@ (800610c <HAL_GPIO_Init+0x244>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d031      	beq.n	80060f6 <HAL_GPIO_Init+0x22e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1e      	ldr	r2, [pc, #120]	@ (8006110 <HAL_GPIO_Init+0x248>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02b      	beq.n	80060f2 <HAL_GPIO_Init+0x22a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1d      	ldr	r2, [pc, #116]	@ (8006114 <HAL_GPIO_Init+0x24c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d025      	beq.n	80060ee <HAL_GPIO_Init+0x226>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006118 <HAL_GPIO_Init+0x250>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01f      	beq.n	80060ea <HAL_GPIO_Init+0x222>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1b      	ldr	r2, [pc, #108]	@ (800611c <HAL_GPIO_Init+0x254>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d019      	beq.n	80060e6 <HAL_GPIO_Init+0x21e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006120 <HAL_GPIO_Init+0x258>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_GPIO_Init+0x21a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a19      	ldr	r2, [pc, #100]	@ (8006124 <HAL_GPIO_Init+0x25c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00d      	beq.n	80060de <HAL_GPIO_Init+0x216>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <HAL_GPIO_Init+0x260>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d007      	beq.n	80060da <HAL_GPIO_Init+0x212>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a17      	ldr	r2, [pc, #92]	@ (800612c <HAL_GPIO_Init+0x264>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d101      	bne.n	80060d6 <HAL_GPIO_Init+0x20e>
 80060d2:	2309      	movs	r3, #9
 80060d4:	e02d      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060d6:	230a      	movs	r3, #10
 80060d8:	e02b      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060da:	2308      	movs	r3, #8
 80060dc:	e029      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060de:	2307      	movs	r3, #7
 80060e0:	e027      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060e2:	2306      	movs	r3, #6
 80060e4:	e025      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060e6:	2305      	movs	r3, #5
 80060e8:	e023      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060ea:	2304      	movs	r3, #4
 80060ec:	e021      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060ee:	2303      	movs	r3, #3
 80060f0:	e01f      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e01d      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e01b      	b.n	8006132 <HAL_GPIO_Init+0x26a>
 80060fa:	bf00      	nop
 80060fc:	58000080 	.word	0x58000080
 8006100:	58024400 	.word	0x58024400
 8006104:	58000400 	.word	0x58000400
 8006108:	58020000 	.word	0x58020000
 800610c:	58020400 	.word	0x58020400
 8006110:	58020800 	.word	0x58020800
 8006114:	58020c00 	.word	0x58020c00
 8006118:	58021000 	.word	0x58021000
 800611c:	58021400 	.word	0x58021400
 8006120:	58021800 	.word	0x58021800
 8006124:	58021c00 	.word	0x58021c00
 8006128:	58022000 	.word	0x58022000
 800612c:	58022400 	.word	0x58022400
 8006130:	2300      	movs	r3, #0
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	f002 0203 	and.w	r2, r2, #3
 8006138:	0092      	lsls	r2, r2, #2
 800613a:	4093      	lsls	r3, r2
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006142:	4938      	ldr	r1, [pc, #224]	@ (8006224 <HAL_GPIO_Init+0x35c>)
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	3302      	adds	r3, #2
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	43db      	mvns	r3, r3
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	4013      	ands	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006176:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800617e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	43db      	mvns	r3, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4013      	ands	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80061a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4013      	ands	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	43db      	mvns	r3, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	4013      	ands	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	3301      	adds	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	f47f ae63 	bne.w	8005edc <HAL_GPIO_Init+0x14>
  }
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	3724      	adds	r7, #36	@ 0x24
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	58000400 	.word	0x58000400

08006228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]
 8006234:	4613      	mov	r3, r2
 8006236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006238:	787b      	ldrb	r3, [r7, #1]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006244:	e003      	b.n	800624e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006246:	887b      	ldrh	r3, [r7, #2]
 8006248:	041a      	lsls	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	619a      	str	r2, [r3, #24]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af02      	add	r7, sp, #8
 8006260:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0fe      	b.n	800646a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fb fefb 	bl	800207c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2203      	movs	r2, #3
 800628a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f004 f94a 	bl	800a52c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7c1a      	ldrb	r2, [r3, #16]
 80062a0:	f88d 2000 	strb.w	r2, [sp]
 80062a4:	3304      	adds	r3, #4
 80062a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a8:	f004 f8ce 	bl	800a448 <USB_CoreInit>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0d5      	b.n	800646a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f004 f942 	bl	800a54e <USB_SetCurrentMode>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0c6      	b.n	800646a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e04a      	b.n	8006378 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062e2:	7bfa      	ldrb	r2, [r7, #15]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	3315      	adds	r3, #21
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062f6:	7bfa      	ldrb	r2, [r7, #15]
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	3314      	adds	r3, #20
 8006306:	7bfa      	ldrb	r2, [r7, #15]
 8006308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800630a:	7bfa      	ldrb	r2, [r7, #15]
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	b298      	uxth	r0, r3
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	332e      	adds	r3, #46	@ 0x2e
 800631e:	4602      	mov	r2, r0
 8006320:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006322:	7bfa      	ldrb	r2, [r7, #15]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	3318      	adds	r3, #24
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006336:	7bfa      	ldrb	r2, [r7, #15]
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	4613      	mov	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	440b      	add	r3, r1
 8006344:	331c      	adds	r3, #28
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800634a:	7bfa      	ldrb	r2, [r7, #15]
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3320      	adds	r3, #32
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	3324      	adds	r3, #36	@ 0x24
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	3301      	adds	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	791b      	ldrb	r3, [r3, #4]
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	429a      	cmp	r2, r3
 8006380:	d3af      	bcc.n	80062e2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]
 8006386:	e044      	b.n	8006412 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006388:	7bfa      	ldrb	r2, [r7, #15]
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800639e:	7bfa      	ldrb	r2, [r7, #15]
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063b4:	7bfa      	ldrb	r2, [r7, #15]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063ca:	7bfa      	ldrb	r2, [r7, #15]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063e0:	7bfa      	ldrb	r2, [r7, #15]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063f6:	7bfa      	ldrb	r2, [r7, #15]
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	3301      	adds	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	791b      	ldrb	r3, [r3, #4]
 8006416:	7bfa      	ldrb	r2, [r7, #15]
 8006418:	429a      	cmp	r2, r3
 800641a:	d3b5      	bcc.n	8006388 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	7c1a      	ldrb	r2, [r3, #16]
 8006424:	f88d 2000 	strb.w	r2, [sp]
 8006428:	3304      	adds	r3, #4
 800642a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800642c:	f004 f8dc 	bl	800a5e8 <USB_DevInit>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e013      	b.n	800646a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7b1b      	ldrb	r3, [r3, #12]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d102      	bne.n	800645e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f80b 	bl	8006474 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f004 fa97 	bl	800a996 <USB_DevDisconnect>

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064a2:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	10000003 	.word	0x10000003

080064bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064c4:	4b19      	ldr	r3, [pc, #100]	@ (800652c <HAL_PWREx_ConfigSupply+0x70>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d00a      	beq.n	80064e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064d0:	4b16      	ldr	r3, [pc, #88]	@ (800652c <HAL_PWREx_ConfigSupply+0x70>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d001      	beq.n	80064e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e01f      	b.n	8006522 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e01d      	b.n	8006522 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064e6:	4b11      	ldr	r3, [pc, #68]	@ (800652c <HAL_PWREx_ConfigSupply+0x70>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f023 0207 	bic.w	r2, r3, #7
 80064ee:	490f      	ldr	r1, [pc, #60]	@ (800652c <HAL_PWREx_ConfigSupply+0x70>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064f6:	f7fe ff7f 	bl	80053f8 <HAL_GetTick>
 80064fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064fc:	e009      	b.n	8006512 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064fe:	f7fe ff7b 	bl	80053f8 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800650c:	d901      	bls.n	8006512 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e007      	b.n	8006522 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006512:	4b06      	ldr	r3, [pc, #24]	@ (800652c <HAL_PWREx_ConfigSupply+0x70>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800651a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800651e:	d1ee      	bne.n	80064fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	58024800 	.word	0x58024800

08006530 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006534:	4b05      	ldr	r3, [pc, #20]	@ (800654c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4a04      	ldr	r2, [pc, #16]	@ (800654c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800653a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800653e:	60d3      	str	r3, [r2, #12]
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	58024800 	.word	0x58024800

08006550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08c      	sub	sp, #48	@ 0x30
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f000 bc48 	b.w	8006df4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8088 	beq.w	8006682 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006572:	4b99      	ldr	r3, [pc, #612]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800657a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800657c:	4b96      	ldr	r3, [pc, #600]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 800657e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006580:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	2b10      	cmp	r3, #16
 8006586:	d007      	beq.n	8006598 <HAL_RCC_OscConfig+0x48>
 8006588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658a:	2b18      	cmp	r3, #24
 800658c:	d111      	bne.n	80065b2 <HAL_RCC_OscConfig+0x62>
 800658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d10c      	bne.n	80065b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006598:	4b8f      	ldr	r3, [pc, #572]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d06d      	beq.n	8006680 <HAL_RCC_OscConfig+0x130>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d169      	bne.n	8006680 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f000 bc21 	b.w	8006df4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_OscConfig+0x7a>
 80065bc:	4b86      	ldr	r3, [pc, #536]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a85      	ldr	r2, [pc, #532]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e02e      	b.n	8006628 <HAL_RCC_OscConfig+0xd8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10c      	bne.n	80065ec <HAL_RCC_OscConfig+0x9c>
 80065d2:	4b81      	ldr	r3, [pc, #516]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a80      	ldr	r2, [pc, #512]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	4b7e      	ldr	r3, [pc, #504]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a7d      	ldr	r2, [pc, #500]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	e01d      	b.n	8006628 <HAL_RCC_OscConfig+0xd8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065f4:	d10c      	bne.n	8006610 <HAL_RCC_OscConfig+0xc0>
 80065f6:	4b78      	ldr	r3, [pc, #480]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a77      	ldr	r2, [pc, #476]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80065fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4b75      	ldr	r3, [pc, #468]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a74      	ldr	r2, [pc, #464]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e00b      	b.n	8006628 <HAL_RCC_OscConfig+0xd8>
 8006610:	4b71      	ldr	r3, [pc, #452]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a70      	ldr	r2, [pc, #448]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4b6e      	ldr	r3, [pc, #440]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6d      	ldr	r2, [pc, #436]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fe fee2 	bl	80053f8 <HAL_GetTick>
 8006634:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006638:	f7fe fede 	bl	80053f8 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	@ 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e3d4      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800664a:	4b63      	ldr	r3, [pc, #396]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0f0      	beq.n	8006638 <HAL_RCC_OscConfig+0xe8>
 8006656:	e014      	b.n	8006682 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fe fece 	bl	80053f8 <HAL_GetTick>
 800665c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006660:	f7fe feca 	bl	80053f8 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	@ 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e3c0      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006672:	4b59      	ldr	r3, [pc, #356]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x110>
 800667e:	e000      	b.n	8006682 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80ca 	beq.w	8006824 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006690:	4b51      	ldr	r3, [pc, #324]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006698:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800669a:	4b4f      	ldr	r3, [pc, #316]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <HAL_RCC_OscConfig+0x166>
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	2b18      	cmp	r3, #24
 80066aa:	d156      	bne.n	800675a <HAL_RCC_OscConfig+0x20a>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d151      	bne.n	800675a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b6:	4b48      	ldr	r3, [pc, #288]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <HAL_RCC_OscConfig+0x17e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e392      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066ce:	4b42      	ldr	r3, [pc, #264]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 0219 	bic.w	r2, r3, #25
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	493f      	ldr	r1, [pc, #252]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fe fe8a 	bl	80053f8 <HAL_GetTick>
 80066e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fe fe86 	bl	80053f8 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e37c      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066fa:	4b37      	ldr	r3, [pc, #220]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	f7fe fea7 	bl	8005458 <HAL_GetREVID>
 800670a:	4603      	mov	r3, r0
 800670c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006710:	4293      	cmp	r3, r2
 8006712:	d817      	bhi.n	8006744 <HAL_RCC_OscConfig+0x1f4>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b40      	cmp	r3, #64	@ 0x40
 800671a:	d108      	bne.n	800672e <HAL_RCC_OscConfig+0x1de>
 800671c:	4b2e      	ldr	r3, [pc, #184]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006724:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800672a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800672c:	e07a      	b.n	8006824 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672e:	4b2a      	ldr	r3, [pc, #168]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	031b      	lsls	r3, r3, #12
 800673c:	4926      	ldr	r1, [pc, #152]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 800673e:	4313      	orrs	r3, r2
 8006740:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006742:	e06f      	b.n	8006824 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006744:	4b24      	ldr	r3, [pc, #144]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	4921      	ldr	r1, [pc, #132]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006758:	e064      	b.n	8006824 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d047      	beq.n	80067f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006762:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 0219 	bic.w	r2, r3, #25
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	491a      	ldr	r1, [pc, #104]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fe fe40 	bl	80053f8 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677c:	f7fe fe3c 	bl	80053f8 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e332      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800678e:	4b12      	ldr	r3, [pc, #72]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800679a:	f7fe fe5d 	bl	8005458 <HAL_GetREVID>
 800679e:	4603      	mov	r3, r0
 80067a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d819      	bhi.n	80067dc <HAL_RCC_OscConfig+0x28c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b40      	cmp	r3, #64	@ 0x40
 80067ae:	d108      	bne.n	80067c2 <HAL_RCC_OscConfig+0x272>
 80067b0:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80067b8:	4a07      	ldr	r2, [pc, #28]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80067ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067be:	6053      	str	r3, [r2, #4]
 80067c0:	e030      	b.n	8006824 <HAL_RCC_OscConfig+0x2d4>
 80067c2:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	031b      	lsls	r3, r3, #12
 80067d0:	4901      	ldr	r1, [pc, #4]	@ (80067d8 <HAL_RCC_OscConfig+0x288>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	604b      	str	r3, [r1, #4]
 80067d6:	e025      	b.n	8006824 <HAL_RCC_OscConfig+0x2d4>
 80067d8:	58024400 	.word	0x58024400
 80067dc:	4b9a      	ldr	r3, [pc, #616]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	4997      	ldr	r1, [pc, #604]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	604b      	str	r3, [r1, #4]
 80067f0:	e018      	b.n	8006824 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067f2:	4b95      	ldr	r3, [pc, #596]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a94      	ldr	r2, [pc, #592]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fe fdfb 	bl	80053f8 <HAL_GetTick>
 8006802:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006806:	f7fe fdf7 	bl	80053f8 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e2ed      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006818:	4b8b      	ldr	r3, [pc, #556]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f0      	bne.n	8006806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80a9 	beq.w	8006984 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006832:	4b85      	ldr	r3, [pc, #532]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800683a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800683c:	4b82      	ldr	r3, [pc, #520]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d007      	beq.n	8006858 <HAL_RCC_OscConfig+0x308>
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b18      	cmp	r3, #24
 800684c:	d13a      	bne.n	80068c4 <HAL_RCC_OscConfig+0x374>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d135      	bne.n	80068c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006858:	4b7b      	ldr	r3, [pc, #492]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_RCC_OscConfig+0x320>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	2b80      	cmp	r3, #128	@ 0x80
 800686a:	d001      	beq.n	8006870 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e2c1      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006870:	f7fe fdf2 	bl	8005458 <HAL_GetREVID>
 8006874:	4603      	mov	r3, r0
 8006876:	f241 0203 	movw	r2, #4099	@ 0x1003
 800687a:	4293      	cmp	r3, r2
 800687c:	d817      	bhi.n	80068ae <HAL_RCC_OscConfig+0x35e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	2b20      	cmp	r3, #32
 8006884:	d108      	bne.n	8006898 <HAL_RCC_OscConfig+0x348>
 8006886:	4b70      	ldr	r3, [pc, #448]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800688e:	4a6e      	ldr	r2, [pc, #440]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006890:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006894:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006896:	e075      	b.n	8006984 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006898:	4b6b      	ldr	r3, [pc, #428]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	069b      	lsls	r3, r3, #26
 80068a6:	4968      	ldr	r1, [pc, #416]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068ac:	e06a      	b.n	8006984 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068ae:	4b66      	ldr	r3, [pc, #408]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	061b      	lsls	r3, r3, #24
 80068bc:	4962      	ldr	r1, [pc, #392]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068c2:	e05f      	b.n	8006984 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d042      	beq.n	8006952 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068cc:	4b5e      	ldr	r3, [pc, #376]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80068d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fe fd8e 	bl	80053f8 <HAL_GetTick>
 80068dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068e0:	f7fe fd8a 	bl	80053f8 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e280      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068f2:	4b55      	ldr	r3, [pc, #340]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068fe:	f7fe fdab 	bl	8005458 <HAL_GetREVID>
 8006902:	4603      	mov	r3, r0
 8006904:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006908:	4293      	cmp	r3, r2
 800690a:	d817      	bhi.n	800693c <HAL_RCC_OscConfig+0x3ec>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	2b20      	cmp	r3, #32
 8006912:	d108      	bne.n	8006926 <HAL_RCC_OscConfig+0x3d6>
 8006914:	4b4c      	ldr	r3, [pc, #304]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800691c:	4a4a      	ldr	r2, [pc, #296]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800691e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006922:	6053      	str	r3, [r2, #4]
 8006924:	e02e      	b.n	8006984 <HAL_RCC_OscConfig+0x434>
 8006926:	4b48      	ldr	r3, [pc, #288]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	069b      	lsls	r3, r3, #26
 8006934:	4944      	ldr	r1, [pc, #272]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006936:	4313      	orrs	r3, r2
 8006938:	604b      	str	r3, [r1, #4]
 800693a:	e023      	b.n	8006984 <HAL_RCC_OscConfig+0x434>
 800693c:	4b42      	ldr	r3, [pc, #264]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	061b      	lsls	r3, r3, #24
 800694a:	493f      	ldr	r1, [pc, #252]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800694c:	4313      	orrs	r3, r2
 800694e:	60cb      	str	r3, [r1, #12]
 8006950:	e018      	b.n	8006984 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006952:	4b3d      	ldr	r3, [pc, #244]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a3c      	ldr	r2, [pc, #240]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006958:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800695c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fe fd4b 	bl	80053f8 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006966:	f7fe fd47 	bl	80053f8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e23d      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006978:	4b33      	ldr	r3, [pc, #204]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f0      	bne.n	8006966 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d036      	beq.n	80069fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d019      	beq.n	80069cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006998:	4b2b      	ldr	r3, [pc, #172]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800699a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800699c:	4a2a      	ldr	r2, [pc, #168]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fe fd28 	bl	80053f8 <HAL_GetTick>
 80069a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ac:	f7fe fd24 	bl	80053f8 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e21a      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069be:	4b22      	ldr	r3, [pc, #136]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80069c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0x45c>
 80069ca:	e018      	b.n	80069fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80069ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d8:	f7fe fd0e 	bl	80053f8 <HAL_GetTick>
 80069dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fe fd0a 	bl	80053f8 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e200      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069f2:	4b15      	ldr	r3, [pc, #84]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 80069f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d039      	beq.n	8006a7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01c      	beq.n	8006a4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a0c      	ldr	r2, [pc, #48]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a1e:	f7fe fceb 	bl	80053f8 <HAL_GetTick>
 8006a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a26:	f7fe fce7 	bl	80053f8 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e1dd      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a38:	4b03      	ldr	r3, [pc, #12]	@ (8006a48 <HAL_RCC_OscConfig+0x4f8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x4d6>
 8006a44:	e01b      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
 8006a46:	bf00      	nop
 8006a48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a4c:	4b9b      	ldr	r3, [pc, #620]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a9a      	ldr	r2, [pc, #616]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a58:	f7fe fcce 	bl	80053f8 <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a60:	f7fe fcca 	bl	80053f8 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e1c0      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a72:	4b92      	ldr	r3, [pc, #584]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8081 	beq.w	8006b8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8006cc0 <HAL_RCC_OscConfig+0x770>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a8b      	ldr	r2, [pc, #556]	@ (8006cc0 <HAL_RCC_OscConfig+0x770>)
 8006a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a98:	f7fe fcae 	bl	80053f8 <HAL_GetTick>
 8006a9c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa0:	f7fe fcaa 	bl	80053f8 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	@ 0x64
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e1a0      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ab2:	4b83      	ldr	r3, [pc, #524]	@ (8006cc0 <HAL_RCC_OscConfig+0x770>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d106      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x584>
 8006ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aca:	4a7c      	ldr	r2, [pc, #496]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad2:	e02d      	b.n	8006b30 <HAL_RCC_OscConfig+0x5e0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10c      	bne.n	8006af6 <HAL_RCC_OscConfig+0x5a6>
 8006adc:	4b77      	ldr	r3, [pc, #476]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae0:	4a76      	ldr	r2, [pc, #472]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006ae2:	f023 0301 	bic.w	r3, r3, #1
 8006ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae8:	4b74      	ldr	r3, [pc, #464]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aec:	4a73      	ldr	r2, [pc, #460]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006aee:	f023 0304 	bic.w	r3, r3, #4
 8006af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af4:	e01c      	b.n	8006b30 <HAL_RCC_OscConfig+0x5e0>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	d10c      	bne.n	8006b18 <HAL_RCC_OscConfig+0x5c8>
 8006afe:	4b6f      	ldr	r3, [pc, #444]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b02:	4a6e      	ldr	r2, [pc, #440]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b04:	f043 0304 	orr.w	r3, r3, #4
 8006b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0e:	4a6b      	ldr	r2, [pc, #428]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b16:	e00b      	b.n	8006b30 <HAL_RCC_OscConfig+0x5e0>
 8006b18:	4b68      	ldr	r3, [pc, #416]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1c:	4a67      	ldr	r2, [pc, #412]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b24:	4b65      	ldr	r3, [pc, #404]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b28:	4a64      	ldr	r2, [pc, #400]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b2a:	f023 0304 	bic.w	r3, r3, #4
 8006b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d015      	beq.n	8006b64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b38:	f7fe fc5e 	bl	80053f8 <HAL_GetTick>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b40:	f7fe fc5a 	bl	80053f8 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e14e      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b56:	4b59      	ldr	r3, [pc, #356]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0ee      	beq.n	8006b40 <HAL_RCC_OscConfig+0x5f0>
 8006b62:	e014      	b.n	8006b8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b64:	f7fe fc48 	bl	80053f8 <HAL_GetTick>
 8006b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b6a:	e00a      	b.n	8006b82 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6c:	f7fe fc44 	bl	80053f8 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e138      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b82:	4b4e      	ldr	r3, [pc, #312]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1ee      	bne.n	8006b6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 812d 	beq.w	8006df2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b98:	4b48      	ldr	r3, [pc, #288]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ba0:	2b18      	cmp	r3, #24
 8006ba2:	f000 80bd 	beq.w	8006d20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	f040 809e 	bne.w	8006cec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb0:	4b42      	ldr	r3, [pc, #264]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a41      	ldr	r2, [pc, #260]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbc:	f7fe fc1c 	bl	80053f8 <HAL_GetTick>
 8006bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7fe fc18 	bl	80053f8 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e10e      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bd6:	4b39      	ldr	r3, [pc, #228]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006be2:	4b36      	ldr	r3, [pc, #216]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006be4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006be6:	4b37      	ldr	r3, [pc, #220]	@ (8006cc4 <HAL_RCC_OscConfig+0x774>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006bf2:	0112      	lsls	r2, r2, #4
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	4931      	ldr	r1, [pc, #196]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c00:	3b01      	subs	r3, #1
 8006c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	025b      	lsls	r3, r3, #9
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c16:	3b01      	subs	r3, #1
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c24:	3b01      	subs	r3, #1
 8006c26:	061b      	lsls	r3, r3, #24
 8006c28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c2c:	4923      	ldr	r1, [pc, #140]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c32:	4b22      	ldr	r3, [pc, #136]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	4a21      	ldr	r2, [pc, #132]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c42:	4b21      	ldr	r3, [pc, #132]	@ (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c4a:	00d2      	lsls	r2, r2, #3
 8006c4c:	491b      	ldr	r1, [pc, #108]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c52:	4b1a      	ldr	r3, [pc, #104]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c56:	f023 020c 	bic.w	r2, r3, #12
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5e:	4917      	ldr	r1, [pc, #92]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c64:	4b15      	ldr	r3, [pc, #84]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	f023 0202 	bic.w	r2, r3, #2
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c70:	4912      	ldr	r1, [pc, #72]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c76:	4b11      	ldr	r3, [pc, #68]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	4a10      	ldr	r2, [pc, #64]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c82:	4b0e      	ldr	r3, [pc, #56]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	4a0d      	ldr	r2, [pc, #52]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c9a:	4b08      	ldr	r3, [pc, #32]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	4a07      	ldr	r2, [pc, #28]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca6:	4b05      	ldr	r3, [pc, #20]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a04      	ldr	r2, [pc, #16]	@ (8006cbc <HAL_RCC_OscConfig+0x76c>)
 8006cac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb2:	f7fe fba1 	bl	80053f8 <HAL_GetTick>
 8006cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cb8:	e011      	b.n	8006cde <HAL_RCC_OscConfig+0x78e>
 8006cba:	bf00      	nop
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	58024800 	.word	0x58024800
 8006cc4:	fffffc0c 	.word	0xfffffc0c
 8006cc8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ccc:	f7fe fb94 	bl	80053f8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e08a      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cde:	4b47      	ldr	r3, [pc, #284]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x77c>
 8006cea:	e082      	b.n	8006df2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cec:	4b43      	ldr	r3, [pc, #268]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a42      	ldr	r2, [pc, #264]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fe fb7e 	bl	80053f8 <HAL_GetTick>
 8006cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d00:	f7fe fb7a 	bl	80053f8 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e070      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d12:	4b3a      	ldr	r3, [pc, #232]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f0      	bne.n	8006d00 <HAL_RCC_OscConfig+0x7b0>
 8006d1e:	e068      	b.n	8006df2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d20:	4b36      	ldr	r3, [pc, #216]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d26:	4b35      	ldr	r3, [pc, #212]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d031      	beq.n	8006d98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f003 0203 	and.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d12a      	bne.n	8006d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d122      	bne.n	8006d98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d11a      	bne.n	8006d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	0a5b      	lsrs	r3, r3, #9
 8006d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d111      	bne.n	8006d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	0c1b      	lsrs	r3, r3, #16
 8006d78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d108      	bne.n	8006d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	0e1b      	lsrs	r3, r3, #24
 8006d8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e02b      	b.n	8006df4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d9c:	4b17      	ldr	r3, [pc, #92]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da0:	08db      	lsrs	r3, r3, #3
 8006da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006da6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d01f      	beq.n	8006df2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006db2:	4b12      	ldr	r3, [pc, #72]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	4a11      	ldr	r2, [pc, #68]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006dbe:	f7fe fb1b 	bl	80053f8 <HAL_GetTick>
 8006dc2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006dc4:	bf00      	nop
 8006dc6:	f7fe fb17 	bl	80053f8 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d0f9      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <HAL_RCC_OscConfig+0x8b0>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006dde:	00d2      	lsls	r2, r2, #3
 8006de0:	4906      	ldr	r1, [pc, #24]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006de6:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	4a04      	ldr	r2, [pc, #16]	@ (8006dfc <HAL_RCC_OscConfig+0x8ac>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3730      	adds	r7, #48	@ 0x30
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	ffff0007 	.word	0xffff0007

08006e04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e19c      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e18:	4b8a      	ldr	r3, [pc, #552]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d910      	bls.n	8006e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b87      	ldr	r3, [pc, #540]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	4985      	ldr	r1, [pc, #532]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e36:	4b83      	ldr	r3, [pc, #524]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d001      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e184      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d010      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	4b7b      	ldr	r3, [pc, #492]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d908      	bls.n	8006e76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e64:	4b78      	ldr	r3, [pc, #480]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	4975      	ldr	r1, [pc, #468]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d010      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	4b70      	ldr	r3, [pc, #448]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d908      	bls.n	8006ea4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e92:	4b6d      	ldr	r3, [pc, #436]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	496a      	ldr	r1, [pc, #424]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d010      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	4b64      	ldr	r3, [pc, #400]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d908      	bls.n	8006ed2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ec0:	4b61      	ldr	r3, [pc, #388]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	495e      	ldr	r1, [pc, #376]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d010      	beq.n	8006f00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69da      	ldr	r2, [r3, #28]
 8006ee2:	4b59      	ldr	r3, [pc, #356]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d908      	bls.n	8006f00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006eee:	4b56      	ldr	r3, [pc, #344]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	4953      	ldr	r1, [pc, #332]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d010      	beq.n	8006f2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	4b4d      	ldr	r3, [pc, #308]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d908      	bls.n	8006f2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f023 020f 	bic.w	r2, r3, #15
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4947      	ldr	r1, [pc, #284]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d055      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f3a:	4b43      	ldr	r3, [pc, #268]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	4940      	ldr	r1, [pc, #256]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d107      	bne.n	8006f64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f54:	4b3c      	ldr	r3, [pc, #240]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d121      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0f6      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d107      	bne.n	8006f7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f6c:	4b36      	ldr	r3, [pc, #216]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d115      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0ea      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d107      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f84:	4b30      	ldr	r3, [pc, #192]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0de      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f94:	4b2c      	ldr	r3, [pc, #176]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0d6      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fa4:	4b28      	ldr	r3, [pc, #160]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f023 0207 	bic.w	r2, r3, #7
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	4925      	ldr	r1, [pc, #148]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb6:	f7fe fa1f 	bl	80053f8 <HAL_GetTick>
 8006fba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fbc:	e00a      	b.n	8006fd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fbe:	f7fe fa1b 	bl	80053f8 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e0be      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d1eb      	bne.n	8006fbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d010      	beq.n	8007014 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	4b14      	ldr	r3, [pc, #80]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d208      	bcs.n	8007014 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007002:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	f023 020f 	bic.w	r2, r3, #15
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	490e      	ldr	r1, [pc, #56]	@ (8007048 <HAL_RCC_ClockConfig+0x244>)
 8007010:	4313      	orrs	r3, r2
 8007012:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007014:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d214      	bcs.n	800704c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007022:	4b08      	ldr	r3, [pc, #32]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f023 020f 	bic.w	r2, r3, #15
 800702a:	4906      	ldr	r1, [pc, #24]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	4313      	orrs	r3, r2
 8007030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007032:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <HAL_RCC_ClockConfig+0x240>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d005      	beq.n	800704c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e086      	b.n	8007152 <HAL_RCC_ClockConfig+0x34e>
 8007044:	52002000 	.word	0x52002000
 8007048:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d010      	beq.n	800707a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	4b3f      	ldr	r3, [pc, #252]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007064:	429a      	cmp	r2, r3
 8007066:	d208      	bcs.n	800707a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007068:	4b3c      	ldr	r3, [pc, #240]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	4939      	ldr	r1, [pc, #228]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 8007076:	4313      	orrs	r3, r2
 8007078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d010      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695a      	ldr	r2, [r3, #20]
 800708a:	4b34      	ldr	r3, [pc, #208]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007092:	429a      	cmp	r2, r3
 8007094:	d208      	bcs.n	80070a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007096:	4b31      	ldr	r3, [pc, #196]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	492e      	ldr	r1, [pc, #184]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d010      	beq.n	80070d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	4b28      	ldr	r3, [pc, #160]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d208      	bcs.n	80070d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070c4:	4b25      	ldr	r3, [pc, #148]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	4922      	ldr	r1, [pc, #136]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d010      	beq.n	8007104 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69da      	ldr	r2, [r3, #28]
 80070e6:	4b1d      	ldr	r3, [pc, #116]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d208      	bcs.n	8007104 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070f2:	4b1a      	ldr	r3, [pc, #104]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	4917      	ldr	r1, [pc, #92]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 8007100:	4313      	orrs	r3, r2
 8007102:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007104:	f000 f834 	bl	8007170 <HAL_RCC_GetSysClockFreq>
 8007108:	4602      	mov	r2, r0
 800710a:	4b14      	ldr	r3, [pc, #80]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	4912      	ldr	r1, [pc, #72]	@ (8007160 <HAL_RCC_ClockConfig+0x35c>)
 8007116:	5ccb      	ldrb	r3, [r1, r3]
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
 8007120:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007122:	4b0e      	ldr	r3, [pc, #56]	@ (800715c <HAL_RCC_ClockConfig+0x358>)
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	4a0d      	ldr	r2, [pc, #52]	@ (8007160 <HAL_RCC_ClockConfig+0x35c>)
 800712c:	5cd3      	ldrb	r3, [r2, r3]
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
 8007138:	4a0a      	ldr	r2, [pc, #40]	@ (8007164 <HAL_RCC_ClockConfig+0x360>)
 800713a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800713c:	4a0a      	ldr	r2, [pc, #40]	@ (8007168 <HAL_RCC_ClockConfig+0x364>)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007142:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <HAL_RCC_ClockConfig+0x368>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe f90c 	bl	8005364 <HAL_InitTick>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	58024400 	.word	0x58024400
 8007160:	0809968c 	.word	0x0809968c
 8007164:	24000010 	.word	0x24000010
 8007168:	2400000c 	.word	0x2400000c
 800716c:	24000014 	.word	0x24000014

08007170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007170:	b480      	push	{r7}
 8007172:	b089      	sub	sp, #36	@ 0x24
 8007174:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007176:	4bb3      	ldr	r3, [pc, #716]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800717e:	2b18      	cmp	r3, #24
 8007180:	f200 8155 	bhi.w	800742e <HAL_RCC_GetSysClockFreq+0x2be>
 8007184:	a201      	add	r2, pc, #4	@ (adr r2, 800718c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080071f1 	.word	0x080071f1
 8007190:	0800742f 	.word	0x0800742f
 8007194:	0800742f 	.word	0x0800742f
 8007198:	0800742f 	.word	0x0800742f
 800719c:	0800742f 	.word	0x0800742f
 80071a0:	0800742f 	.word	0x0800742f
 80071a4:	0800742f 	.word	0x0800742f
 80071a8:	0800742f 	.word	0x0800742f
 80071ac:	08007217 	.word	0x08007217
 80071b0:	0800742f 	.word	0x0800742f
 80071b4:	0800742f 	.word	0x0800742f
 80071b8:	0800742f 	.word	0x0800742f
 80071bc:	0800742f 	.word	0x0800742f
 80071c0:	0800742f 	.word	0x0800742f
 80071c4:	0800742f 	.word	0x0800742f
 80071c8:	0800742f 	.word	0x0800742f
 80071cc:	0800721d 	.word	0x0800721d
 80071d0:	0800742f 	.word	0x0800742f
 80071d4:	0800742f 	.word	0x0800742f
 80071d8:	0800742f 	.word	0x0800742f
 80071dc:	0800742f 	.word	0x0800742f
 80071e0:	0800742f 	.word	0x0800742f
 80071e4:	0800742f 	.word	0x0800742f
 80071e8:	0800742f 	.word	0x0800742f
 80071ec:	08007223 	.word	0x08007223
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f0:	4b94      	ldr	r3, [pc, #592]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071fc:	4b91      	ldr	r3, [pc, #580]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	08db      	lsrs	r3, r3, #3
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	4a90      	ldr	r2, [pc, #576]	@ (8007448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007208:	fa22 f303 	lsr.w	r3, r2, r3
 800720c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800720e:	e111      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007210:	4b8d      	ldr	r3, [pc, #564]	@ (8007448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007212:	61bb      	str	r3, [r7, #24]
      break;
 8007214:	e10e      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007216:	4b8d      	ldr	r3, [pc, #564]	@ (800744c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007218:	61bb      	str	r3, [r7, #24]
      break;
 800721a:	e10b      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800721c:	4b8c      	ldr	r3, [pc, #560]	@ (8007450 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800721e:	61bb      	str	r3, [r7, #24]
      break;
 8007220:	e108      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007222:	4b88      	ldr	r3, [pc, #544]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800722c:	4b85      	ldr	r3, [pc, #532]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007236:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007238:	4b82      	ldr	r3, [pc, #520]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007242:	4b80      	ldr	r3, [pc, #512]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007246:	08db      	lsrs	r3, r3, #3
 8007248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	fb02 f303 	mul.w	r3, r2, r3
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80e1 	beq.w	8007428 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b02      	cmp	r3, #2
 800726a:	f000 8083 	beq.w	8007374 <HAL_RCC_GetSysClockFreq+0x204>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b02      	cmp	r3, #2
 8007272:	f200 80a1 	bhi.w	80073b8 <HAL_RCC_GetSysClockFreq+0x248>
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_RCC_GetSysClockFreq+0x114>
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d056      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007282:	e099      	b.n	80073b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007284:	4b6f      	ldr	r3, [pc, #444]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0320 	and.w	r3, r3, #32
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02d      	beq.n	80072ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007290:	4b6c      	ldr	r3, [pc, #432]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	08db      	lsrs	r3, r3, #3
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	4a6b      	ldr	r2, [pc, #428]	@ (8007448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800729c:	fa22 f303 	lsr.w	r3, r2, r3
 80072a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	ee07 3a90 	vmov	s15, r3
 80072a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ba:	4b62      	ldr	r3, [pc, #392]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80072ea:	e087      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007458 <HAL_RCC_GetSysClockFreq+0x2e8>
 80072fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fe:	4b51      	ldr	r3, [pc, #324]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007312:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800732e:	e065      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800745c <HAL_RCC_GetSysClockFreq+0x2ec>
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b40      	ldr	r3, [pc, #256]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a02 	vldr	s12, [r7, #8]
 8007356:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007372:	e043      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007460 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b2f      	ldr	r3, [pc, #188]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a02 	vldr	s12, [r7, #8]
 800739a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073b6:	e021      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800745c <HAL_RCC_GetSysClockFreq+0x2ec>
 80073c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	ed97 6a02 	vldr	s12, [r7, #8]
 80073de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80073fc:	4b11      	ldr	r3, [pc, #68]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007400:	0a5b      	lsrs	r3, r3, #9
 8007402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007406:	3301      	adds	r3, #1
 8007408:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007414:	edd7 6a07 	vldr	s13, [r7, #28]
 8007418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800741c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007420:	ee17 3a90 	vmov	r3, s15
 8007424:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007426:	e005      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	61bb      	str	r3, [r7, #24]
      break;
 800742c:	e002      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800742e:	4b07      	ldr	r3, [pc, #28]	@ (800744c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007430:	61bb      	str	r3, [r7, #24]
      break;
 8007432:	bf00      	nop
  }

  return sysclockfreq;
 8007434:	69bb      	ldr	r3, [r7, #24]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3724      	adds	r7, #36	@ 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	03d09000 	.word	0x03d09000
 800744c:	003d0900 	.word	0x003d0900
 8007450:	007a1200 	.word	0x007a1200
 8007454:	46000000 	.word	0x46000000
 8007458:	4c742400 	.word	0x4c742400
 800745c:	4a742400 	.word	0x4a742400
 8007460:	4af42400 	.word	0x4af42400

08007464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800746a:	f7ff fe81 	bl	8007170 <HAL_RCC_GetSysClockFreq>
 800746e:	4602      	mov	r2, r0
 8007470:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	490f      	ldr	r1, [pc, #60]	@ (80074b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800747c:	5ccb      	ldrb	r3, [r1, r3]
 800747e:	f003 031f 	and.w	r3, r3, #31
 8007482:	fa22 f303 	lsr.w	r3, r2, r3
 8007486:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	4a09      	ldr	r2, [pc, #36]	@ (80074b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007492:	5cd3      	ldrb	r3, [r2, r3]
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	fa22 f303 	lsr.w	r3, r2, r3
 800749e:	4a07      	ldr	r2, [pc, #28]	@ (80074bc <HAL_RCC_GetHCLKFreq+0x58>)
 80074a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074a2:	4a07      	ldr	r2, [pc, #28]	@ (80074c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80074a8:	4b04      	ldr	r3, [pc, #16]	@ (80074bc <HAL_RCC_GetHCLKFreq+0x58>)
 80074aa:	681b      	ldr	r3, [r3, #0]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	58024400 	.word	0x58024400
 80074b8:	0809968c 	.word	0x0809968c
 80074bc:	24000010 	.word	0x24000010
 80074c0:	2400000c 	.word	0x2400000c

080074c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074c8:	f7ff ffcc 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 80074cc:	4602      	mov	r2, r0
 80074ce:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	091b      	lsrs	r3, r3, #4
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	4904      	ldr	r1, [pc, #16]	@ (80074ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80074da:	5ccb      	ldrb	r3, [r1, r3]
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	58024400 	.word	0x58024400
 80074ec:	0809968c 	.word	0x0809968c

080074f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074f4:	f7ff ffb6 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 80074f8:	4602      	mov	r2, r0
 80074fa:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	4904      	ldr	r1, [pc, #16]	@ (8007518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007506:	5ccb      	ldrb	r3, [r1, r3]
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007510:	4618      	mov	r0, r3
 8007512:	bd80      	pop	{r7, pc}
 8007514:	58024400 	.word	0x58024400
 8007518:	0809968c 	.word	0x0809968c

0800751c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800751c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007520:	b0ca      	sub	sp, #296	@ 0x128
 8007522:	af00      	add	r7, sp, #0
 8007524:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800752e:	2300      	movs	r3, #0
 8007530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007540:	2500      	movs	r5, #0
 8007542:	ea54 0305 	orrs.w	r3, r4, r5
 8007546:	d049      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800754e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007552:	d02f      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007554:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007558:	d828      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800755a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800755e:	d01a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007560:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007564:	d822      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800756a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800756e:	d007      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007570:	e01c      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007572:	4bb8      	ldr	r3, [pc, #736]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4ab7      	ldr	r2, [pc, #732]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800757c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800757e:	e01a      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007584:	3308      	adds	r3, #8
 8007586:	2102      	movs	r1, #2
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fc8f 	bl	8008eac <RCCEx_PLL2_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007594:	e00f      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	3328      	adds	r3, #40	@ 0x28
 800759c:	2102      	movs	r1, #2
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fd36 	bl	8009010 <RCCEx_PLL3_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075aa:	e004      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075b2:	e000      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80075b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075be:	4ba5      	ldr	r3, [pc, #660]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075cc:	4aa1      	ldr	r2, [pc, #644]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075ce:	430b      	orrs	r3, r1
 80075d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80075d2:	e003      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075e8:	f04f 0900 	mov.w	r9, #0
 80075ec:	ea58 0309 	orrs.w	r3, r8, r9
 80075f0:	d047      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d82a      	bhi.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007619 	.word	0x08007619
 8007608:	08007627 	.word	0x08007627
 800760c:	0800763d 	.word	0x0800763d
 8007610:	0800765b 	.word	0x0800765b
 8007614:	0800765b 	.word	0x0800765b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007618:	4b8e      	ldr	r3, [pc, #568]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800761a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761c:	4a8d      	ldr	r2, [pc, #564]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800761e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007624:	e01a      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	3308      	adds	r3, #8
 800762c:	2100      	movs	r1, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fc3c 	bl	8008eac <RCCEx_PLL2_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800763a:	e00f      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	3328      	adds	r3, #40	@ 0x28
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f001 fce3 	bl	8009010 <RCCEx_PLL3_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007650:	e004      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800765a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007664:	4b7b      	ldr	r3, [pc, #492]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007668:	f023 0107 	bic.w	r1, r3, #7
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007672:	4a78      	ldr	r2, [pc, #480]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007674:	430b      	orrs	r3, r1
 8007676:	6513      	str	r3, [r2, #80]	@ 0x50
 8007678:	e003      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800768e:	f04f 0b00 	mov.w	fp, #0
 8007692:	ea5a 030b 	orrs.w	r3, sl, fp
 8007696:	d04c      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800769e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a2:	d030      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80076a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a8:	d829      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80076ac:	d02d      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80076ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b0:	d825      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076b2:	2b80      	cmp	r3, #128	@ 0x80
 80076b4:	d018      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80076b6:	2b80      	cmp	r3, #128	@ 0x80
 80076b8:	d821      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80076be:	2b40      	cmp	r3, #64	@ 0x40
 80076c0:	d007      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80076c2:	e01c      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c4:	4b63      	ldr	r3, [pc, #396]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	4a62      	ldr	r2, [pc, #392]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076d0:	e01c      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	3308      	adds	r3, #8
 80076d8:	2100      	movs	r1, #0
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fbe6 	bl	8008eac <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076e6:	e011      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	3328      	adds	r3, #40	@ 0x28
 80076ee:	2100      	movs	r1, #0
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 fc8d 	bl	8009010 <RCCEx_PLL3_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076fc:	e006      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007704:	e002      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007706:	bf00      	nop
 8007708:	e000      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800770a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007714:	4b4f      	ldr	r3, [pc, #316]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007718:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007722:	4a4c      	ldr	r2, [pc, #304]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007724:	430b      	orrs	r3, r1
 8007726:	6513      	str	r3, [r2, #80]	@ 0x50
 8007728:	e003      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800773e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007742:	2300      	movs	r3, #0
 8007744:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007748:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800774c:	460b      	mov	r3, r1
 800774e:	4313      	orrs	r3, r2
 8007750:	d053      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800775a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800775e:	d035      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007764:	d82e      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007766:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800776a:	d031      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800776c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007770:	d828      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007776:	d01a      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800777c:	d822      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007786:	d007      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007788:	e01c      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778a:	4b32      	ldr	r3, [pc, #200]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	4a31      	ldr	r2, [pc, #196]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007796:	e01c      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779c:	3308      	adds	r3, #8
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fb83 	bl	8008eac <RCCEx_PLL2_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077ac:	e011      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b2:	3328      	adds	r3, #40	@ 0x28
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 fc2a 	bl	8009010 <RCCEx_PLL3_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077c2:	e006      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077ca:	e002      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077cc:	bf00      	nop
 80077ce:	e000      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077da:	4b1e      	ldr	r3, [pc, #120]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077ec:	430b      	orrs	r3, r1
 80077ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80077f0:	e003      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800780a:	2300      	movs	r3, #0
 800780c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007810:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007814:	460b      	mov	r3, r1
 8007816:	4313      	orrs	r3, r2
 8007818:	d056      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007822:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007826:	d038      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800782c:	d831      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800782e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007832:	d034      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007834:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007838:	d82b      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800783a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783e:	d01d      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007844:	d825      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d006      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800784a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800784e:	d00a      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007850:	e01f      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007852:	bf00      	nop
 8007854:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007858:	4ba2      	ldr	r3, [pc, #648]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	4aa1      	ldr	r2, [pc, #644]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800785e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007864:	e01c      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786a:	3308      	adds	r3, #8
 800786c:	2100      	movs	r1, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fb1c 	bl	8008eac <RCCEx_PLL2_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800787a:	e011      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800787c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007880:	3328      	adds	r3, #40	@ 0x28
 8007882:	2100      	movs	r1, #0
 8007884:	4618      	mov	r0, r3
 8007886:	f001 fbc3 	bl	8009010 <RCCEx_PLL3_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007890:	e006      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007898:	e002      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800789e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10b      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80078a8:	4b8e      	ldr	r3, [pc, #568]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078b8:	4a8a      	ldr	r2, [pc, #552]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80078be:	e003      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d03a      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ee:	2b30      	cmp	r3, #48	@ 0x30
 80078f0:	d01f      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80078f2:	2b30      	cmp	r3, #48	@ 0x30
 80078f4:	d819      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d00c      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d815      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d019      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007902:	2b10      	cmp	r3, #16
 8007904:	d111      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007906:	4b77      	ldr	r3, [pc, #476]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	4a76      	ldr	r2, [pc, #472]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800790c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007912:	e011      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	3308      	adds	r3, #8
 800791a:	2102      	movs	r1, #2
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fac5 	bl	8008eac <RCCEx_PLL2_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007928:	e006      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007930:	e002      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007932:	bf00      	nop
 8007934:	e000      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007940:	4b68      	ldr	r3, [pc, #416]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007944:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794e:	4a65      	ldr	r2, [pc, #404]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007950:	430b      	orrs	r3, r1
 8007952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007954:	e003      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800795a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800796a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800796e:	2300      	movs	r3, #0
 8007970:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007974:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007978:	460b      	mov	r3, r1
 800797a:	4313      	orrs	r3, r2
 800797c:	d051      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007988:	d035      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800798a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800798e:	d82e      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007990:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007994:	d031      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800799a:	d828      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800799c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a0:	d01a      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80079a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a6:	d822      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b0:	d007      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80079b2:	e01c      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b4:	4b4b      	ldr	r3, [pc, #300]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	4a4a      	ldr	r2, [pc, #296]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079c0:	e01c      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c6:	3308      	adds	r3, #8
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 fa6e 	bl	8008eac <RCCEx_PLL2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079d6:	e011      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	3328      	adds	r3, #40	@ 0x28
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fb15 	bl	8009010 <RCCEx_PLL3_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079ec:	e006      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079f4:	e002      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a04:	4b37      	ldr	r3, [pc, #220]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a12:	4a34      	ldr	r2, [pc, #208]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a14:	430b      	orrs	r3, r1
 8007a16:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a18:	e003      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a32:	2300      	movs	r3, #0
 8007a34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	d056      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a4c:	d033      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a52:	d82c      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a58:	d02f      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a5e:	d826      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a64:	d02b      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a6a:	d820      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a70:	d012      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a76:	d81a      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d022      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a80:	d115      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	3308      	adds	r3, #8
 8007a88:	2101      	movs	r1, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fa0e 	bl	8008eac <RCCEx_PLL2_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a96:	e015      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9c:	3328      	adds	r3, #40	@ 0x28
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fab5 	bl	8009010 <RCCEx_PLL3_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007aac:	e00a      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ab4:	e006      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ab6:	bf00      	nop
 8007ab8:	e004      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10d      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007acc:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ada:	4a02      	ldr	r2, [pc, #8]	@ (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ae0:	e006      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ae2:	bf00      	nop
 8007ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b00:	2300      	movs	r3, #0
 8007b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	d055      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b1c:	d033      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b22:	d82c      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b28:	d02f      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b2e:	d826      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b34:	d02b      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007b36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b3a:	d820      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b40:	d012      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b46:	d81a      	bhi.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d022      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b50:	d115      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b56:	3308      	adds	r3, #8
 8007b58:	2101      	movs	r1, #1
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 f9a6 	bl	8008eac <RCCEx_PLL2_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b66:	e015      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6c:	3328      	adds	r3, #40	@ 0x28
 8007b6e:	2101      	movs	r1, #1
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 fa4d 	bl	8009010 <RCCEx_PLL3_Config>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b84:	e006      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b86:	bf00      	nop
 8007b88:	e004      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b8a:	bf00      	nop
 8007b8c:	e002      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b8e:	bf00      	nop
 8007b90:	e000      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10b      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b9c:	4ba3      	ldr	r3, [pc, #652]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bac:	4a9f      	ldr	r2, [pc, #636]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bb2:	e003      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	d037      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007be6:	d00e      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bec:	d816      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d018      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bf6:	d111      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf8:	4b8c      	ldr	r3, [pc, #560]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	4a8b      	ldr	r2, [pc, #556]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c04:	e00f      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 f94c 	bl	8008eac <RCCEx_PLL2_Config>
 8007c14:	4603      	mov	r3, r0
 8007c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c1a:	e004      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c22:	e000      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3c:	4a7b      	ldr	r2, [pc, #492]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c3e:	430b      	orrs	r3, r1
 8007c40:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c42:	e003      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	d039      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d81c      	bhi.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c76:	a201      	add	r2, pc, #4	@ (adr r2, 8007c7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007cb9 	.word	0x08007cb9
 8007c80:	08007c8d 	.word	0x08007c8d
 8007c84:	08007c9b 	.word	0x08007c9b
 8007c88:	08007cb9 	.word	0x08007cb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8c:	4b67      	ldr	r3, [pc, #412]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	4a66      	ldr	r2, [pc, #408]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c98:	e00f      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f902 	bl	8008eac <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007cae:	e004      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cb6:	e000      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc6:	f023 0103 	bic.w	r1, r3, #3
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cd0:	4a56      	ldr	r2, [pc, #344]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cd6:	e003      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007cec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	f000 809f 	beq.w	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d02:	4b4b      	ldr	r3, [pc, #300]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a4a      	ldr	r2, [pc, #296]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d0e:	f7fd fb73 	bl	80053f8 <HAL_GetTick>
 8007d12:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d16:	e00b      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d18:	f7fd fb6e 	bl	80053f8 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b64      	cmp	r3, #100	@ 0x64
 8007d26:	d903      	bls.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2e:	e005      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d30:	4b3f      	ldr	r3, [pc, #252]	@ (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0ed      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d179      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d44:	4b39      	ldr	r3, [pc, #228]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d50:	4053      	eors	r3, r2
 8007d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d015      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d5a:	4b34      	ldr	r3, [pc, #208]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d66:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6a:	4a30      	ldr	r2, [pc, #192]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d72:	4b2e      	ldr	r3, [pc, #184]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d76:	4a2d      	ldr	r2, [pc, #180]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d92:	d118      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d94:	f7fd fb30 	bl	80053f8 <HAL_GetTick>
 8007d98:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d9c:	e00d      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d9e:	f7fd fb2b 	bl	80053f8 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007da8:	1ad2      	subs	r2, r2, r3
 8007daa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d903      	bls.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007db8:	e005      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dba:	4b1c      	ldr	r3, [pc, #112]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0eb      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d129      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dde:	d10e      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007de0:	4b12      	ldr	r3, [pc, #72]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007df0:	091a      	lsrs	r2, r3, #4
 8007df2:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	4a0d      	ldr	r2, [pc, #52]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	6113      	str	r3, [r2, #16]
 8007dfc:	e005      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	4a0a      	ldr	r2, [pc, #40]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e08:	6113      	str	r3, [r2, #16]
 8007e0a:	4b08      	ldr	r3, [pc, #32]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e0c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e1a:	4a04      	ldr	r2, [pc, #16]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e20:	e00e      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007e2a:	e009      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e2c:	58024400 	.word	0x58024400
 8007e30:	58024800 	.word	0x58024800
 8007e34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f002 0301 	and.w	r3, r2, #1
 8007e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f000 8089 	beq.w	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e68:	2b28      	cmp	r3, #40	@ 0x28
 8007e6a:	d86b      	bhi.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007f4d 	.word	0x08007f4d
 8007e78:	08007f45 	.word	0x08007f45
 8007e7c:	08007f45 	.word	0x08007f45
 8007e80:	08007f45 	.word	0x08007f45
 8007e84:	08007f45 	.word	0x08007f45
 8007e88:	08007f45 	.word	0x08007f45
 8007e8c:	08007f45 	.word	0x08007f45
 8007e90:	08007f45 	.word	0x08007f45
 8007e94:	08007f19 	.word	0x08007f19
 8007e98:	08007f45 	.word	0x08007f45
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f45 	.word	0x08007f45
 8007ea4:	08007f45 	.word	0x08007f45
 8007ea8:	08007f45 	.word	0x08007f45
 8007eac:	08007f45 	.word	0x08007f45
 8007eb0:	08007f45 	.word	0x08007f45
 8007eb4:	08007f2f 	.word	0x08007f2f
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f45 	.word	0x08007f45
 8007ec0:	08007f45 	.word	0x08007f45
 8007ec4:	08007f45 	.word	0x08007f45
 8007ec8:	08007f45 	.word	0x08007f45
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f45 	.word	0x08007f45
 8007ed4:	08007f4d 	.word	0x08007f4d
 8007ed8:	08007f45 	.word	0x08007f45
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007f45 	.word	0x08007f45
 8007ee4:	08007f45 	.word	0x08007f45
 8007ee8:	08007f45 	.word	0x08007f45
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	08007f4d 	.word	0x08007f4d
 8007ef8:	08007f45 	.word	0x08007f45
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f45 	.word	0x08007f45
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f45 	.word	0x08007f45
 8007f0c:	08007f45 	.word	0x08007f45
 8007f10:	08007f45 	.word	0x08007f45
 8007f14:	08007f4d 	.word	0x08007f4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 ffc3 	bl	8008eac <RCCEx_PLL2_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f2c:	e00f      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f32:	3328      	adds	r3, #40	@ 0x28
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 f86a 	bl	8009010 <RCCEx_PLL3_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f42:	e004      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f4a:	e000      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10a      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f56:	4bbf      	ldr	r3, [pc, #764]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f64:	4abb      	ldr	r2, [pc, #748]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f66:	430b      	orrs	r3, r1
 8007f68:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f6a:	e003      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f002 0302 	and.w	r3, r2, #2
 8007f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f84:	2300      	movs	r3, #0
 8007f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4313      	orrs	r3, r2
 8007f92:	d041      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f9a:	2b05      	cmp	r3, #5
 8007f9c:	d824      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08007ff1 	.word	0x08007ff1
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fd3 	.word	0x08007fd3
 8007fb0:	08007ff1 	.word	0x08007ff1
 8007fb4:	08007ff1 	.word	0x08007ff1
 8007fb8:	08007ff1 	.word	0x08007ff1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 ff71 	bl	8008eac <RCCEx_PLL2_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fd0:	e00f      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd6:	3328      	adds	r3, #40	@ 0x28
 8007fd8:	2101      	movs	r1, #1
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 f818 	bl	8009010 <RCCEx_PLL3_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fe6:	e004      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fee:	e000      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ffa:	4b96      	ldr	r3, [pc, #600]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	f023 0107 	bic.w	r1, r3, #7
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008008:	4a92      	ldr	r2, [pc, #584]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800800a:	430b      	orrs	r3, r1
 800800c:	6553      	str	r3, [r2, #84]	@ 0x54
 800800e:	e003      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f002 0304 	and.w	r3, r2, #4
 8008024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800802e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008032:	460b      	mov	r3, r1
 8008034:	4313      	orrs	r3, r2
 8008036:	d044      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008040:	2b05      	cmp	r3, #5
 8008042:	d825      	bhi.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008044:	a201      	add	r2, pc, #4	@ (adr r2, 800804c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	08008099 	.word	0x08008099
 8008050:	08008065 	.word	0x08008065
 8008054:	0800807b 	.word	0x0800807b
 8008058:	08008099 	.word	0x08008099
 800805c:	08008099 	.word	0x08008099
 8008060:	08008099 	.word	0x08008099
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008068:	3308      	adds	r3, #8
 800806a:	2101      	movs	r1, #1
 800806c:	4618      	mov	r0, r3
 800806e:	f000 ff1d 	bl	8008eac <RCCEx_PLL2_Config>
 8008072:	4603      	mov	r3, r0
 8008074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008078:	e00f      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	3328      	adds	r3, #40	@ 0x28
 8008080:	2101      	movs	r1, #1
 8008082:	4618      	mov	r0, r3
 8008084:	f000 ffc4 	bl	8009010 <RCCEx_PLL3_Config>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800808e:	e004      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008096:	e000      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080a2:	4b6c      	ldr	r3, [pc, #432]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a6:	f023 0107 	bic.w	r1, r3, #7
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b2:	4a68      	ldr	r2, [pc, #416]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080b4:	430b      	orrs	r3, r1
 80080b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80080b8:	e003      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f002 0320 	and.w	r3, r2, #32
 80080ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080d2:	2300      	movs	r3, #0
 80080d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080dc:	460b      	mov	r3, r1
 80080de:	4313      	orrs	r3, r2
 80080e0:	d055      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080ee:	d033      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80080f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080f4:	d82c      	bhi.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fa:	d02f      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008100:	d826      	bhi.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008102:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008106:	d02b      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008108:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800810c:	d820      	bhi.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800810e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008112:	d012      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008118:	d81a      	bhi.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d022      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800811e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008122:	d115      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	3308      	adds	r3, #8
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f000 febd 	bl	8008eac <RCCEx_PLL2_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008138:	e015      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	3328      	adds	r3, #40	@ 0x28
 8008140:	2102      	movs	r1, #2
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ff64 	bl	8009010 <RCCEx_PLL3_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800814e:	e00a      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008156:	e006      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008158:	bf00      	nop
 800815a:	e004      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800815c:	bf00      	nop
 800815e:	e002      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008160:	bf00      	nop
 8008162:	e000      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800816e:	4b39      	ldr	r3, [pc, #228]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008172:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817e:	4a35      	ldr	r2, [pc, #212]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008180:	430b      	orrs	r3, r1
 8008182:	6553      	str	r3, [r2, #84]	@ 0x54
 8008184:	e003      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800819a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800819e:	2300      	movs	r3, #0
 80081a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4313      	orrs	r3, r2
 80081ac:	d058      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081ba:	d033      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80081bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081c0:	d82c      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c6:	d02f      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80081c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081cc:	d826      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081d2:	d02b      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80081d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081d8:	d820      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081de:	d012      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081e4:	d81a      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d022      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ee:	d115      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f4:	3308      	adds	r3, #8
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fe57 	bl	8008eac <RCCEx_PLL2_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008204:	e015      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820a:	3328      	adds	r3, #40	@ 0x28
 800820c:	2102      	movs	r1, #2
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fefe 	bl	8009010 <RCCEx_PLL3_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800821a:	e00a      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008222:	e006      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008224:	bf00      	nop
 8008226:	e004      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008228:	bf00      	nop
 800822a:	e002      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10e      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800823a:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800824a:	4a02      	ldr	r2, [pc, #8]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800824c:	430b      	orrs	r3, r1
 800824e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008250:	e006      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008252:	bf00      	nop
 8008254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800826c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008270:	2300      	movs	r3, #0
 8008272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008276:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800827a:	460b      	mov	r3, r1
 800827c:	4313      	orrs	r3, r2
 800827e:	d055      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008288:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800828c:	d033      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800828e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008292:	d82c      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008298:	d02f      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800829a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800829e:	d826      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082a4:	d02b      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80082a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082aa:	d820      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082b0:	d012      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80082b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082b6:	d81a      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d022      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80082bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082c0:	d115      	bne.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c6:	3308      	adds	r3, #8
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fdee 	bl	8008eac <RCCEx_PLL2_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082d6:	e015      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082dc:	3328      	adds	r3, #40	@ 0x28
 80082de:	2102      	movs	r1, #2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fe95 	bl	8009010 <RCCEx_PLL3_Config>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082ec:	e00a      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082f4:	e006      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082f6:	bf00      	nop
 80082f8:	e004      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082fa:	bf00      	nop
 80082fc:	e002      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800830c:	4ba1      	ldr	r3, [pc, #644]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800830e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008310:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800831c:	4a9d      	ldr	r2, [pc, #628]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800831e:	430b      	orrs	r3, r1
 8008320:	6593      	str	r3, [r2, #88]	@ 0x58
 8008322:	e003      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f002 0308 	and.w	r3, r2, #8
 8008338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800833c:	2300      	movs	r3, #0
 800833e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008342:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008346:	460b      	mov	r3, r1
 8008348:	4313      	orrs	r3, r2
 800834a:	d01e      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800834c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008358:	d10c      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	3328      	adds	r3, #40	@ 0x28
 8008360:	2102      	movs	r1, #2
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fe54 	bl	8009010 <RCCEx_PLL3_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008374:	4b87      	ldr	r3, [pc, #540]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008378:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008384:	4a83      	ldr	r2, [pc, #524]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008386:	430b      	orrs	r3, r1
 8008388:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f002 0310 	and.w	r3, r2, #16
 8008396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800839a:	2300      	movs	r3, #0
 800839c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80083a4:	460b      	mov	r3, r1
 80083a6:	4313      	orrs	r3, r2
 80083a8:	d01e      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80083aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b6:	d10c      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	3328      	adds	r3, #40	@ 0x28
 80083be:	2102      	movs	r1, #2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fe25 	bl	8009010 <RCCEx_PLL3_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083d2:	4b70      	ldr	r3, [pc, #448]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083e2:	4a6c      	ldr	r2, [pc, #432]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083f8:	2300      	movs	r3, #0
 80083fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008402:	460b      	mov	r3, r1
 8008404:	4313      	orrs	r3, r2
 8008406:	d03e      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008414:	d022      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800841a:	d81b      	bhi.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008424:	d00b      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008426:	e015      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842c:	3308      	adds	r3, #8
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fd3b 	bl	8008eac <RCCEx_PLL2_Config>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800843c:	e00f      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008442:	3328      	adds	r3, #40	@ 0x28
 8008444:	2102      	movs	r1, #2
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fde2 	bl	8009010 <RCCEx_PLL3_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008452:	e004      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800845a:	e000      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800845c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10b      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008466:	4b4b      	ldr	r3, [pc, #300]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800846a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008476:	4a47      	ldr	r2, [pc, #284]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008478:	430b      	orrs	r3, r1
 800847a:	6593      	str	r3, [r2, #88]	@ 0x58
 800847c:	e003      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008492:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008494:	2300      	movs	r3, #0
 8008496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008498:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800849c:	460b      	mov	r3, r1
 800849e:	4313      	orrs	r3, r2
 80084a0:	d03b      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084ae:	d01f      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80084b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084b4:	d818      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80084b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ba:	d003      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80084bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084c0:	d007      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80084c2:	e011      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c4:	4b33      	ldr	r3, [pc, #204]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	4a32      	ldr	r2, [pc, #200]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084d0:	e00f      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d6:	3328      	adds	r3, #40	@ 0x28
 80084d8:	2101      	movs	r1, #1
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fd98 	bl	8009010 <RCCEx_PLL3_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80084e6:	e004      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ee:	e000      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80084f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10b      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084fa:	4b26      	ldr	r3, [pc, #152]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800850a:	4a22      	ldr	r2, [pc, #136]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800850c:	430b      	orrs	r3, r1
 800850e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008510:	e003      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008526:	673b      	str	r3, [r7, #112]	@ 0x70
 8008528:	2300      	movs	r3, #0
 800852a:	677b      	str	r3, [r7, #116]	@ 0x74
 800852c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008530:	460b      	mov	r3, r1
 8008532:	4313      	orrs	r3, r2
 8008534:	d034      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800853a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008544:	d007      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008546:	e011      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008548:	4b12      	ldr	r3, [pc, #72]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800854a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854c:	4a11      	ldr	r2, [pc, #68]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800854e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008554:	e00e      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855a:	3308      	adds	r3, #8
 800855c:	2102      	movs	r1, #2
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fca4 	bl	8008eac <RCCEx_PLL2_Config>
 8008564:	4603      	mov	r3, r0
 8008566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800856a:	e003      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10d      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800857c:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800857e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008580:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858a:	4a02      	ldr	r2, [pc, #8]	@ (8008594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800858c:	430b      	orrs	r3, r1
 800858e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008590:	e006      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008592:	bf00      	nop
 8008594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800859c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80085ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ae:	2300      	movs	r3, #0
 80085b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085b6:	460b      	mov	r3, r1
 80085b8:	4313      	orrs	r3, r2
 80085ba:	d00c      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c0:	3328      	adds	r3, #40	@ 0x28
 80085c2:	2102      	movs	r1, #2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fd23 	bl	8009010 <RCCEx_PLL3_Config>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80085e4:	2300      	movs	r3, #0
 80085e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80085e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085ec:	460b      	mov	r3, r1
 80085ee:	4313      	orrs	r3, r2
 80085f0:	d038      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085fe:	d018      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008604:	d811      	bhi.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800860a:	d014      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800860c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008610:	d80b      	bhi.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d011      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800861a:	d106      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800861c:	4bc3      	ldr	r3, [pc, #780]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800861e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008620:	4ac2      	ldr	r2, [pc, #776]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008628:	e008      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008630:	e004      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008632:	bf00      	nop
 8008634:	e002      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800863a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008644:	4bb9      	ldr	r3, [pc, #740]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008648:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008654:	4ab5      	ldr	r2, [pc, #724]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008656:	430b      	orrs	r3, r1
 8008658:	6553      	str	r3, [r2, #84]	@ 0x54
 800865a:	e003      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008670:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008672:	2300      	movs	r3, #0
 8008674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008676:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800867a:	460b      	mov	r3, r1
 800867c:	4313      	orrs	r3, r2
 800867e:	d009      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008680:	4baa      	ldr	r3, [pc, #680]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008684:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868e:	4aa7      	ldr	r2, [pc, #668]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008690:	430b      	orrs	r3, r1
 8008692:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80086a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80086a2:	2300      	movs	r3, #0
 80086a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80086a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80086aa:	460b      	mov	r3, r1
 80086ac:	4313      	orrs	r3, r2
 80086ae:	d00a      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086b0:	4b9e      	ldr	r3, [pc, #632]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80086b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086c0:	4a9a      	ldr	r2, [pc, #616]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086c2:	430b      	orrs	r3, r1
 80086c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086d4:	2300      	movs	r3, #0
 80086d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086dc:	460b      	mov	r3, r1
 80086de:	4313      	orrs	r3, r2
 80086e0:	d009      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086e2:	4b92      	ldr	r3, [pc, #584]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f0:	4a8e      	ldr	r2, [pc, #568]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086f2:	430b      	orrs	r3, r1
 80086f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008702:	643b      	str	r3, [r7, #64]	@ 0x40
 8008704:	2300      	movs	r3, #0
 8008706:	647b      	str	r3, [r7, #68]	@ 0x44
 8008708:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800870c:	460b      	mov	r3, r1
 800870e:	4313      	orrs	r3, r2
 8008710:	d00e      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008712:	4b86      	ldr	r3, [pc, #536]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	4a85      	ldr	r2, [pc, #532]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008718:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800871c:	6113      	str	r3, [r2, #16]
 800871e:	4b83      	ldr	r3, [pc, #524]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008720:	6919      	ldr	r1, [r3, #16]
 8008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008726:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800872a:	4a80      	ldr	r2, [pc, #512]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800872c:	430b      	orrs	r3, r1
 800872e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800873c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800873e:	2300      	movs	r3, #0
 8008740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008742:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008746:	460b      	mov	r3, r1
 8008748:	4313      	orrs	r3, r2
 800874a:	d009      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800874c:	4b77      	ldr	r3, [pc, #476]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800874e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008750:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800875a:	4a74      	ldr	r2, [pc, #464]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800875c:	430b      	orrs	r3, r1
 800875e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800876c:	633b      	str	r3, [r7, #48]	@ 0x30
 800876e:	2300      	movs	r3, #0
 8008770:	637b      	str	r3, [r7, #52]	@ 0x34
 8008772:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008776:	460b      	mov	r3, r1
 8008778:	4313      	orrs	r3, r2
 800877a:	d00a      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800877c:	4b6b      	ldr	r3, [pc, #428]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800877e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008780:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800878c:	4a67      	ldr	r2, [pc, #412]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800878e:	430b      	orrs	r3, r1
 8008790:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	2100      	movs	r1, #0
 800879c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80087a8:	460b      	mov	r3, r1
 80087aa:	4313      	orrs	r3, r2
 80087ac:	d011      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b2:	3308      	adds	r3, #8
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fb78 	bl	8008eac <RCCEx_PLL2_Config>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	2100      	movs	r1, #0
 80087dc:	6239      	str	r1, [r7, #32]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087e8:	460b      	mov	r3, r1
 80087ea:	4313      	orrs	r3, r2
 80087ec:	d011      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f2:	3308      	adds	r3, #8
 80087f4:	2101      	movs	r1, #1
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fb58 	bl	8008eac <RCCEx_PLL2_Config>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800880e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	2100      	movs	r1, #0
 800881c:	61b9      	str	r1, [r7, #24]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	61fb      	str	r3, [r7, #28]
 8008824:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008828:	460b      	mov	r3, r1
 800882a:	4313      	orrs	r3, r2
 800882c:	d011      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008832:	3308      	adds	r3, #8
 8008834:	2102      	movs	r1, #2
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fb38 	bl	8008eac <RCCEx_PLL2_Config>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800884e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	2100      	movs	r1, #0
 800885c:	6139      	str	r1, [r7, #16]
 800885e:	f003 0308 	and.w	r3, r3, #8
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008868:	460b      	mov	r3, r1
 800886a:	4313      	orrs	r3, r2
 800886c:	d011      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008872:	3328      	adds	r3, #40	@ 0x28
 8008874:	2100      	movs	r1, #0
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fbca 	bl	8009010 <RCCEx_PLL3_Config>
 800887c:	4603      	mov	r3, r0
 800887e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800888a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800888e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	2100      	movs	r1, #0
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80088a8:	460b      	mov	r3, r1
 80088aa:	4313      	orrs	r3, r2
 80088ac:	d011      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b2:	3328      	adds	r3, #40	@ 0x28
 80088b4:	2101      	movs	r1, #1
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fbaa 	bl	8009010 <RCCEx_PLL3_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	2100      	movs	r1, #0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088e8:	460b      	mov	r3, r1
 80088ea:	4313      	orrs	r3, r2
 80088ec:	d011      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f2:	3328      	adds	r3, #40	@ 0x28
 80088f4:	2102      	movs	r1, #2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fb8a 	bl	8009010 <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800890e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008912:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	e000      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
}
 8008920:	4618      	mov	r0, r3
 8008922:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008926:	46bd      	mov	sp, r7
 8008928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800892c:	58024400 	.word	0x58024400

08008930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008934:	f7fe fd96 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 8008938:	4602      	mov	r2, r0
 800893a:	4b06      	ldr	r3, [pc, #24]	@ (8008954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	091b      	lsrs	r3, r3, #4
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	4904      	ldr	r1, [pc, #16]	@ (8008958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008946:	5ccb      	ldrb	r3, [r1, r3]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008950:	4618      	mov	r0, r3
 8008952:	bd80      	pop	{r7, pc}
 8008954:	58024400 	.word	0x58024400
 8008958:	0809968c 	.word	0x0809968c

0800895c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800895c:	b480      	push	{r7}
 800895e:	b089      	sub	sp, #36	@ 0x24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008964:	4ba1      	ldr	r3, [pc, #644]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800896e:	4b9f      	ldr	r3, [pc, #636]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008972:	0b1b      	lsrs	r3, r3, #12
 8008974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800897a:	4b9c      	ldr	r3, [pc, #624]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897e:	091b      	lsrs	r3, r3, #4
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008986:	4b99      	ldr	r3, [pc, #612]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	fb02 f303 	mul.w	r3, r2, r3
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8111 	beq.w	8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	f000 8083 	beq.w	8008ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	f200 80a1 	bhi.w	8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d056      	beq.n	8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089c6:	e099      	b.n	8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c8:	4b88      	ldr	r3, [pc, #544]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d02d      	beq.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089d4:	4b85      	ldr	r3, [pc, #532]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	08db      	lsrs	r3, r3, #3
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	4a84      	ldr	r2, [pc, #528]	@ (8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
 80089e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b7b      	ldr	r3, [pc, #492]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a2e:	e087      	b.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b6a      	ldr	r3, [pc, #424]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a72:	e065      	b.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b59      	ldr	r3, [pc, #356]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ab6:	e043      	b.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b48      	ldr	r3, [pc, #288]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afa:	e021      	b.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b37      	ldr	r3, [pc, #220]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b40:	4b2a      	ldr	r3, [pc, #168]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b44:	0a5b      	lsrs	r3, r3, #9
 8008b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b66:	ee17 2a90 	vmov	r2, s15
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b72:	0c1b      	lsrs	r3, r3, #16
 8008b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b78:	ee07 3a90 	vmov	s15, r3
 8008b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b94:	ee17 2a90 	vmov	r2, s15
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b9c:	4b13      	ldr	r3, [pc, #76]	@ (8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba0:	0e1b      	lsrs	r3, r3, #24
 8008ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc2:	ee17 2a90 	vmov	r2, s15
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bca:	e008      	b.n	8008bde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	609a      	str	r2, [r3, #8]
}
 8008bde:	bf00      	nop
 8008be0:	3724      	adds	r7, #36	@ 0x24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	03d09000 	.word	0x03d09000
 8008bf4:	46000000 	.word	0x46000000
 8008bf8:	4c742400 	.word	0x4c742400
 8008bfc:	4a742400 	.word	0x4a742400
 8008c00:	4af42400 	.word	0x4af42400

08008c04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b089      	sub	sp, #36	@ 0x24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c0c:	4ba1      	ldr	r3, [pc, #644]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c16:	4b9f      	ldr	r3, [pc, #636]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1a:	0d1b      	lsrs	r3, r3, #20
 8008c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c22:	4b9c      	ldr	r3, [pc, #624]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c26:	0a1b      	lsrs	r3, r3, #8
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c2e:	4b99      	ldr	r3, [pc, #612]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c32:	08db      	lsrs	r3, r3, #3
 8008c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	fb02 f303 	mul.w	r3, r2, r3
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 8111 	beq.w	8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	f000 8083 	beq.w	8008d60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	f200 80a1 	bhi.w	8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d056      	beq.n	8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c6e:	e099      	b.n	8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c70:	4b88      	ldr	r3, [pc, #544]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d02d      	beq.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c7c:	4b85      	ldr	r3, [pc, #532]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	08db      	lsrs	r3, r3, #3
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	4a84      	ldr	r2, [pc, #528]	@ (8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	ee07 3a90 	vmov	s15, r3
 8008c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cd6:	e087      	b.n	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cea:	4b6a      	ldr	r3, [pc, #424]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d1a:	e065      	b.n	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b59      	ldr	r3, [pc, #356]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d5e:	e043      	b.n	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b48      	ldr	r3, [pc, #288]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da2:	e021      	b.n	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b37      	ldr	r3, [pc, #220]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008de8:	4b2a      	ldr	r3, [pc, #168]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dec:	0a5b      	lsrs	r3, r3, #9
 8008dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0e:	ee17 2a90 	vmov	r2, s15
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e16:	4b1f      	ldr	r3, [pc, #124]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e1a:	0c1b      	lsrs	r3, r3, #16
 8008e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e20:	ee07 3a90 	vmov	s15, r3
 8008e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e3c:	ee17 2a90 	vmov	r2, s15
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e44:	4b13      	ldr	r3, [pc, #76]	@ (8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e48:	0e1b      	lsrs	r3, r3, #24
 8008e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e6a:	ee17 2a90 	vmov	r2, s15
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e72:	e008      	b.n	8008e86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	609a      	str	r2, [r3, #8]
}
 8008e86:	bf00      	nop
 8008e88:	3724      	adds	r7, #36	@ 0x24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	58024400 	.word	0x58024400
 8008e98:	03d09000 	.word	0x03d09000
 8008e9c:	46000000 	.word	0x46000000
 8008ea0:	4c742400 	.word	0x4c742400
 8008ea4:	4a742400 	.word	0x4a742400
 8008ea8:	4af42400 	.word	0x4af42400

08008eac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eba:	4b53      	ldr	r3, [pc, #332]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d101      	bne.n	8008eca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e099      	b.n	8008ffe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008eca:	4b4f      	ldr	r3, [pc, #316]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a4e      	ldr	r2, [pc, #312]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ed0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed6:	f7fc fa8f 	bl	80053f8 <HAL_GetTick>
 8008eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008edc:	e008      	b.n	8008ef0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ede:	f7fc fa8b 	bl	80053f8 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e086      	b.n	8008ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ef0:	4b45      	ldr	r3, [pc, #276]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f0      	bne.n	8008ede <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008efc:	4b42      	ldr	r3, [pc, #264]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	031b      	lsls	r3, r3, #12
 8008f0a:	493f      	ldr	r1, [pc, #252]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	025b      	lsls	r3, r3, #9
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	061b      	lsls	r3, r3, #24
 8008f3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f40:	4931      	ldr	r1, [pc, #196]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f46:	4b30      	ldr	r3, [pc, #192]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	492d      	ldr	r1, [pc, #180]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f58:	4b2b      	ldr	r3, [pc, #172]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5c:	f023 0220 	bic.w	r2, r3, #32
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	4928      	ldr	r1, [pc, #160]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f6a:	4b27      	ldr	r3, [pc, #156]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6e:	4a26      	ldr	r2, [pc, #152]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f70:	f023 0310 	bic.w	r3, r3, #16
 8008f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f76:	4b24      	ldr	r3, [pc, #144]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f7a:	4b24      	ldr	r3, [pc, #144]	@ (800900c <RCCEx_PLL2_Config+0x160>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	69d2      	ldr	r2, [r2, #28]
 8008f82:	00d2      	lsls	r2, r2, #3
 8008f84:	4920      	ldr	r1, [pc, #128]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f90:	f043 0310 	orr.w	r3, r3, #16
 8008f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	4a19      	ldr	r2, [pc, #100]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fa2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fa8:	e00f      	b.n	8008fca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d106      	bne.n	8008fbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fb0:	4b15      	ldr	r3, [pc, #84]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a14      	ldr	r2, [pc, #80]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fbc:	e005      	b.n	8008fca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fbe:	4b12      	ldr	r3, [pc, #72]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc2:	4a11      	ldr	r2, [pc, #68]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fca:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a0e      	ldr	r2, [pc, #56]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008fd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fd6:	f7fc fa0f 	bl	80053f8 <HAL_GetTick>
 8008fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fdc:	e008      	b.n	8008ff0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fde:	f7fc fa0b 	bl	80053f8 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d901      	bls.n	8008ff0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e006      	b.n	8008ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ff0:	4b05      	ldr	r3, [pc, #20]	@ (8009008 <RCCEx_PLL2_Config+0x15c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0f0      	beq.n	8008fde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	58024400 	.word	0x58024400
 800900c:	ffff0007 	.word	0xffff0007

08009010 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800901e:	4b53      	ldr	r3, [pc, #332]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d101      	bne.n	800902e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e099      	b.n	8009162 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800902e:	4b4f      	ldr	r3, [pc, #316]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a4e      	ldr	r2, [pc, #312]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800903a:	f7fc f9dd 	bl	80053f8 <HAL_GetTick>
 800903e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009040:	e008      	b.n	8009054 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009042:	f7fc f9d9 	bl	80053f8 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d901      	bls.n	8009054 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e086      	b.n	8009162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009054:	4b45      	ldr	r3, [pc, #276]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1f0      	bne.n	8009042 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009060:	4b42      	ldr	r3, [pc, #264]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009064:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	051b      	lsls	r3, r3, #20
 800906e:	493f      	ldr	r1, [pc, #252]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009070:	4313      	orrs	r3, r2
 8009072:	628b      	str	r3, [r1, #40]	@ 0x28
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	3b01      	subs	r3, #1
 800907a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	3b01      	subs	r3, #1
 8009084:	025b      	lsls	r3, r3, #9
 8009086:	b29b      	uxth	r3, r3
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	3b01      	subs	r3, #1
 8009090:	041b      	lsls	r3, r3, #16
 8009092:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	3b01      	subs	r3, #1
 800909e:	061b      	lsls	r3, r3, #24
 80090a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090a4:	4931      	ldr	r1, [pc, #196]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090aa:	4b30      	ldr	r3, [pc, #192]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	492d      	ldr	r1, [pc, #180]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090bc:	4b2b      	ldr	r3, [pc, #172]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	4928      	ldr	r1, [pc, #160]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090ce:	4b27      	ldr	r3, [pc, #156]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d2:	4a26      	ldr	r2, [pc, #152]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090da:	4b24      	ldr	r3, [pc, #144]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090de:	4b24      	ldr	r3, [pc, #144]	@ (8009170 <RCCEx_PLL3_Config+0x160>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	69d2      	ldr	r2, [r2, #28]
 80090e6:	00d2      	lsls	r2, r2, #3
 80090e8:	4920      	ldr	r1, [pc, #128]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090ee:	4b1f      	ldr	r3, [pc, #124]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f2:	4a1e      	ldr	r2, [pc, #120]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 80090f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009100:	4b1a      	ldr	r3, [pc, #104]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009104:	4a19      	ldr	r2, [pc, #100]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009106:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800910a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800910c:	e00f      	b.n	800912e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d106      	bne.n	8009122 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009114:	4b15      	ldr	r3, [pc, #84]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009118:	4a14      	ldr	r2, [pc, #80]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 800911a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800911e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009120:	e005      	b.n	800912e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009122:	4b12      	ldr	r3, [pc, #72]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009126:	4a11      	ldr	r2, [pc, #68]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009128:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800912c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800912e:	4b0f      	ldr	r3, [pc, #60]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a0e      	ldr	r2, [pc, #56]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800913a:	f7fc f95d 	bl	80053f8 <HAL_GetTick>
 800913e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009140:	e008      	b.n	8009154 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009142:	f7fc f959 	bl	80053f8 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e006      	b.n	8009162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009154:	4b05      	ldr	r3, [pc, #20]	@ (800916c <RCCEx_PLL3_Config+0x15c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f0      	beq.n	8009142 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	58024400 	.word	0x58024400
 8009170:	ffff0007 	.word	0xffff0007

08009174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e042      	b.n	800920c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800918c:	2b00      	cmp	r3, #0
 800918e:	d106      	bne.n	800919e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7f8 ff05 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2224      	movs	r2, #36	@ 0x24
 80091a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0201 	bic.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fe1e 	bl	8009e00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f8b3 	bl	8009330 <UART_SetConfig>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e01b      	b.n	800920c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689a      	ldr	r2, [r3, #8]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fe9d 	bl	8009f44 <UART_CheckIdleState>
 800920a:	4603      	mov	r3, r0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08a      	sub	sp, #40	@ 0x28
 8009218:	af02      	add	r7, sp, #8
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	4613      	mov	r3, r2
 8009222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800922a:	2b20      	cmp	r3, #32
 800922c:	d17b      	bne.n	8009326 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <HAL_UART_Transmit+0x26>
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e074      	b.n	8009328 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2221      	movs	r2, #33	@ 0x21
 800924a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800924e:	f7fc f8d3 	bl	80053f8 <HAL_GetTick>
 8009252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	88fa      	ldrh	r2, [r7, #6]
 8009258:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	88fa      	ldrh	r2, [r7, #6]
 8009260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800926c:	d108      	bne.n	8009280 <HAL_UART_Transmit+0x6c>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d104      	bne.n	8009280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	e003      	b.n	8009288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009288:	e030      	b.n	80092ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	2180      	movs	r1, #128	@ 0x80
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f000 feff 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e03d      	b.n	8009328 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10b      	bne.n	80092ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	3302      	adds	r3, #2
 80092c6:	61bb      	str	r3, [r7, #24]
 80092c8:	e007      	b.n	80092da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	781a      	ldrb	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	3301      	adds	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1c8      	bne.n	800928a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2200      	movs	r2, #0
 8009300:	2140      	movs	r1, #64	@ 0x40
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 fec8 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d005      	beq.n	800931a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e006      	b.n	8009328 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	e000      	b.n	8009328 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009326:	2302      	movs	r3, #2
  }
}
 8009328:	4618      	mov	r0, r3
 800932a:	3720      	adds	r7, #32
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009334:	b092      	sub	sp, #72	@ 0x48
 8009336:	af00      	add	r7, sp, #0
 8009338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	431a      	orrs	r2, r3
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	431a      	orrs	r2, r3
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	69db      	ldr	r3, [r3, #28]
 8009354:	4313      	orrs	r3, r2
 8009356:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4bbe      	ldr	r3, [pc, #760]	@ (8009658 <UART_SetConfig+0x328>)
 8009360:	4013      	ands	r3, r2
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	6812      	ldr	r2, [r2, #0]
 8009366:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009368:	430b      	orrs	r3, r1
 800936a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4ab3      	ldr	r2, [pc, #716]	@ (800965c <UART_SetConfig+0x32c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d004      	beq.n	800939c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009398:	4313      	orrs	r3, r2
 800939a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	4baf      	ldr	r3, [pc, #700]	@ (8009660 <UART_SetConfig+0x330>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093ac:	430b      	orrs	r3, r1
 80093ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	f023 010f 	bic.w	r1, r3, #15
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4aa6      	ldr	r2, [pc, #664]	@ (8009664 <UART_SetConfig+0x334>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d177      	bne.n	80094c0 <UART_SetConfig+0x190>
 80093d0:	4ba5      	ldr	r3, [pc, #660]	@ (8009668 <UART_SetConfig+0x338>)
 80093d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093d8:	2b28      	cmp	r3, #40	@ 0x28
 80093da:	d86d      	bhi.n	80094b8 <UART_SetConfig+0x188>
 80093dc:	a201      	add	r2, pc, #4	@ (adr r2, 80093e4 <UART_SetConfig+0xb4>)
 80093de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	08009489 	.word	0x08009489
 80093e8:	080094b9 	.word	0x080094b9
 80093ec:	080094b9 	.word	0x080094b9
 80093f0:	080094b9 	.word	0x080094b9
 80093f4:	080094b9 	.word	0x080094b9
 80093f8:	080094b9 	.word	0x080094b9
 80093fc:	080094b9 	.word	0x080094b9
 8009400:	080094b9 	.word	0x080094b9
 8009404:	08009491 	.word	0x08009491
 8009408:	080094b9 	.word	0x080094b9
 800940c:	080094b9 	.word	0x080094b9
 8009410:	080094b9 	.word	0x080094b9
 8009414:	080094b9 	.word	0x080094b9
 8009418:	080094b9 	.word	0x080094b9
 800941c:	080094b9 	.word	0x080094b9
 8009420:	080094b9 	.word	0x080094b9
 8009424:	08009499 	.word	0x08009499
 8009428:	080094b9 	.word	0x080094b9
 800942c:	080094b9 	.word	0x080094b9
 8009430:	080094b9 	.word	0x080094b9
 8009434:	080094b9 	.word	0x080094b9
 8009438:	080094b9 	.word	0x080094b9
 800943c:	080094b9 	.word	0x080094b9
 8009440:	080094b9 	.word	0x080094b9
 8009444:	080094a1 	.word	0x080094a1
 8009448:	080094b9 	.word	0x080094b9
 800944c:	080094b9 	.word	0x080094b9
 8009450:	080094b9 	.word	0x080094b9
 8009454:	080094b9 	.word	0x080094b9
 8009458:	080094b9 	.word	0x080094b9
 800945c:	080094b9 	.word	0x080094b9
 8009460:	080094b9 	.word	0x080094b9
 8009464:	080094a9 	.word	0x080094a9
 8009468:	080094b9 	.word	0x080094b9
 800946c:	080094b9 	.word	0x080094b9
 8009470:	080094b9 	.word	0x080094b9
 8009474:	080094b9 	.word	0x080094b9
 8009478:	080094b9 	.word	0x080094b9
 800947c:	080094b9 	.word	0x080094b9
 8009480:	080094b9 	.word	0x080094b9
 8009484:	080094b1 	.word	0x080094b1
 8009488:	2301      	movs	r3, #1
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948e:	e222      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009490:	2304      	movs	r3, #4
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009496:	e21e      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009498:	2308      	movs	r3, #8
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949e:	e21a      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80094a0:	2310      	movs	r3, #16
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e216      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80094a8:	2320      	movs	r3, #32
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e212      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80094b0:	2340      	movs	r3, #64	@ 0x40
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e20e      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80094b8:	2380      	movs	r3, #128	@ 0x80
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e20a      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a69      	ldr	r2, [pc, #420]	@ (800966c <UART_SetConfig+0x33c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d130      	bne.n	800952c <UART_SetConfig+0x1fc>
 80094ca:	4b67      	ldr	r3, [pc, #412]	@ (8009668 <UART_SetConfig+0x338>)
 80094cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	2b05      	cmp	r3, #5
 80094d4:	d826      	bhi.n	8009524 <UART_SetConfig+0x1f4>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <UART_SetConfig+0x1ac>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	080094f5 	.word	0x080094f5
 80094e0:	080094fd 	.word	0x080094fd
 80094e4:	08009505 	.word	0x08009505
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	08009515 	.word	0x08009515
 80094f0:	0800951d 	.word	0x0800951d
 80094f4:	2300      	movs	r3, #0
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e1ec      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80094fc:	2304      	movs	r3, #4
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e1e8      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009504:	2308      	movs	r3, #8
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e1e4      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800950c:	2310      	movs	r3, #16
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e1e0      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009514:	2320      	movs	r3, #32
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e1dc      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800951c:	2340      	movs	r3, #64	@ 0x40
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e1d8      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009524:	2380      	movs	r3, #128	@ 0x80
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e1d4      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a4f      	ldr	r2, [pc, #316]	@ (8009670 <UART_SetConfig+0x340>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d130      	bne.n	8009598 <UART_SetConfig+0x268>
 8009536:	4b4c      	ldr	r3, [pc, #304]	@ (8009668 <UART_SetConfig+0x338>)
 8009538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	2b05      	cmp	r3, #5
 8009540:	d826      	bhi.n	8009590 <UART_SetConfig+0x260>
 8009542:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <UART_SetConfig+0x218>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	08009561 	.word	0x08009561
 800954c:	08009569 	.word	0x08009569
 8009550:	08009571 	.word	0x08009571
 8009554:	08009579 	.word	0x08009579
 8009558:	08009581 	.word	0x08009581
 800955c:	08009589 	.word	0x08009589
 8009560:	2300      	movs	r3, #0
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e1b6      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009568:	2304      	movs	r3, #4
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e1b2      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009570:	2308      	movs	r3, #8
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e1ae      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009578:	2310      	movs	r3, #16
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e1aa      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009580:	2320      	movs	r3, #32
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e1a6      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009588:	2340      	movs	r3, #64	@ 0x40
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e1a2      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009590:	2380      	movs	r3, #128	@ 0x80
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e19e      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a35      	ldr	r2, [pc, #212]	@ (8009674 <UART_SetConfig+0x344>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d130      	bne.n	8009604 <UART_SetConfig+0x2d4>
 80095a2:	4b31      	ldr	r3, [pc, #196]	@ (8009668 <UART_SetConfig+0x338>)
 80095a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	d826      	bhi.n	80095fc <UART_SetConfig+0x2cc>
 80095ae:	a201      	add	r2, pc, #4	@ (adr r2, 80095b4 <UART_SetConfig+0x284>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	080095cd 	.word	0x080095cd
 80095b8:	080095d5 	.word	0x080095d5
 80095bc:	080095dd 	.word	0x080095dd
 80095c0:	080095e5 	.word	0x080095e5
 80095c4:	080095ed 	.word	0x080095ed
 80095c8:	080095f5 	.word	0x080095f5
 80095cc:	2300      	movs	r3, #0
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e180      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80095d4:	2304      	movs	r3, #4
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e17c      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80095dc:	2308      	movs	r3, #8
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e178      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80095e4:	2310      	movs	r3, #16
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e174      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80095ec:	2320      	movs	r3, #32
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e170      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e16c      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80095fc:	2380      	movs	r3, #128	@ 0x80
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e168      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a1b      	ldr	r2, [pc, #108]	@ (8009678 <UART_SetConfig+0x348>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d142      	bne.n	8009694 <UART_SetConfig+0x364>
 800960e:	4b16      	ldr	r3, [pc, #88]	@ (8009668 <UART_SetConfig+0x338>)
 8009610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b05      	cmp	r3, #5
 8009618:	d838      	bhi.n	800968c <UART_SetConfig+0x35c>
 800961a:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <UART_SetConfig+0x2f0>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	08009639 	.word	0x08009639
 8009624:	08009641 	.word	0x08009641
 8009628:	08009649 	.word	0x08009649
 800962c:	08009651 	.word	0x08009651
 8009630:	0800967d 	.word	0x0800967d
 8009634:	08009685 	.word	0x08009685
 8009638:	2300      	movs	r3, #0
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e14a      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009640:	2304      	movs	r3, #4
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e146      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009648:	2308      	movs	r3, #8
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e142      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009650:	2310      	movs	r3, #16
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e13e      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009658:	cfff69f3 	.word	0xcfff69f3
 800965c:	58000c00 	.word	0x58000c00
 8009660:	11fff4ff 	.word	0x11fff4ff
 8009664:	40011000 	.word	0x40011000
 8009668:	58024400 	.word	0x58024400
 800966c:	40004400 	.word	0x40004400
 8009670:	40004800 	.word	0x40004800
 8009674:	40004c00 	.word	0x40004c00
 8009678:	40005000 	.word	0x40005000
 800967c:	2320      	movs	r3, #32
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e128      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009684:	2340      	movs	r3, #64	@ 0x40
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968a:	e124      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800968c:	2380      	movs	r3, #128	@ 0x80
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e120      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4acb      	ldr	r2, [pc, #812]	@ (80099c8 <UART_SetConfig+0x698>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d176      	bne.n	800978c <UART_SetConfig+0x45c>
 800969e:	4bcb      	ldr	r3, [pc, #812]	@ (80099cc <UART_SetConfig+0x69c>)
 80096a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096a6:	2b28      	cmp	r3, #40	@ 0x28
 80096a8:	d86c      	bhi.n	8009784 <UART_SetConfig+0x454>
 80096aa:	a201      	add	r2, pc, #4	@ (adr r2, 80096b0 <UART_SetConfig+0x380>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	08009755 	.word	0x08009755
 80096b4:	08009785 	.word	0x08009785
 80096b8:	08009785 	.word	0x08009785
 80096bc:	08009785 	.word	0x08009785
 80096c0:	08009785 	.word	0x08009785
 80096c4:	08009785 	.word	0x08009785
 80096c8:	08009785 	.word	0x08009785
 80096cc:	08009785 	.word	0x08009785
 80096d0:	0800975d 	.word	0x0800975d
 80096d4:	08009785 	.word	0x08009785
 80096d8:	08009785 	.word	0x08009785
 80096dc:	08009785 	.word	0x08009785
 80096e0:	08009785 	.word	0x08009785
 80096e4:	08009785 	.word	0x08009785
 80096e8:	08009785 	.word	0x08009785
 80096ec:	08009785 	.word	0x08009785
 80096f0:	08009765 	.word	0x08009765
 80096f4:	08009785 	.word	0x08009785
 80096f8:	08009785 	.word	0x08009785
 80096fc:	08009785 	.word	0x08009785
 8009700:	08009785 	.word	0x08009785
 8009704:	08009785 	.word	0x08009785
 8009708:	08009785 	.word	0x08009785
 800970c:	08009785 	.word	0x08009785
 8009710:	0800976d 	.word	0x0800976d
 8009714:	08009785 	.word	0x08009785
 8009718:	08009785 	.word	0x08009785
 800971c:	08009785 	.word	0x08009785
 8009720:	08009785 	.word	0x08009785
 8009724:	08009785 	.word	0x08009785
 8009728:	08009785 	.word	0x08009785
 800972c:	08009785 	.word	0x08009785
 8009730:	08009775 	.word	0x08009775
 8009734:	08009785 	.word	0x08009785
 8009738:	08009785 	.word	0x08009785
 800973c:	08009785 	.word	0x08009785
 8009740:	08009785 	.word	0x08009785
 8009744:	08009785 	.word	0x08009785
 8009748:	08009785 	.word	0x08009785
 800974c:	08009785 	.word	0x08009785
 8009750:	0800977d 	.word	0x0800977d
 8009754:	2301      	movs	r3, #1
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975a:	e0bc      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800975c:	2304      	movs	r3, #4
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009762:	e0b8      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009764:	2308      	movs	r3, #8
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976a:	e0b4      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800976c:	2310      	movs	r3, #16
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e0b0      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009774:	2320      	movs	r3, #32
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e0ac      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800977c:	2340      	movs	r3, #64	@ 0x40
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e0a8      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009784:	2380      	movs	r3, #128	@ 0x80
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e0a4      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a8f      	ldr	r2, [pc, #572]	@ (80099d0 <UART_SetConfig+0x6a0>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d130      	bne.n	80097f8 <UART_SetConfig+0x4c8>
 8009796:	4b8d      	ldr	r3, [pc, #564]	@ (80099cc <UART_SetConfig+0x69c>)
 8009798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	2b05      	cmp	r3, #5
 80097a0:	d826      	bhi.n	80097f0 <UART_SetConfig+0x4c0>
 80097a2:	a201      	add	r2, pc, #4	@ (adr r2, 80097a8 <UART_SetConfig+0x478>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	080097c1 	.word	0x080097c1
 80097ac:	080097c9 	.word	0x080097c9
 80097b0:	080097d1 	.word	0x080097d1
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	080097e1 	.word	0x080097e1
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	2300      	movs	r3, #0
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c6:	e086      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80097c8:	2304      	movs	r3, #4
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ce:	e082      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80097d0:	2308      	movs	r3, #8
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d6:	e07e      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80097d8:	2310      	movs	r3, #16
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e07a      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80097e0:	2320      	movs	r3, #32
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e076      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80097e8:	2340      	movs	r3, #64	@ 0x40
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e072      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80097f0:	2380      	movs	r3, #128	@ 0x80
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e06e      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a75      	ldr	r2, [pc, #468]	@ (80099d4 <UART_SetConfig+0x6a4>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d130      	bne.n	8009864 <UART_SetConfig+0x534>
 8009802:	4b72      	ldr	r3, [pc, #456]	@ (80099cc <UART_SetConfig+0x69c>)
 8009804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b05      	cmp	r3, #5
 800980c:	d826      	bhi.n	800985c <UART_SetConfig+0x52c>
 800980e:	a201      	add	r2, pc, #4	@ (adr r2, 8009814 <UART_SetConfig+0x4e4>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	0800982d 	.word	0x0800982d
 8009818:	08009835 	.word	0x08009835
 800981c:	0800983d 	.word	0x0800983d
 8009820:	08009845 	.word	0x08009845
 8009824:	0800984d 	.word	0x0800984d
 8009828:	08009855 	.word	0x08009855
 800982c:	2300      	movs	r3, #0
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009832:	e050      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983a:	e04c      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009842:	e048      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984a:	e044      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800984c:	2320      	movs	r3, #32
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009852:	e040      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009854:	2340      	movs	r3, #64	@ 0x40
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e03c      	b.n	80098d6 <UART_SetConfig+0x5a6>
 800985c:	2380      	movs	r3, #128	@ 0x80
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e038      	b.n	80098d6 <UART_SetConfig+0x5a6>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a5b      	ldr	r2, [pc, #364]	@ (80099d8 <UART_SetConfig+0x6a8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d130      	bne.n	80098d0 <UART_SetConfig+0x5a0>
 800986e:	4b57      	ldr	r3, [pc, #348]	@ (80099cc <UART_SetConfig+0x69c>)
 8009870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b05      	cmp	r3, #5
 8009878:	d826      	bhi.n	80098c8 <UART_SetConfig+0x598>
 800987a:	a201      	add	r2, pc, #4	@ (adr r2, 8009880 <UART_SetConfig+0x550>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	08009899 	.word	0x08009899
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098a9 	.word	0x080098a9
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	2302      	movs	r3, #2
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989e:	e01a      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80098a0:	2304      	movs	r3, #4
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a6:	e016      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80098a8:	2308      	movs	r3, #8
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ae:	e012      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80098b0:	2310      	movs	r3, #16
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b6:	e00e      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80098b8:	2320      	movs	r3, #32
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e00a      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80098c0:	2340      	movs	r3, #64	@ 0x40
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e006      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80098c8:	2380      	movs	r3, #128	@ 0x80
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e002      	b.n	80098d6 <UART_SetConfig+0x5a6>
 80098d0:	2380      	movs	r3, #128	@ 0x80
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a3f      	ldr	r2, [pc, #252]	@ (80099d8 <UART_SetConfig+0x6a8>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	f040 80f8 	bne.w	8009ad2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	dc46      	bgt.n	8009978 <UART_SetConfig+0x648>
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	f2c0 8082 	blt.w	80099f4 <UART_SetConfig+0x6c4>
 80098f0:	3b02      	subs	r3, #2
 80098f2:	2b1e      	cmp	r3, #30
 80098f4:	d87e      	bhi.n	80099f4 <UART_SetConfig+0x6c4>
 80098f6:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <UART_SetConfig+0x5cc>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	0800997f 	.word	0x0800997f
 8009900:	080099f5 	.word	0x080099f5
 8009904:	08009987 	.word	0x08009987
 8009908:	080099f5 	.word	0x080099f5
 800990c:	080099f5 	.word	0x080099f5
 8009910:	080099f5 	.word	0x080099f5
 8009914:	08009997 	.word	0x08009997
 8009918:	080099f5 	.word	0x080099f5
 800991c:	080099f5 	.word	0x080099f5
 8009920:	080099f5 	.word	0x080099f5
 8009924:	080099f5 	.word	0x080099f5
 8009928:	080099f5 	.word	0x080099f5
 800992c:	080099f5 	.word	0x080099f5
 8009930:	080099f5 	.word	0x080099f5
 8009934:	080099a7 	.word	0x080099a7
 8009938:	080099f5 	.word	0x080099f5
 800993c:	080099f5 	.word	0x080099f5
 8009940:	080099f5 	.word	0x080099f5
 8009944:	080099f5 	.word	0x080099f5
 8009948:	080099f5 	.word	0x080099f5
 800994c:	080099f5 	.word	0x080099f5
 8009950:	080099f5 	.word	0x080099f5
 8009954:	080099f5 	.word	0x080099f5
 8009958:	080099f5 	.word	0x080099f5
 800995c:	080099f5 	.word	0x080099f5
 8009960:	080099f5 	.word	0x080099f5
 8009964:	080099f5 	.word	0x080099f5
 8009968:	080099f5 	.word	0x080099f5
 800996c:	080099f5 	.word	0x080099f5
 8009970:	080099f5 	.word	0x080099f5
 8009974:	080099e7 	.word	0x080099e7
 8009978:	2b40      	cmp	r3, #64	@ 0x40
 800997a:	d037      	beq.n	80099ec <UART_SetConfig+0x6bc>
 800997c:	e03a      	b.n	80099f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800997e:	f7fe ffd7 	bl	8008930 <HAL_RCCEx_GetD3PCLK1Freq>
 8009982:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009984:	e03c      	b.n	8009a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe ffe6 	bl	800895c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009994:	e034      	b.n	8009a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009996:	f107 0318 	add.w	r3, r7, #24
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff f932 	bl	8008c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a4:	e02c      	b.n	8009a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a6:	4b09      	ldr	r3, [pc, #36]	@ (80099cc <UART_SetConfig+0x69c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0320 	and.w	r3, r3, #32
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d016      	beq.n	80099e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099b2:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <UART_SetConfig+0x69c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	08db      	lsrs	r3, r3, #3
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	4a07      	ldr	r2, [pc, #28]	@ (80099dc <UART_SetConfig+0x6ac>)
 80099be:	fa22 f303 	lsr.w	r3, r2, r3
 80099c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099c4:	e01c      	b.n	8009a00 <UART_SetConfig+0x6d0>
 80099c6:	bf00      	nop
 80099c8:	40011400 	.word	0x40011400
 80099cc:	58024400 	.word	0x58024400
 80099d0:	40007800 	.word	0x40007800
 80099d4:	40007c00 	.word	0x40007c00
 80099d8:	58000c00 	.word	0x58000c00
 80099dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80099e0:	4b9d      	ldr	r3, [pc, #628]	@ (8009c58 <UART_SetConfig+0x928>)
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e4:	e00c      	b.n	8009a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099e6:	4b9d      	ldr	r3, [pc, #628]	@ (8009c5c <UART_SetConfig+0x92c>)
 80099e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ea:	e009      	b.n	8009a00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f2:	e005      	b.n	8009a00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80099fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 81de 	beq.w	8009dc4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0c:	4a94      	ldr	r2, [pc, #592]	@ (8009c60 <UART_SetConfig+0x930>)
 8009a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a12:	461a      	mov	r2, r3
 8009a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d305      	bcc.n	8009a38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d903      	bls.n	8009a40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a3e:	e1c1      	b.n	8009dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a42:	2200      	movs	r2, #0
 8009a44:	60bb      	str	r3, [r7, #8]
 8009a46:	60fa      	str	r2, [r7, #12]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4c:	4a84      	ldr	r2, [pc, #528]	@ (8009c60 <UART_SetConfig+0x930>)
 8009a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	2200      	movs	r2, #0
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a62:	f7f6 fc8d 	bl	8000380 <__aeabi_uldivmod>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	020b      	lsls	r3, r1, #8
 8009a78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a7c:	0202      	lsls	r2, r0, #8
 8009a7e:	6979      	ldr	r1, [r7, #20]
 8009a80:	6849      	ldr	r1, [r1, #4]
 8009a82:	0849      	lsrs	r1, r1, #1
 8009a84:	2000      	movs	r0, #0
 8009a86:	460c      	mov	r4, r1
 8009a88:	4605      	mov	r5, r0
 8009a8a:	eb12 0804 	adds.w	r8, r2, r4
 8009a8e:	eb43 0905 	adc.w	r9, r3, r5
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	469a      	mov	sl, r3
 8009a9a:	4693      	mov	fp, r2
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	f7f6 fc6c 	bl	8000380 <__aeabi_uldivmod>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4613      	mov	r3, r2
 8009aae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ab6:	d308      	bcc.n	8009aca <UART_SetConfig+0x79a>
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009abe:	d204      	bcs.n	8009aca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ac6:	60da      	str	r2, [r3, #12]
 8009ac8:	e17c      	b.n	8009dc4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ad0:	e178      	b.n	8009dc4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ada:	f040 80c5 	bne.w	8009c68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009ade:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	dc48      	bgt.n	8009b78 <UART_SetConfig+0x848>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	db7b      	blt.n	8009be2 <UART_SetConfig+0x8b2>
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d879      	bhi.n	8009be2 <UART_SetConfig+0x8b2>
 8009aee:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <UART_SetConfig+0x7c4>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b7f 	.word	0x08009b7f
 8009af8:	08009b87 	.word	0x08009b87
 8009afc:	08009be3 	.word	0x08009be3
 8009b00:	08009be3 	.word	0x08009be3
 8009b04:	08009b8f 	.word	0x08009b8f
 8009b08:	08009be3 	.word	0x08009be3
 8009b0c:	08009be3 	.word	0x08009be3
 8009b10:	08009be3 	.word	0x08009be3
 8009b14:	08009b9f 	.word	0x08009b9f
 8009b18:	08009be3 	.word	0x08009be3
 8009b1c:	08009be3 	.word	0x08009be3
 8009b20:	08009be3 	.word	0x08009be3
 8009b24:	08009be3 	.word	0x08009be3
 8009b28:	08009be3 	.word	0x08009be3
 8009b2c:	08009be3 	.word	0x08009be3
 8009b30:	08009be3 	.word	0x08009be3
 8009b34:	08009baf 	.word	0x08009baf
 8009b38:	08009be3 	.word	0x08009be3
 8009b3c:	08009be3 	.word	0x08009be3
 8009b40:	08009be3 	.word	0x08009be3
 8009b44:	08009be3 	.word	0x08009be3
 8009b48:	08009be3 	.word	0x08009be3
 8009b4c:	08009be3 	.word	0x08009be3
 8009b50:	08009be3 	.word	0x08009be3
 8009b54:	08009be3 	.word	0x08009be3
 8009b58:	08009be3 	.word	0x08009be3
 8009b5c:	08009be3 	.word	0x08009be3
 8009b60:	08009be3 	.word	0x08009be3
 8009b64:	08009be3 	.word	0x08009be3
 8009b68:	08009be3 	.word	0x08009be3
 8009b6c:	08009be3 	.word	0x08009be3
 8009b70:	08009be3 	.word	0x08009be3
 8009b74:	08009bd5 	.word	0x08009bd5
 8009b78:	2b40      	cmp	r3, #64	@ 0x40
 8009b7a:	d02e      	beq.n	8009bda <UART_SetConfig+0x8aa>
 8009b7c:	e031      	b.n	8009be2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b7e:	f7fd fca1 	bl	80074c4 <HAL_RCC_GetPCLK1Freq>
 8009b82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b84:	e033      	b.n	8009bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b86:	f7fd fcb3 	bl	80074f0 <HAL_RCC_GetPCLK2Freq>
 8009b8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b8c:	e02f      	b.n	8009bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fee2 	bl	800895c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9c:	e027      	b.n	8009bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b9e:	f107 0318 	add.w	r3, r7, #24
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff f82e 	bl	8008c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bac:	e01f      	b.n	8009bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bae:	4b2d      	ldr	r3, [pc, #180]	@ (8009c64 <UART_SetConfig+0x934>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d009      	beq.n	8009bce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bba:	4b2a      	ldr	r3, [pc, #168]	@ (8009c64 <UART_SetConfig+0x934>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	08db      	lsrs	r3, r3, #3
 8009bc0:	f003 0303 	and.w	r3, r3, #3
 8009bc4:	4a24      	ldr	r2, [pc, #144]	@ (8009c58 <UART_SetConfig+0x928>)
 8009bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bcc:	e00f      	b.n	8009bee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009bce:	4b22      	ldr	r3, [pc, #136]	@ (8009c58 <UART_SetConfig+0x928>)
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd2:	e00c      	b.n	8009bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bd4:	4b21      	ldr	r3, [pc, #132]	@ (8009c5c <UART_SetConfig+0x92c>)
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd8:	e009      	b.n	8009bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be0:	e005      	b.n	8009bee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80e7 	beq.w	8009dc4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfa:	4a19      	ldr	r2, [pc, #100]	@ (8009c60 <UART_SetConfig+0x930>)
 8009bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c00:	461a      	mov	r2, r3
 8009c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c08:	005a      	lsls	r2, r3, #1
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	085b      	lsrs	r3, r3, #1
 8009c10:	441a      	add	r2, r3
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1e:	2b0f      	cmp	r3, #15
 8009c20:	d916      	bls.n	8009c50 <UART_SetConfig+0x920>
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c28:	d212      	bcs.n	8009c50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	f023 030f 	bic.w	r3, r3, #15
 8009c32:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009c42:	4313      	orrs	r3, r2
 8009c44:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009c4c:	60da      	str	r2, [r3, #12]
 8009c4e:	e0b9      	b.n	8009dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c56:	e0b5      	b.n	8009dc4 <UART_SetConfig+0xa94>
 8009c58:	03d09000 	.word	0x03d09000
 8009c5c:	003d0900 	.word	0x003d0900
 8009c60:	0809969c 	.word	0x0809969c
 8009c64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	dc49      	bgt.n	8009d04 <UART_SetConfig+0x9d4>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	db7c      	blt.n	8009d6e <UART_SetConfig+0xa3e>
 8009c74:	2b20      	cmp	r3, #32
 8009c76:	d87a      	bhi.n	8009d6e <UART_SetConfig+0xa3e>
 8009c78:	a201      	add	r2, pc, #4	@ (adr r2, 8009c80 <UART_SetConfig+0x950>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009d0b 	.word	0x08009d0b
 8009c84:	08009d13 	.word	0x08009d13
 8009c88:	08009d6f 	.word	0x08009d6f
 8009c8c:	08009d6f 	.word	0x08009d6f
 8009c90:	08009d1b 	.word	0x08009d1b
 8009c94:	08009d6f 	.word	0x08009d6f
 8009c98:	08009d6f 	.word	0x08009d6f
 8009c9c:	08009d6f 	.word	0x08009d6f
 8009ca0:	08009d2b 	.word	0x08009d2b
 8009ca4:	08009d6f 	.word	0x08009d6f
 8009ca8:	08009d6f 	.word	0x08009d6f
 8009cac:	08009d6f 	.word	0x08009d6f
 8009cb0:	08009d6f 	.word	0x08009d6f
 8009cb4:	08009d6f 	.word	0x08009d6f
 8009cb8:	08009d6f 	.word	0x08009d6f
 8009cbc:	08009d6f 	.word	0x08009d6f
 8009cc0:	08009d3b 	.word	0x08009d3b
 8009cc4:	08009d6f 	.word	0x08009d6f
 8009cc8:	08009d6f 	.word	0x08009d6f
 8009ccc:	08009d6f 	.word	0x08009d6f
 8009cd0:	08009d6f 	.word	0x08009d6f
 8009cd4:	08009d6f 	.word	0x08009d6f
 8009cd8:	08009d6f 	.word	0x08009d6f
 8009cdc:	08009d6f 	.word	0x08009d6f
 8009ce0:	08009d6f 	.word	0x08009d6f
 8009ce4:	08009d6f 	.word	0x08009d6f
 8009ce8:	08009d6f 	.word	0x08009d6f
 8009cec:	08009d6f 	.word	0x08009d6f
 8009cf0:	08009d6f 	.word	0x08009d6f
 8009cf4:	08009d6f 	.word	0x08009d6f
 8009cf8:	08009d6f 	.word	0x08009d6f
 8009cfc:	08009d6f 	.word	0x08009d6f
 8009d00:	08009d61 	.word	0x08009d61
 8009d04:	2b40      	cmp	r3, #64	@ 0x40
 8009d06:	d02e      	beq.n	8009d66 <UART_SetConfig+0xa36>
 8009d08:	e031      	b.n	8009d6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d0a:	f7fd fbdb 	bl	80074c4 <HAL_RCC_GetPCLK1Freq>
 8009d0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d10:	e033      	b.n	8009d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d12:	f7fd fbed 	bl	80074f0 <HAL_RCC_GetPCLK2Freq>
 8009d16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d18:	e02f      	b.n	8009d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fe1c 	bl	800895c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d28:	e027      	b.n	8009d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d2a:	f107 0318 	add.w	r3, r7, #24
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe ff68 	bl	8008c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d38:	e01f      	b.n	8009d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8009df0 <UART_SetConfig+0xac0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0320 	and.w	r3, r3, #32
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d46:	4b2a      	ldr	r3, [pc, #168]	@ (8009df0 <UART_SetConfig+0xac0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	08db      	lsrs	r3, r3, #3
 8009d4c:	f003 0303 	and.w	r3, r3, #3
 8009d50:	4a28      	ldr	r2, [pc, #160]	@ (8009df4 <UART_SetConfig+0xac4>)
 8009d52:	fa22 f303 	lsr.w	r3, r2, r3
 8009d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d58:	e00f      	b.n	8009d7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d5a:	4b26      	ldr	r3, [pc, #152]	@ (8009df4 <UART_SetConfig+0xac4>)
 8009d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d5e:	e00c      	b.n	8009d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d60:	4b25      	ldr	r3, [pc, #148]	@ (8009df8 <UART_SetConfig+0xac8>)
 8009d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d64:	e009      	b.n	8009d7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d6c:	e005      	b.n	8009d7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d78:	bf00      	nop
    }

    if (pclk != 0U)
 8009d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d021      	beq.n	8009dc4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d84:	4a1d      	ldr	r2, [pc, #116]	@ (8009dfc <UART_SetConfig+0xacc>)
 8009d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	441a      	add	r2, r3
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da6:	2b0f      	cmp	r3, #15
 8009da8:	d909      	bls.n	8009dbe <UART_SetConfig+0xa8e>
 8009daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db0:	d205      	bcs.n	8009dbe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	60da      	str	r2, [r3, #12]
 8009dbc:	e002      	b.n	8009dc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009de0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3748      	adds	r7, #72	@ 0x48
 8009de8:	46bd      	mov	sp, r7
 8009dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dee:	bf00      	nop
 8009df0:	58024400 	.word	0x58024400
 8009df4:	03d09000 	.word	0x03d09000
 8009df8:	003d0900 	.word	0x003d0900
 8009dfc:	0809969c 	.word	0x0809969c

08009e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0c:	f003 0308 	and.w	r3, r3, #8
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00a      	beq.n	8009e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01a      	beq.n	8009f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009efe:	d10a      	bne.n	8009f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00a      	beq.n	8009f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	605a      	str	r2, [r3, #4]
  }
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b098      	sub	sp, #96	@ 0x60
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f54:	f7fb fa50 	bl	80053f8 <HAL_GetTick>
 8009f58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d12f      	bne.n	8009fc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f70:	2200      	movs	r2, #0
 8009f72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f88e 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d022      	beq.n	8009fc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8a:	e853 3f00 	ldrex	r3, [r3]
 8009f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e6      	bne.n	8009f82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e063      	b.n	800a090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d149      	bne.n	800a06a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f857 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d03c      	beq.n	800a06a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a010:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e6      	bne.n	8009ff0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	60fb      	str	r3, [r7, #12]
   return(result);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f023 0301 	bic.w	r3, r3, #1
 800a038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a042:	61fa      	str	r2, [r7, #28]
 800a044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	69b9      	ldr	r1, [r7, #24]
 800a048:	69fa      	ldr	r2, [r7, #28]
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	617b      	str	r3, [r7, #20]
   return(result);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e012      	b.n	800a090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2220      	movs	r2, #32
 800a06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3758      	adds	r7, #88	@ 0x58
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a8:	e04f      	b.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d04b      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b2:	f7fb f9a1 	bl	80053f8 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d302      	bcc.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e04e      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0304 	and.w	r3, r3, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d037      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b80      	cmp	r3, #128	@ 0x80
 800a0de:	d034      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b40      	cmp	r3, #64	@ 0x40
 800a0e4:	d031      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d110      	bne.n	800a116 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 f839 	bl	800a174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2208      	movs	r2, #8
 800a106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e029      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a124:	d111      	bne.n	800a14a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 f81f 	bl	800a174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e00f      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69da      	ldr	r2, [r3, #28]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4013      	ands	r3, r2
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	bf0c      	ite	eq
 800a15a:	2301      	moveq	r3, #1
 800a15c:	2300      	movne	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	429a      	cmp	r2, r3
 800a166:	d0a0      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a174:	b480      	push	{r7}
 800a176:	b095      	sub	sp, #84	@ 0x54
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a19a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a19c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e6      	bne.n	800a17c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a23c <UART_EndRxTransfer+0xc8>)
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e5      	bne.n	800a1ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d118      	bne.n	800a21c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f023 0310 	bic.w	r3, r3, #16
 800a1fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6979      	ldr	r1, [r7, #20]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	613b      	str	r3, [r7, #16]
   return(result);
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e6      	bne.n	800a1ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2220      	movs	r2, #32
 800a220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a230:	bf00      	nop
 800a232:	3754      	adds	r7, #84	@ 0x54
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	effffffe 	.word	0xeffffffe

0800a240 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d101      	bne.n	800a256 <HAL_UARTEx_DisableFifoMode+0x16>
 800a252:	2302      	movs	r3, #2
 800a254:	e027      	b.n	800a2a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2224      	movs	r2, #36	@ 0x24
 800a262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0201 	bic.w	r2, r2, #1
 800a27c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a284:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2220      	movs	r2, #32
 800a298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e02d      	b.n	800a326 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2224      	movs	r2, #36	@ 0x24
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0201 	bic.w	r2, r2, #1
 800a2f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f850 	bl	800a3ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a342:	2302      	movs	r3, #2
 800a344:	e02d      	b.n	800a3a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2224      	movs	r2, #36	@ 0x24
 800a352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 0201 	bic.w	r2, r2, #1
 800a36c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f812 	bl	800a3ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d108      	bne.n	800a3ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3cc:	e031      	b.n	800a432 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3ce:	2310      	movs	r3, #16
 800a3d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3d2:	2310      	movs	r3, #16
 800a3d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	0e5b      	lsrs	r3, r3, #25
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	0f5b      	lsrs	r3, r3, #29
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f003 0307 	and.w	r3, r3, #7
 800a3f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	7b3a      	ldrb	r2, [r7, #12]
 800a3fa:	4911      	ldr	r1, [pc, #68]	@ (800a440 <UARTEx_SetNbDataToProcess+0x94>)
 800a3fc:	5c8a      	ldrb	r2, [r1, r2]
 800a3fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a402:	7b3a      	ldrb	r2, [r7, #12]
 800a404:	490f      	ldr	r1, [pc, #60]	@ (800a444 <UARTEx_SetNbDataToProcess+0x98>)
 800a406:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a408:	fb93 f3f2 	sdiv	r3, r3, r2
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	7b7a      	ldrb	r2, [r7, #13]
 800a418:	4909      	ldr	r1, [pc, #36]	@ (800a440 <UARTEx_SetNbDataToProcess+0x94>)
 800a41a:	5c8a      	ldrb	r2, [r1, r2]
 800a41c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a420:	7b7a      	ldrb	r2, [r7, #13]
 800a422:	4908      	ldr	r1, [pc, #32]	@ (800a444 <UARTEx_SetNbDataToProcess+0x98>)
 800a424:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a426:	fb93 f3f2 	sdiv	r3, r3, r2
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a432:	bf00      	nop
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	080996b4 	.word	0x080996b4
 800a444:	080996bc 	.word	0x080996bc

0800a448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a448:	b084      	sub	sp, #16
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	f107 001c 	add.w	r0, r7, #28
 800a456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a45a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d121      	bne.n	800a4a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a466:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	4b2c      	ldr	r3, [pc, #176]	@ (800a524 <USB_CoreInit+0xdc>)
 800a474:	4013      	ands	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d105      	bne.n	800a49a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 faaa 	bl	800a9f4 <USB_CoreReset>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]
 800a4a4:	e01b      	b.n	800a4de <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa9e 	bl	800a9f4 <USB_CoreReset>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a4bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800a4d0:	e005      	b.n	800a4de <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a4de:	7fbb      	ldrb	r3, [r7, #30]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d116      	bne.n	800a512 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a528 <USB_CoreInit+0xe0>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f043 0206 	orr.w	r2, r3, #6
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f043 0220 	orr.w	r2, r3, #32
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a512:	7bfb      	ldrb	r3, [r7, #15]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a51e:	b004      	add	sp, #16
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	ffbdffbf 	.word	0xffbdffbf
 800a528:	03ee0000 	.word	0x03ee0000

0800a52c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f023 0201 	bic.w	r2, r3, #1
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d115      	bne.n	800a59c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a57c:	200a      	movs	r0, #10
 800a57e:	f7fa ff47 	bl	8005410 <HAL_Delay>
      ms += 10U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	330a      	adds	r3, #10
 800a586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fa25 	bl	800a9d8 <USB_GetMode>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b01      	cmp	r3, #1
 800a592:	d01e      	beq.n	800a5d2 <USB_SetCurrentMode+0x84>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2bc7      	cmp	r3, #199	@ 0xc7
 800a598:	d9f0      	bls.n	800a57c <USB_SetCurrentMode+0x2e>
 800a59a:	e01a      	b.n	800a5d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d115      	bne.n	800a5ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5ae:	200a      	movs	r0, #10
 800a5b0:	f7fa ff2e 	bl	8005410 <HAL_Delay>
      ms += 10U;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	330a      	adds	r3, #10
 800a5b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fa0c 	bl	800a9d8 <USB_GetMode>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d005      	beq.n	800a5d2 <USB_SetCurrentMode+0x84>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5ca:	d9f0      	bls.n	800a5ae <USB_SetCurrentMode+0x60>
 800a5cc:	e001      	b.n	800a5d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e005      	b.n	800a5de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2bc8      	cmp	r3, #200	@ 0xc8
 800a5d6:	d101      	bne.n	800a5dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e000      	b.n	800a5de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b086      	sub	sp, #24
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a5f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a602:	2300      	movs	r3, #0
 800a604:	613b      	str	r3, [r7, #16]
 800a606:	e009      	b.n	800a61c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3340      	adds	r3, #64	@ 0x40
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	2200      	movs	r2, #0
 800a614:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	3301      	adds	r3, #1
 800a61a:	613b      	str	r3, [r7, #16]
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	2b0e      	cmp	r3, #14
 800a620:	d9f2      	bls.n	800a608 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a622:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a626:	2b00      	cmp	r3, #0
 800a628:	d11c      	bne.n	800a664 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a638:	f043 0302 	orr.w	r3, r3, #2
 800a63c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a642:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	e005      	b.n	800a670 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a676:	461a      	mov	r2, r3
 800a678:	2300      	movs	r3, #0
 800a67a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a67c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a680:	2b01      	cmp	r3, #1
 800a682:	d10d      	bne.n	800a6a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d104      	bne.n	800a696 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a68c:	2100      	movs	r1, #0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f968 	bl	800a964 <USB_SetDevSpeed>
 800a694:	e008      	b.n	800a6a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a696:	2101      	movs	r1, #1
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f963 	bl	800a964 <USB_SetDevSpeed>
 800a69e:	e003      	b.n	800a6a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6a0:	2103      	movs	r1, #3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f95e 	bl	800a964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6a8:	2110      	movs	r1, #16
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f8fa 	bl	800a8a4 <USB_FlushTxFifo>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f924 	bl	800a908 <USB_FlushRxFifo>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6dc:	461a      	mov	r2, r3
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	613b      	str	r3, [r7, #16]
 800a6f2:	e043      	b.n	800a77c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a70a:	d118      	bne.n	800a73e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71e:	461a      	mov	r2, r3
 800a720:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	e013      	b.n	800a750 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a734:	461a      	mov	r2, r3
 800a736:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	e008      	b.n	800a750 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a74a:	461a      	mov	r2, r3
 800a74c:	2300      	movs	r3, #0
 800a74e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75c:	461a      	mov	r2, r3
 800a75e:	2300      	movs	r3, #0
 800a760:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a76e:	461a      	mov	r2, r3
 800a770:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a774:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	3301      	adds	r3, #1
 800a77a:	613b      	str	r3, [r7, #16]
 800a77c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a780:	461a      	mov	r2, r3
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	4293      	cmp	r3, r2
 800a786:	d3b5      	bcc.n	800a6f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
 800a78c:	e043      	b.n	800a816 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7a4:	d118      	bne.n	800a7d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	e013      	b.n	800a7ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	e008      	b.n	800a7ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a808:	461a      	mov	r2, r3
 800a80a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a80e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	3301      	adds	r3, #1
 800a814:	613b      	str	r3, [r7, #16]
 800a816:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a81a:	461a      	mov	r2, r3
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	4293      	cmp	r3, r2
 800a820:	d3b5      	bcc.n	800a78e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a834:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a842:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a844:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d105      	bne.n	800a858 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	f043 0210 	orr.w	r2, r3, #16
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699a      	ldr	r2, [r3, #24]
 800a85c:	4b0f      	ldr	r3, [pc, #60]	@ (800a89c <USB_DevInit+0x2b4>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a864:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	f043 0208 	orr.w	r2, r3, #8
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a878:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d105      	bne.n	800a88c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699a      	ldr	r2, [r3, #24]
 800a884:	4b06      	ldr	r3, [pc, #24]	@ (800a8a0 <USB_DevInit+0x2b8>)
 800a886:	4313      	orrs	r3, r2
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a898:	b004      	add	sp, #16
 800a89a:	4770      	bx	lr
 800a89c:	803c3800 	.word	0x803c3800
 800a8a0:	40000004 	.word	0x40000004

0800a8a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8be:	d901      	bls.n	800a8c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e01b      	b.n	800a8fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	daf2      	bge.n	800a8b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	019b      	lsls	r3, r3, #6
 800a8d4:	f043 0220 	orr.w	r2, r3, #32
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8e8:	d901      	bls.n	800a8ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e006      	b.n	800a8fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	d0f0      	beq.n	800a8dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	3301      	adds	r3, #1
 800a918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a920:	d901      	bls.n	800a926 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e018      	b.n	800a958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	daf2      	bge.n	800a914 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2210      	movs	r2, #16
 800a936:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3301      	adds	r3, #1
 800a93c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a944:	d901      	bls.n	800a94a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e006      	b.n	800a958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b10      	cmp	r3, #16
 800a954:	d0f0      	beq.n	800a938 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	68f9      	ldr	r1, [r7, #12]
 800a980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a984:	4313      	orrs	r3, r2
 800a986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a996:	b480      	push	{r7}
 800a998:	b085      	sub	sp, #20
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a9b0:	f023 0303 	bic.w	r3, r3, #3
 800a9b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9c4:	f043 0302 	orr.w	r3, r3, #2
 800a9c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3301      	adds	r3, #1
 800aa04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa0c:	d901      	bls.n	800aa12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e01b      	b.n	800aa4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	daf2      	bge.n	800aa00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f043 0201 	orr.w	r2, r3, #1
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa36:	d901      	bls.n	800aa3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e006      	b.n	800aa4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d0f0      	beq.n	800aa2a <USB_CoreReset+0x36>

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
	...

0800aa58 <std>:
 800aa58:	2300      	movs	r3, #0
 800aa5a:	b510      	push	{r4, lr}
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa66:	6083      	str	r3, [r0, #8]
 800aa68:	8181      	strh	r1, [r0, #12]
 800aa6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa6c:	81c2      	strh	r2, [r0, #14]
 800aa6e:	6183      	str	r3, [r0, #24]
 800aa70:	4619      	mov	r1, r3
 800aa72:	2208      	movs	r2, #8
 800aa74:	305c      	adds	r0, #92	@ 0x5c
 800aa76:	f000 f906 	bl	800ac86 <memset>
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	@ (800aab0 <std+0x58>)
 800aa7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa7e:	4b0d      	ldr	r3, [pc, #52]	@ (800aab4 <std+0x5c>)
 800aa80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa82:	4b0d      	ldr	r3, [pc, #52]	@ (800aab8 <std+0x60>)
 800aa84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa86:	4b0d      	ldr	r3, [pc, #52]	@ (800aabc <std+0x64>)
 800aa88:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa8a:	4b0d      	ldr	r3, [pc, #52]	@ (800aac0 <std+0x68>)
 800aa8c:	6224      	str	r4, [r4, #32]
 800aa8e:	429c      	cmp	r4, r3
 800aa90:	d006      	beq.n	800aaa0 <std+0x48>
 800aa92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa96:	4294      	cmp	r4, r2
 800aa98:	d002      	beq.n	800aaa0 <std+0x48>
 800aa9a:	33d0      	adds	r3, #208	@ 0xd0
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	d105      	bne.n	800aaac <std+0x54>
 800aaa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa8:	f000 b966 	b.w	800ad78 <__retarget_lock_init_recursive>
 800aaac:	bd10      	pop	{r4, pc}
 800aaae:	bf00      	nop
 800aab0:	0800ac01 	.word	0x0800ac01
 800aab4:	0800ac23 	.word	0x0800ac23
 800aab8:	0800ac5b 	.word	0x0800ac5b
 800aabc:	0800ac7f 	.word	0x0800ac7f
 800aac0:	2402843c 	.word	0x2402843c

0800aac4 <stdio_exit_handler>:
 800aac4:	4a02      	ldr	r2, [pc, #8]	@ (800aad0 <stdio_exit_handler+0xc>)
 800aac6:	4903      	ldr	r1, [pc, #12]	@ (800aad4 <stdio_exit_handler+0x10>)
 800aac8:	4803      	ldr	r0, [pc, #12]	@ (800aad8 <stdio_exit_handler+0x14>)
 800aaca:	f000 b869 	b.w	800aba0 <_fwalk_sglue>
 800aace:	bf00      	nop
 800aad0:	2400001c 	.word	0x2400001c
 800aad4:	0800b635 	.word	0x0800b635
 800aad8:	2400002c 	.word	0x2400002c

0800aadc <cleanup_stdio>:
 800aadc:	6841      	ldr	r1, [r0, #4]
 800aade:	4b0c      	ldr	r3, [pc, #48]	@ (800ab10 <cleanup_stdio+0x34>)
 800aae0:	4299      	cmp	r1, r3
 800aae2:	b510      	push	{r4, lr}
 800aae4:	4604      	mov	r4, r0
 800aae6:	d001      	beq.n	800aaec <cleanup_stdio+0x10>
 800aae8:	f000 fda4 	bl	800b634 <_fflush_r>
 800aaec:	68a1      	ldr	r1, [r4, #8]
 800aaee:	4b09      	ldr	r3, [pc, #36]	@ (800ab14 <cleanup_stdio+0x38>)
 800aaf0:	4299      	cmp	r1, r3
 800aaf2:	d002      	beq.n	800aafa <cleanup_stdio+0x1e>
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fd9d 	bl	800b634 <_fflush_r>
 800aafa:	68e1      	ldr	r1, [r4, #12]
 800aafc:	4b06      	ldr	r3, [pc, #24]	@ (800ab18 <cleanup_stdio+0x3c>)
 800aafe:	4299      	cmp	r1, r3
 800ab00:	d004      	beq.n	800ab0c <cleanup_stdio+0x30>
 800ab02:	4620      	mov	r0, r4
 800ab04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab08:	f000 bd94 	b.w	800b634 <_fflush_r>
 800ab0c:	bd10      	pop	{r4, pc}
 800ab0e:	bf00      	nop
 800ab10:	2402843c 	.word	0x2402843c
 800ab14:	240284a4 	.word	0x240284a4
 800ab18:	2402850c 	.word	0x2402850c

0800ab1c <global_stdio_init.part.0>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab4c <global_stdio_init.part.0+0x30>)
 800ab20:	4c0b      	ldr	r4, [pc, #44]	@ (800ab50 <global_stdio_init.part.0+0x34>)
 800ab22:	4a0c      	ldr	r2, [pc, #48]	@ (800ab54 <global_stdio_init.part.0+0x38>)
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	4620      	mov	r0, r4
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2104      	movs	r1, #4
 800ab2c:	f7ff ff94 	bl	800aa58 <std>
 800ab30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab34:	2201      	movs	r2, #1
 800ab36:	2109      	movs	r1, #9
 800ab38:	f7ff ff8e 	bl	800aa58 <std>
 800ab3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab40:	2202      	movs	r2, #2
 800ab42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab46:	2112      	movs	r1, #18
 800ab48:	f7ff bf86 	b.w	800aa58 <std>
 800ab4c:	24028574 	.word	0x24028574
 800ab50:	2402843c 	.word	0x2402843c
 800ab54:	0800aac5 	.word	0x0800aac5

0800ab58 <__sfp_lock_acquire>:
 800ab58:	4801      	ldr	r0, [pc, #4]	@ (800ab60 <__sfp_lock_acquire+0x8>)
 800ab5a:	f000 b90e 	b.w	800ad7a <__retarget_lock_acquire_recursive>
 800ab5e:	bf00      	nop
 800ab60:	2402857d 	.word	0x2402857d

0800ab64 <__sfp_lock_release>:
 800ab64:	4801      	ldr	r0, [pc, #4]	@ (800ab6c <__sfp_lock_release+0x8>)
 800ab66:	f000 b909 	b.w	800ad7c <__retarget_lock_release_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	2402857d 	.word	0x2402857d

0800ab70 <__sinit>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	4604      	mov	r4, r0
 800ab74:	f7ff fff0 	bl	800ab58 <__sfp_lock_acquire>
 800ab78:	6a23      	ldr	r3, [r4, #32]
 800ab7a:	b11b      	cbz	r3, 800ab84 <__sinit+0x14>
 800ab7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab80:	f7ff bff0 	b.w	800ab64 <__sfp_lock_release>
 800ab84:	4b04      	ldr	r3, [pc, #16]	@ (800ab98 <__sinit+0x28>)
 800ab86:	6223      	str	r3, [r4, #32]
 800ab88:	4b04      	ldr	r3, [pc, #16]	@ (800ab9c <__sinit+0x2c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1f5      	bne.n	800ab7c <__sinit+0xc>
 800ab90:	f7ff ffc4 	bl	800ab1c <global_stdio_init.part.0>
 800ab94:	e7f2      	b.n	800ab7c <__sinit+0xc>
 800ab96:	bf00      	nop
 800ab98:	0800aadd 	.word	0x0800aadd
 800ab9c:	24028574 	.word	0x24028574

0800aba0 <_fwalk_sglue>:
 800aba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba4:	4607      	mov	r7, r0
 800aba6:	4688      	mov	r8, r1
 800aba8:	4614      	mov	r4, r2
 800abaa:	2600      	movs	r6, #0
 800abac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abb0:	f1b9 0901 	subs.w	r9, r9, #1
 800abb4:	d505      	bpl.n	800abc2 <_fwalk_sglue+0x22>
 800abb6:	6824      	ldr	r4, [r4, #0]
 800abb8:	2c00      	cmp	r4, #0
 800abba:	d1f7      	bne.n	800abac <_fwalk_sglue+0xc>
 800abbc:	4630      	mov	r0, r6
 800abbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc2:	89ab      	ldrh	r3, [r5, #12]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d907      	bls.n	800abd8 <_fwalk_sglue+0x38>
 800abc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abcc:	3301      	adds	r3, #1
 800abce:	d003      	beq.n	800abd8 <_fwalk_sglue+0x38>
 800abd0:	4629      	mov	r1, r5
 800abd2:	4638      	mov	r0, r7
 800abd4:	47c0      	blx	r8
 800abd6:	4306      	orrs	r6, r0
 800abd8:	3568      	adds	r5, #104	@ 0x68
 800abda:	e7e9      	b.n	800abb0 <_fwalk_sglue+0x10>

0800abdc <iprintf>:
 800abdc:	b40f      	push	{r0, r1, r2, r3}
 800abde:	b507      	push	{r0, r1, r2, lr}
 800abe0:	4906      	ldr	r1, [pc, #24]	@ (800abfc <iprintf+0x20>)
 800abe2:	ab04      	add	r3, sp, #16
 800abe4:	6808      	ldr	r0, [r1, #0]
 800abe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abea:	6881      	ldr	r1, [r0, #8]
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	f000 f9f7 	bl	800afe0 <_vfiprintf_r>
 800abf2:	b003      	add	sp, #12
 800abf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abf8:	b004      	add	sp, #16
 800abfa:	4770      	bx	lr
 800abfc:	24000028 	.word	0x24000028

0800ac00 <__sread>:
 800ac00:	b510      	push	{r4, lr}
 800ac02:	460c      	mov	r4, r1
 800ac04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac08:	f000 f868 	bl	800acdc <_read_r>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	bfab      	itete	ge
 800ac10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac12:	89a3      	ldrhlt	r3, [r4, #12]
 800ac14:	181b      	addge	r3, r3, r0
 800ac16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac1a:	bfac      	ite	ge
 800ac1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac1e:	81a3      	strhlt	r3, [r4, #12]
 800ac20:	bd10      	pop	{r4, pc}

0800ac22 <__swrite>:
 800ac22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac26:	461f      	mov	r7, r3
 800ac28:	898b      	ldrh	r3, [r1, #12]
 800ac2a:	05db      	lsls	r3, r3, #23
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	4616      	mov	r6, r2
 800ac32:	d505      	bpl.n	800ac40 <__swrite+0x1e>
 800ac34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac38:	2302      	movs	r3, #2
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f000 f83c 	bl	800acb8 <_lseek_r>
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac4a:	81a3      	strh	r3, [r4, #12]
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	463b      	mov	r3, r7
 800ac50:	4628      	mov	r0, r5
 800ac52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac56:	f000 b853 	b.w	800ad00 <_write_r>

0800ac5a <__sseek>:
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac62:	f000 f829 	bl	800acb8 <_lseek_r>
 800ac66:	1c43      	adds	r3, r0, #1
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	bf15      	itete	ne
 800ac6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac76:	81a3      	strheq	r3, [r4, #12]
 800ac78:	bf18      	it	ne
 800ac7a:	81a3      	strhne	r3, [r4, #12]
 800ac7c:	bd10      	pop	{r4, pc}

0800ac7e <__sclose>:
 800ac7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac82:	f000 b809 	b.w	800ac98 <_close_r>

0800ac86 <memset>:
 800ac86:	4402      	add	r2, r0
 800ac88:	4603      	mov	r3, r0
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d100      	bne.n	800ac90 <memset+0xa>
 800ac8e:	4770      	bx	lr
 800ac90:	f803 1b01 	strb.w	r1, [r3], #1
 800ac94:	e7f9      	b.n	800ac8a <memset+0x4>
	...

0800ac98 <_close_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d06      	ldr	r5, [pc, #24]	@ (800acb4 <_close_r+0x1c>)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	602b      	str	r3, [r5, #0]
 800aca4:	f7f7 face 	bl	8002244 <_close>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d102      	bne.n	800acb2 <_close_r+0x1a>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	b103      	cbz	r3, 800acb2 <_close_r+0x1a>
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	24028578 	.word	0x24028578

0800acb8 <_lseek_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4d07      	ldr	r5, [pc, #28]	@ (800acd8 <_lseek_r+0x20>)
 800acbc:	4604      	mov	r4, r0
 800acbe:	4608      	mov	r0, r1
 800acc0:	4611      	mov	r1, r2
 800acc2:	2200      	movs	r2, #0
 800acc4:	602a      	str	r2, [r5, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	f7f7 fae3 	bl	8002292 <_lseek>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_lseek_r+0x1e>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_lseek_r+0x1e>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	24028578 	.word	0x24028578

0800acdc <_read_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	4d07      	ldr	r5, [pc, #28]	@ (800acfc <_read_r+0x20>)
 800ace0:	4604      	mov	r4, r0
 800ace2:	4608      	mov	r0, r1
 800ace4:	4611      	mov	r1, r2
 800ace6:	2200      	movs	r2, #0
 800ace8:	602a      	str	r2, [r5, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	f7f7 fa71 	bl	80021d2 <_read>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_read_r+0x1e>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_read_r+0x1e>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	24028578 	.word	0x24028578

0800ad00 <_write_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d07      	ldr	r5, [pc, #28]	@ (800ad20 <_write_r+0x20>)
 800ad04:	4604      	mov	r4, r0
 800ad06:	4608      	mov	r0, r1
 800ad08:	4611      	mov	r1, r2
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	602a      	str	r2, [r5, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f7f7 fa7c 	bl	800220c <_write>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_write_r+0x1e>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_write_r+0x1e>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	24028578 	.word	0x24028578

0800ad24 <__errno>:
 800ad24:	4b01      	ldr	r3, [pc, #4]	@ (800ad2c <__errno+0x8>)
 800ad26:	6818      	ldr	r0, [r3, #0]
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	24000028 	.word	0x24000028

0800ad30 <__libc_init_array>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4d0d      	ldr	r5, [pc, #52]	@ (800ad68 <__libc_init_array+0x38>)
 800ad34:	4c0d      	ldr	r4, [pc, #52]	@ (800ad6c <__libc_init_array+0x3c>)
 800ad36:	1b64      	subs	r4, r4, r5
 800ad38:	10a4      	asrs	r4, r4, #2
 800ad3a:	2600      	movs	r6, #0
 800ad3c:	42a6      	cmp	r6, r4
 800ad3e:	d109      	bne.n	800ad54 <__libc_init_array+0x24>
 800ad40:	4d0b      	ldr	r5, [pc, #44]	@ (800ad70 <__libc_init_array+0x40>)
 800ad42:	4c0c      	ldr	r4, [pc, #48]	@ (800ad74 <__libc_init_array+0x44>)
 800ad44:	f000 fdc6 	bl	800b8d4 <_init>
 800ad48:	1b64      	subs	r4, r4, r5
 800ad4a:	10a4      	asrs	r4, r4, #2
 800ad4c:	2600      	movs	r6, #0
 800ad4e:	42a6      	cmp	r6, r4
 800ad50:	d105      	bne.n	800ad5e <__libc_init_array+0x2e>
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad58:	4798      	blx	r3
 800ad5a:	3601      	adds	r6, #1
 800ad5c:	e7ee      	b.n	800ad3c <__libc_init_array+0xc>
 800ad5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad62:	4798      	blx	r3
 800ad64:	3601      	adds	r6, #1
 800ad66:	e7f2      	b.n	800ad4e <__libc_init_array+0x1e>
 800ad68:	08099700 	.word	0x08099700
 800ad6c:	08099700 	.word	0x08099700
 800ad70:	08099700 	.word	0x08099700
 800ad74:	08099704 	.word	0x08099704

0800ad78 <__retarget_lock_init_recursive>:
 800ad78:	4770      	bx	lr

0800ad7a <__retarget_lock_acquire_recursive>:
 800ad7a:	4770      	bx	lr

0800ad7c <__retarget_lock_release_recursive>:
 800ad7c:	4770      	bx	lr

0800ad7e <memcpy>:
 800ad7e:	440a      	add	r2, r1
 800ad80:	4291      	cmp	r1, r2
 800ad82:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad86:	d100      	bne.n	800ad8a <memcpy+0xc>
 800ad88:	4770      	bx	lr
 800ad8a:	b510      	push	{r4, lr}
 800ad8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad94:	4291      	cmp	r1, r2
 800ad96:	d1f9      	bne.n	800ad8c <memcpy+0xe>
 800ad98:	bd10      	pop	{r4, pc}
	...

0800ad9c <_free_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4605      	mov	r5, r0
 800ada0:	2900      	cmp	r1, #0
 800ada2:	d041      	beq.n	800ae28 <_free_r+0x8c>
 800ada4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada8:	1f0c      	subs	r4, r1, #4
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bfb8      	it	lt
 800adae:	18e4      	addlt	r4, r4, r3
 800adb0:	f000 f8e0 	bl	800af74 <__malloc_lock>
 800adb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae2c <_free_r+0x90>)
 800adb6:	6813      	ldr	r3, [r2, #0]
 800adb8:	b933      	cbnz	r3, 800adc8 <_free_r+0x2c>
 800adba:	6063      	str	r3, [r4, #4]
 800adbc:	6014      	str	r4, [r2, #0]
 800adbe:	4628      	mov	r0, r5
 800adc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adc4:	f000 b8dc 	b.w	800af80 <__malloc_unlock>
 800adc8:	42a3      	cmp	r3, r4
 800adca:	d908      	bls.n	800adde <_free_r+0x42>
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	1821      	adds	r1, r4, r0
 800add0:	428b      	cmp	r3, r1
 800add2:	bf01      	itttt	eq
 800add4:	6819      	ldreq	r1, [r3, #0]
 800add6:	685b      	ldreq	r3, [r3, #4]
 800add8:	1809      	addeq	r1, r1, r0
 800adda:	6021      	streq	r1, [r4, #0]
 800addc:	e7ed      	b.n	800adba <_free_r+0x1e>
 800adde:	461a      	mov	r2, r3
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	b10b      	cbz	r3, 800ade8 <_free_r+0x4c>
 800ade4:	42a3      	cmp	r3, r4
 800ade6:	d9fa      	bls.n	800adde <_free_r+0x42>
 800ade8:	6811      	ldr	r1, [r2, #0]
 800adea:	1850      	adds	r0, r2, r1
 800adec:	42a0      	cmp	r0, r4
 800adee:	d10b      	bne.n	800ae08 <_free_r+0x6c>
 800adf0:	6820      	ldr	r0, [r4, #0]
 800adf2:	4401      	add	r1, r0
 800adf4:	1850      	adds	r0, r2, r1
 800adf6:	4283      	cmp	r3, r0
 800adf8:	6011      	str	r1, [r2, #0]
 800adfa:	d1e0      	bne.n	800adbe <_free_r+0x22>
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	6053      	str	r3, [r2, #4]
 800ae02:	4408      	add	r0, r1
 800ae04:	6010      	str	r0, [r2, #0]
 800ae06:	e7da      	b.n	800adbe <_free_r+0x22>
 800ae08:	d902      	bls.n	800ae10 <_free_r+0x74>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	e7d6      	b.n	800adbe <_free_r+0x22>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf04      	itt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	6063      	str	r3, [r4, #4]
 800ae1e:	bf04      	itt	eq
 800ae20:	1809      	addeq	r1, r1, r0
 800ae22:	6021      	streq	r1, [r4, #0]
 800ae24:	6054      	str	r4, [r2, #4]
 800ae26:	e7ca      	b.n	800adbe <_free_r+0x22>
 800ae28:	bd38      	pop	{r3, r4, r5, pc}
 800ae2a:	bf00      	nop
 800ae2c:	24028584 	.word	0x24028584

0800ae30 <sbrk_aligned>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	4e0f      	ldr	r6, [pc, #60]	@ (800ae70 <sbrk_aligned+0x40>)
 800ae34:	460c      	mov	r4, r1
 800ae36:	6831      	ldr	r1, [r6, #0]
 800ae38:	4605      	mov	r5, r0
 800ae3a:	b911      	cbnz	r1, 800ae42 <sbrk_aligned+0x12>
 800ae3c:	f000 fcb6 	bl	800b7ac <_sbrk_r>
 800ae40:	6030      	str	r0, [r6, #0]
 800ae42:	4621      	mov	r1, r4
 800ae44:	4628      	mov	r0, r5
 800ae46:	f000 fcb1 	bl	800b7ac <_sbrk_r>
 800ae4a:	1c43      	adds	r3, r0, #1
 800ae4c:	d103      	bne.n	800ae56 <sbrk_aligned+0x26>
 800ae4e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae52:	4620      	mov	r0, r4
 800ae54:	bd70      	pop	{r4, r5, r6, pc}
 800ae56:	1cc4      	adds	r4, r0, #3
 800ae58:	f024 0403 	bic.w	r4, r4, #3
 800ae5c:	42a0      	cmp	r0, r4
 800ae5e:	d0f8      	beq.n	800ae52 <sbrk_aligned+0x22>
 800ae60:	1a21      	subs	r1, r4, r0
 800ae62:	4628      	mov	r0, r5
 800ae64:	f000 fca2 	bl	800b7ac <_sbrk_r>
 800ae68:	3001      	adds	r0, #1
 800ae6a:	d1f2      	bne.n	800ae52 <sbrk_aligned+0x22>
 800ae6c:	e7ef      	b.n	800ae4e <sbrk_aligned+0x1e>
 800ae6e:	bf00      	nop
 800ae70:	24028580 	.word	0x24028580

0800ae74 <_malloc_r>:
 800ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	1ccd      	adds	r5, r1, #3
 800ae7a:	f025 0503 	bic.w	r5, r5, #3
 800ae7e:	3508      	adds	r5, #8
 800ae80:	2d0c      	cmp	r5, #12
 800ae82:	bf38      	it	cc
 800ae84:	250c      	movcc	r5, #12
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	4606      	mov	r6, r0
 800ae8a:	db01      	blt.n	800ae90 <_malloc_r+0x1c>
 800ae8c:	42a9      	cmp	r1, r5
 800ae8e:	d904      	bls.n	800ae9a <_malloc_r+0x26>
 800ae90:	230c      	movs	r3, #12
 800ae92:	6033      	str	r3, [r6, #0]
 800ae94:	2000      	movs	r0, #0
 800ae96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af70 <_malloc_r+0xfc>
 800ae9e:	f000 f869 	bl	800af74 <__malloc_lock>
 800aea2:	f8d8 3000 	ldr.w	r3, [r8]
 800aea6:	461c      	mov	r4, r3
 800aea8:	bb44      	cbnz	r4, 800aefc <_malloc_r+0x88>
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7ff ffbf 	bl	800ae30 <sbrk_aligned>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	d158      	bne.n	800af6a <_malloc_r+0xf6>
 800aeb8:	f8d8 4000 	ldr.w	r4, [r8]
 800aebc:	4627      	mov	r7, r4
 800aebe:	2f00      	cmp	r7, #0
 800aec0:	d143      	bne.n	800af4a <_malloc_r+0xd6>
 800aec2:	2c00      	cmp	r4, #0
 800aec4:	d04b      	beq.n	800af5e <_malloc_r+0xea>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	4639      	mov	r1, r7
 800aeca:	4630      	mov	r0, r6
 800aecc:	eb04 0903 	add.w	r9, r4, r3
 800aed0:	f000 fc6c 	bl	800b7ac <_sbrk_r>
 800aed4:	4581      	cmp	r9, r0
 800aed6:	d142      	bne.n	800af5e <_malloc_r+0xea>
 800aed8:	6821      	ldr	r1, [r4, #0]
 800aeda:	1a6d      	subs	r5, r5, r1
 800aedc:	4629      	mov	r1, r5
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff ffa6 	bl	800ae30 <sbrk_aligned>
 800aee4:	3001      	adds	r0, #1
 800aee6:	d03a      	beq.n	800af5e <_malloc_r+0xea>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	442b      	add	r3, r5
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	f8d8 3000 	ldr.w	r3, [r8]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	bb62      	cbnz	r2, 800af50 <_malloc_r+0xdc>
 800aef6:	f8c8 7000 	str.w	r7, [r8]
 800aefa:	e00f      	b.n	800af1c <_malloc_r+0xa8>
 800aefc:	6822      	ldr	r2, [r4, #0]
 800aefe:	1b52      	subs	r2, r2, r5
 800af00:	d420      	bmi.n	800af44 <_malloc_r+0xd0>
 800af02:	2a0b      	cmp	r2, #11
 800af04:	d917      	bls.n	800af36 <_malloc_r+0xc2>
 800af06:	1961      	adds	r1, r4, r5
 800af08:	42a3      	cmp	r3, r4
 800af0a:	6025      	str	r5, [r4, #0]
 800af0c:	bf18      	it	ne
 800af0e:	6059      	strne	r1, [r3, #4]
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	bf08      	it	eq
 800af14:	f8c8 1000 	streq.w	r1, [r8]
 800af18:	5162      	str	r2, [r4, r5]
 800af1a:	604b      	str	r3, [r1, #4]
 800af1c:	4630      	mov	r0, r6
 800af1e:	f000 f82f 	bl	800af80 <__malloc_unlock>
 800af22:	f104 000b 	add.w	r0, r4, #11
 800af26:	1d23      	adds	r3, r4, #4
 800af28:	f020 0007 	bic.w	r0, r0, #7
 800af2c:	1ac2      	subs	r2, r0, r3
 800af2e:	bf1c      	itt	ne
 800af30:	1a1b      	subne	r3, r3, r0
 800af32:	50a3      	strne	r3, [r4, r2]
 800af34:	e7af      	b.n	800ae96 <_malloc_r+0x22>
 800af36:	6862      	ldr	r2, [r4, #4]
 800af38:	42a3      	cmp	r3, r4
 800af3a:	bf0c      	ite	eq
 800af3c:	f8c8 2000 	streq.w	r2, [r8]
 800af40:	605a      	strne	r2, [r3, #4]
 800af42:	e7eb      	b.n	800af1c <_malloc_r+0xa8>
 800af44:	4623      	mov	r3, r4
 800af46:	6864      	ldr	r4, [r4, #4]
 800af48:	e7ae      	b.n	800aea8 <_malloc_r+0x34>
 800af4a:	463c      	mov	r4, r7
 800af4c:	687f      	ldr	r7, [r7, #4]
 800af4e:	e7b6      	b.n	800aebe <_malloc_r+0x4a>
 800af50:	461a      	mov	r2, r3
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	42a3      	cmp	r3, r4
 800af56:	d1fb      	bne.n	800af50 <_malloc_r+0xdc>
 800af58:	2300      	movs	r3, #0
 800af5a:	6053      	str	r3, [r2, #4]
 800af5c:	e7de      	b.n	800af1c <_malloc_r+0xa8>
 800af5e:	230c      	movs	r3, #12
 800af60:	6033      	str	r3, [r6, #0]
 800af62:	4630      	mov	r0, r6
 800af64:	f000 f80c 	bl	800af80 <__malloc_unlock>
 800af68:	e794      	b.n	800ae94 <_malloc_r+0x20>
 800af6a:	6005      	str	r5, [r0, #0]
 800af6c:	e7d6      	b.n	800af1c <_malloc_r+0xa8>
 800af6e:	bf00      	nop
 800af70:	24028584 	.word	0x24028584

0800af74 <__malloc_lock>:
 800af74:	4801      	ldr	r0, [pc, #4]	@ (800af7c <__malloc_lock+0x8>)
 800af76:	f7ff bf00 	b.w	800ad7a <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	2402857c 	.word	0x2402857c

0800af80 <__malloc_unlock>:
 800af80:	4801      	ldr	r0, [pc, #4]	@ (800af88 <__malloc_unlock+0x8>)
 800af82:	f7ff befb 	b.w	800ad7c <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	2402857c 	.word	0x2402857c

0800af8c <__sfputc_r>:
 800af8c:	6893      	ldr	r3, [r2, #8]
 800af8e:	3b01      	subs	r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	b410      	push	{r4}
 800af94:	6093      	str	r3, [r2, #8]
 800af96:	da08      	bge.n	800afaa <__sfputc_r+0x1e>
 800af98:	6994      	ldr	r4, [r2, #24]
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	db01      	blt.n	800afa2 <__sfputc_r+0x16>
 800af9e:	290a      	cmp	r1, #10
 800afa0:	d103      	bne.n	800afaa <__sfputc_r+0x1e>
 800afa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afa6:	f000 bb6d 	b.w	800b684 <__swbuf_r>
 800afaa:	6813      	ldr	r3, [r2, #0]
 800afac:	1c58      	adds	r0, r3, #1
 800afae:	6010      	str	r0, [r2, #0]
 800afb0:	7019      	strb	r1, [r3, #0]
 800afb2:	4608      	mov	r0, r1
 800afb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <__sfputs_r>:
 800afba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	4614      	mov	r4, r2
 800afc2:	18d5      	adds	r5, r2, r3
 800afc4:	42ac      	cmp	r4, r5
 800afc6:	d101      	bne.n	800afcc <__sfputs_r+0x12>
 800afc8:	2000      	movs	r0, #0
 800afca:	e007      	b.n	800afdc <__sfputs_r+0x22>
 800afcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd0:	463a      	mov	r2, r7
 800afd2:	4630      	mov	r0, r6
 800afd4:	f7ff ffda 	bl	800af8c <__sfputc_r>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d1f3      	bne.n	800afc4 <__sfputs_r+0xa>
 800afdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afe0 <_vfiprintf_r>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	460d      	mov	r5, r1
 800afe6:	b09d      	sub	sp, #116	@ 0x74
 800afe8:	4614      	mov	r4, r2
 800afea:	4698      	mov	r8, r3
 800afec:	4606      	mov	r6, r0
 800afee:	b118      	cbz	r0, 800aff8 <_vfiprintf_r+0x18>
 800aff0:	6a03      	ldr	r3, [r0, #32]
 800aff2:	b90b      	cbnz	r3, 800aff8 <_vfiprintf_r+0x18>
 800aff4:	f7ff fdbc 	bl	800ab70 <__sinit>
 800aff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800affa:	07d9      	lsls	r1, r3, #31
 800affc:	d405      	bmi.n	800b00a <_vfiprintf_r+0x2a>
 800affe:	89ab      	ldrh	r3, [r5, #12]
 800b000:	059a      	lsls	r2, r3, #22
 800b002:	d402      	bmi.n	800b00a <_vfiprintf_r+0x2a>
 800b004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b006:	f7ff feb8 	bl	800ad7a <__retarget_lock_acquire_recursive>
 800b00a:	89ab      	ldrh	r3, [r5, #12]
 800b00c:	071b      	lsls	r3, r3, #28
 800b00e:	d501      	bpl.n	800b014 <_vfiprintf_r+0x34>
 800b010:	692b      	ldr	r3, [r5, #16]
 800b012:	b99b      	cbnz	r3, 800b03c <_vfiprintf_r+0x5c>
 800b014:	4629      	mov	r1, r5
 800b016:	4630      	mov	r0, r6
 800b018:	f000 fb72 	bl	800b700 <__swsetup_r>
 800b01c:	b170      	cbz	r0, 800b03c <_vfiprintf_r+0x5c>
 800b01e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b020:	07dc      	lsls	r4, r3, #31
 800b022:	d504      	bpl.n	800b02e <_vfiprintf_r+0x4e>
 800b024:	f04f 30ff 	mov.w	r0, #4294967295
 800b028:	b01d      	add	sp, #116	@ 0x74
 800b02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	0598      	lsls	r0, r3, #22
 800b032:	d4f7      	bmi.n	800b024 <_vfiprintf_r+0x44>
 800b034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b036:	f7ff fea1 	bl	800ad7c <__retarget_lock_release_recursive>
 800b03a:	e7f3      	b.n	800b024 <_vfiprintf_r+0x44>
 800b03c:	2300      	movs	r3, #0
 800b03e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b040:	2320      	movs	r3, #32
 800b042:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b046:	f8cd 800c 	str.w	r8, [sp, #12]
 800b04a:	2330      	movs	r3, #48	@ 0x30
 800b04c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1fc <_vfiprintf_r+0x21c>
 800b050:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b054:	f04f 0901 	mov.w	r9, #1
 800b058:	4623      	mov	r3, r4
 800b05a:	469a      	mov	sl, r3
 800b05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b060:	b10a      	cbz	r2, 800b066 <_vfiprintf_r+0x86>
 800b062:	2a25      	cmp	r2, #37	@ 0x25
 800b064:	d1f9      	bne.n	800b05a <_vfiprintf_r+0x7a>
 800b066:	ebba 0b04 	subs.w	fp, sl, r4
 800b06a:	d00b      	beq.n	800b084 <_vfiprintf_r+0xa4>
 800b06c:	465b      	mov	r3, fp
 800b06e:	4622      	mov	r2, r4
 800b070:	4629      	mov	r1, r5
 800b072:	4630      	mov	r0, r6
 800b074:	f7ff ffa1 	bl	800afba <__sfputs_r>
 800b078:	3001      	adds	r0, #1
 800b07a:	f000 80a7 	beq.w	800b1cc <_vfiprintf_r+0x1ec>
 800b07e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b080:	445a      	add	r2, fp
 800b082:	9209      	str	r2, [sp, #36]	@ 0x24
 800b084:	f89a 3000 	ldrb.w	r3, [sl]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 809f 	beq.w	800b1cc <_vfiprintf_r+0x1ec>
 800b08e:	2300      	movs	r3, #0
 800b090:	f04f 32ff 	mov.w	r2, #4294967295
 800b094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b098:	f10a 0a01 	add.w	sl, sl, #1
 800b09c:	9304      	str	r3, [sp, #16]
 800b09e:	9307      	str	r3, [sp, #28]
 800b0a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0a6:	4654      	mov	r4, sl
 800b0a8:	2205      	movs	r2, #5
 800b0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ae:	4853      	ldr	r0, [pc, #332]	@ (800b1fc <_vfiprintf_r+0x21c>)
 800b0b0:	f7f5 f916 	bl	80002e0 <memchr>
 800b0b4:	9a04      	ldr	r2, [sp, #16]
 800b0b6:	b9d8      	cbnz	r0, 800b0f0 <_vfiprintf_r+0x110>
 800b0b8:	06d1      	lsls	r1, r2, #27
 800b0ba:	bf44      	itt	mi
 800b0bc:	2320      	movmi	r3, #32
 800b0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c2:	0713      	lsls	r3, r2, #28
 800b0c4:	bf44      	itt	mi
 800b0c6:	232b      	movmi	r3, #43	@ 0x2b
 800b0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d2:	d015      	beq.n	800b100 <_vfiprintf_r+0x120>
 800b0d4:	9a07      	ldr	r2, [sp, #28]
 800b0d6:	4654      	mov	r4, sl
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f04f 0c0a 	mov.w	ip, #10
 800b0de:	4621      	mov	r1, r4
 800b0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e4:	3b30      	subs	r3, #48	@ 0x30
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d94b      	bls.n	800b182 <_vfiprintf_r+0x1a2>
 800b0ea:	b1b0      	cbz	r0, 800b11a <_vfiprintf_r+0x13a>
 800b0ec:	9207      	str	r2, [sp, #28]
 800b0ee:	e014      	b.n	800b11a <_vfiprintf_r+0x13a>
 800b0f0:	eba0 0308 	sub.w	r3, r0, r8
 800b0f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	46a2      	mov	sl, r4
 800b0fe:	e7d2      	b.n	800b0a6 <_vfiprintf_r+0xc6>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	1d19      	adds	r1, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	9103      	str	r1, [sp, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bfbb      	ittet	lt
 800b10c:	425b      	neglt	r3, r3
 800b10e:	f042 0202 	orrlt.w	r2, r2, #2
 800b112:	9307      	strge	r3, [sp, #28]
 800b114:	9307      	strlt	r3, [sp, #28]
 800b116:	bfb8      	it	lt
 800b118:	9204      	strlt	r2, [sp, #16]
 800b11a:	7823      	ldrb	r3, [r4, #0]
 800b11c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b11e:	d10a      	bne.n	800b136 <_vfiprintf_r+0x156>
 800b120:	7863      	ldrb	r3, [r4, #1]
 800b122:	2b2a      	cmp	r3, #42	@ 0x2a
 800b124:	d132      	bne.n	800b18c <_vfiprintf_r+0x1ac>
 800b126:	9b03      	ldr	r3, [sp, #12]
 800b128:	1d1a      	adds	r2, r3, #4
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	9203      	str	r2, [sp, #12]
 800b12e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b132:	3402      	adds	r4, #2
 800b134:	9305      	str	r3, [sp, #20]
 800b136:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b20c <_vfiprintf_r+0x22c>
 800b13a:	7821      	ldrb	r1, [r4, #0]
 800b13c:	2203      	movs	r2, #3
 800b13e:	4650      	mov	r0, sl
 800b140:	f7f5 f8ce 	bl	80002e0 <memchr>
 800b144:	b138      	cbz	r0, 800b156 <_vfiprintf_r+0x176>
 800b146:	9b04      	ldr	r3, [sp, #16]
 800b148:	eba0 000a 	sub.w	r0, r0, sl
 800b14c:	2240      	movs	r2, #64	@ 0x40
 800b14e:	4082      	lsls	r2, r0
 800b150:	4313      	orrs	r3, r2
 800b152:	3401      	adds	r4, #1
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15a:	4829      	ldr	r0, [pc, #164]	@ (800b200 <_vfiprintf_r+0x220>)
 800b15c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b160:	2206      	movs	r2, #6
 800b162:	f7f5 f8bd 	bl	80002e0 <memchr>
 800b166:	2800      	cmp	r0, #0
 800b168:	d03f      	beq.n	800b1ea <_vfiprintf_r+0x20a>
 800b16a:	4b26      	ldr	r3, [pc, #152]	@ (800b204 <_vfiprintf_r+0x224>)
 800b16c:	bb1b      	cbnz	r3, 800b1b6 <_vfiprintf_r+0x1d6>
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	3307      	adds	r3, #7
 800b172:	f023 0307 	bic.w	r3, r3, #7
 800b176:	3308      	adds	r3, #8
 800b178:	9303      	str	r3, [sp, #12]
 800b17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b17c:	443b      	add	r3, r7
 800b17e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b180:	e76a      	b.n	800b058 <_vfiprintf_r+0x78>
 800b182:	fb0c 3202 	mla	r2, ip, r2, r3
 800b186:	460c      	mov	r4, r1
 800b188:	2001      	movs	r0, #1
 800b18a:	e7a8      	b.n	800b0de <_vfiprintf_r+0xfe>
 800b18c:	2300      	movs	r3, #0
 800b18e:	3401      	adds	r4, #1
 800b190:	9305      	str	r3, [sp, #20]
 800b192:	4619      	mov	r1, r3
 800b194:	f04f 0c0a 	mov.w	ip, #10
 800b198:	4620      	mov	r0, r4
 800b19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b19e:	3a30      	subs	r2, #48	@ 0x30
 800b1a0:	2a09      	cmp	r2, #9
 800b1a2:	d903      	bls.n	800b1ac <_vfiprintf_r+0x1cc>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0c6      	beq.n	800b136 <_vfiprintf_r+0x156>
 800b1a8:	9105      	str	r1, [sp, #20]
 800b1aa:	e7c4      	b.n	800b136 <_vfiprintf_r+0x156>
 800b1ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e7f0      	b.n	800b198 <_vfiprintf_r+0x1b8>
 800b1b6:	ab03      	add	r3, sp, #12
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4b12      	ldr	r3, [pc, #72]	@ (800b208 <_vfiprintf_r+0x228>)
 800b1be:	a904      	add	r1, sp, #16
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f3af 8000 	nop.w
 800b1c6:	4607      	mov	r7, r0
 800b1c8:	1c78      	adds	r0, r7, #1
 800b1ca:	d1d6      	bne.n	800b17a <_vfiprintf_r+0x19a>
 800b1cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1ce:	07d9      	lsls	r1, r3, #31
 800b1d0:	d405      	bmi.n	800b1de <_vfiprintf_r+0x1fe>
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	059a      	lsls	r2, r3, #22
 800b1d6:	d402      	bmi.n	800b1de <_vfiprintf_r+0x1fe>
 800b1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1da:	f7ff fdcf 	bl	800ad7c <__retarget_lock_release_recursive>
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	065b      	lsls	r3, r3, #25
 800b1e2:	f53f af1f 	bmi.w	800b024 <_vfiprintf_r+0x44>
 800b1e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1e8:	e71e      	b.n	800b028 <_vfiprintf_r+0x48>
 800b1ea:	ab03      	add	r3, sp, #12
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4b05      	ldr	r3, [pc, #20]	@ (800b208 <_vfiprintf_r+0x228>)
 800b1f2:	a904      	add	r1, sp, #16
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f000 f879 	bl	800b2ec <_printf_i>
 800b1fa:	e7e4      	b.n	800b1c6 <_vfiprintf_r+0x1e6>
 800b1fc:	080996c4 	.word	0x080996c4
 800b200:	080996ce 	.word	0x080996ce
 800b204:	00000000 	.word	0x00000000
 800b208:	0800afbb 	.word	0x0800afbb
 800b20c:	080996ca 	.word	0x080996ca

0800b210 <_printf_common>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	4616      	mov	r6, r2
 800b216:	4698      	mov	r8, r3
 800b218:	688a      	ldr	r2, [r1, #8]
 800b21a:	690b      	ldr	r3, [r1, #16]
 800b21c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b220:	4293      	cmp	r3, r2
 800b222:	bfb8      	it	lt
 800b224:	4613      	movlt	r3, r2
 800b226:	6033      	str	r3, [r6, #0]
 800b228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b22c:	4607      	mov	r7, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	b10a      	cbz	r2, 800b236 <_printf_common+0x26>
 800b232:	3301      	adds	r3, #1
 800b234:	6033      	str	r3, [r6, #0]
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	0699      	lsls	r1, r3, #26
 800b23a:	bf42      	ittt	mi
 800b23c:	6833      	ldrmi	r3, [r6, #0]
 800b23e:	3302      	addmi	r3, #2
 800b240:	6033      	strmi	r3, [r6, #0]
 800b242:	6825      	ldr	r5, [r4, #0]
 800b244:	f015 0506 	ands.w	r5, r5, #6
 800b248:	d106      	bne.n	800b258 <_printf_common+0x48>
 800b24a:	f104 0a19 	add.w	sl, r4, #25
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	6832      	ldr	r2, [r6, #0]
 800b252:	1a9b      	subs	r3, r3, r2
 800b254:	42ab      	cmp	r3, r5
 800b256:	dc26      	bgt.n	800b2a6 <_printf_common+0x96>
 800b258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b25c:	6822      	ldr	r2, [r4, #0]
 800b25e:	3b00      	subs	r3, #0
 800b260:	bf18      	it	ne
 800b262:	2301      	movne	r3, #1
 800b264:	0692      	lsls	r2, r2, #26
 800b266:	d42b      	bmi.n	800b2c0 <_printf_common+0xb0>
 800b268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b26c:	4641      	mov	r1, r8
 800b26e:	4638      	mov	r0, r7
 800b270:	47c8      	blx	r9
 800b272:	3001      	adds	r0, #1
 800b274:	d01e      	beq.n	800b2b4 <_printf_common+0xa4>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	6922      	ldr	r2, [r4, #16]
 800b27a:	f003 0306 	and.w	r3, r3, #6
 800b27e:	2b04      	cmp	r3, #4
 800b280:	bf02      	ittt	eq
 800b282:	68e5      	ldreq	r5, [r4, #12]
 800b284:	6833      	ldreq	r3, [r6, #0]
 800b286:	1aed      	subeq	r5, r5, r3
 800b288:	68a3      	ldr	r3, [r4, #8]
 800b28a:	bf0c      	ite	eq
 800b28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b290:	2500      	movne	r5, #0
 800b292:	4293      	cmp	r3, r2
 800b294:	bfc4      	itt	gt
 800b296:	1a9b      	subgt	r3, r3, r2
 800b298:	18ed      	addgt	r5, r5, r3
 800b29a:	2600      	movs	r6, #0
 800b29c:	341a      	adds	r4, #26
 800b29e:	42b5      	cmp	r5, r6
 800b2a0:	d11a      	bne.n	800b2d8 <_printf_common+0xc8>
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	e008      	b.n	800b2b8 <_printf_common+0xa8>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	47c8      	blx	r9
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d103      	bne.n	800b2bc <_printf_common+0xac>
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2bc:	3501      	adds	r5, #1
 800b2be:	e7c6      	b.n	800b24e <_printf_common+0x3e>
 800b2c0:	18e1      	adds	r1, r4, r3
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	2030      	movs	r0, #48	@ 0x30
 800b2c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2ca:	4422      	add	r2, r4
 800b2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2d4:	3302      	adds	r3, #2
 800b2d6:	e7c7      	b.n	800b268 <_printf_common+0x58>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4622      	mov	r2, r4
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4638      	mov	r0, r7
 800b2e0:	47c8      	blx	r9
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d0e6      	beq.n	800b2b4 <_printf_common+0xa4>
 800b2e6:	3601      	adds	r6, #1
 800b2e8:	e7d9      	b.n	800b29e <_printf_common+0x8e>
	...

0800b2ec <_printf_i>:
 800b2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	7e0f      	ldrb	r7, [r1, #24]
 800b2f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2f4:	2f78      	cmp	r7, #120	@ 0x78
 800b2f6:	4691      	mov	r9, r2
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	469a      	mov	sl, r3
 800b2fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b302:	d807      	bhi.n	800b314 <_printf_i+0x28>
 800b304:	2f62      	cmp	r7, #98	@ 0x62
 800b306:	d80a      	bhi.n	800b31e <_printf_i+0x32>
 800b308:	2f00      	cmp	r7, #0
 800b30a:	f000 80d2 	beq.w	800b4b2 <_printf_i+0x1c6>
 800b30e:	2f58      	cmp	r7, #88	@ 0x58
 800b310:	f000 80b9 	beq.w	800b486 <_printf_i+0x19a>
 800b314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b31c:	e03a      	b.n	800b394 <_printf_i+0xa8>
 800b31e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b322:	2b15      	cmp	r3, #21
 800b324:	d8f6      	bhi.n	800b314 <_printf_i+0x28>
 800b326:	a101      	add	r1, pc, #4	@ (adr r1, 800b32c <_printf_i+0x40>)
 800b328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b399 	.word	0x0800b399
 800b334:	0800b315 	.word	0x0800b315
 800b338:	0800b315 	.word	0x0800b315
 800b33c:	0800b315 	.word	0x0800b315
 800b340:	0800b315 	.word	0x0800b315
 800b344:	0800b399 	.word	0x0800b399
 800b348:	0800b315 	.word	0x0800b315
 800b34c:	0800b315 	.word	0x0800b315
 800b350:	0800b315 	.word	0x0800b315
 800b354:	0800b315 	.word	0x0800b315
 800b358:	0800b499 	.word	0x0800b499
 800b35c:	0800b3c3 	.word	0x0800b3c3
 800b360:	0800b453 	.word	0x0800b453
 800b364:	0800b315 	.word	0x0800b315
 800b368:	0800b315 	.word	0x0800b315
 800b36c:	0800b4bb 	.word	0x0800b4bb
 800b370:	0800b315 	.word	0x0800b315
 800b374:	0800b3c3 	.word	0x0800b3c3
 800b378:	0800b315 	.word	0x0800b315
 800b37c:	0800b315 	.word	0x0800b315
 800b380:	0800b45b 	.word	0x0800b45b
 800b384:	6833      	ldr	r3, [r6, #0]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6032      	str	r2, [r6, #0]
 800b38c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b394:	2301      	movs	r3, #1
 800b396:	e09d      	b.n	800b4d4 <_printf_i+0x1e8>
 800b398:	6833      	ldr	r3, [r6, #0]
 800b39a:	6820      	ldr	r0, [r4, #0]
 800b39c:	1d19      	adds	r1, r3, #4
 800b39e:	6031      	str	r1, [r6, #0]
 800b3a0:	0606      	lsls	r6, r0, #24
 800b3a2:	d501      	bpl.n	800b3a8 <_printf_i+0xbc>
 800b3a4:	681d      	ldr	r5, [r3, #0]
 800b3a6:	e003      	b.n	800b3b0 <_printf_i+0xc4>
 800b3a8:	0645      	lsls	r5, r0, #25
 800b3aa:	d5fb      	bpl.n	800b3a4 <_printf_i+0xb8>
 800b3ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	da03      	bge.n	800b3bc <_printf_i+0xd0>
 800b3b4:	232d      	movs	r3, #45	@ 0x2d
 800b3b6:	426d      	negs	r5, r5
 800b3b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3bc:	4859      	ldr	r0, [pc, #356]	@ (800b524 <_printf_i+0x238>)
 800b3be:	230a      	movs	r3, #10
 800b3c0:	e011      	b.n	800b3e6 <_printf_i+0xfa>
 800b3c2:	6821      	ldr	r1, [r4, #0]
 800b3c4:	6833      	ldr	r3, [r6, #0]
 800b3c6:	0608      	lsls	r0, r1, #24
 800b3c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3cc:	d402      	bmi.n	800b3d4 <_printf_i+0xe8>
 800b3ce:	0649      	lsls	r1, r1, #25
 800b3d0:	bf48      	it	mi
 800b3d2:	b2ad      	uxthmi	r5, r5
 800b3d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3d6:	4853      	ldr	r0, [pc, #332]	@ (800b524 <_printf_i+0x238>)
 800b3d8:	6033      	str	r3, [r6, #0]
 800b3da:	bf14      	ite	ne
 800b3dc:	230a      	movne	r3, #10
 800b3de:	2308      	moveq	r3, #8
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3e6:	6866      	ldr	r6, [r4, #4]
 800b3e8:	60a6      	str	r6, [r4, #8]
 800b3ea:	2e00      	cmp	r6, #0
 800b3ec:	bfa2      	ittt	ge
 800b3ee:	6821      	ldrge	r1, [r4, #0]
 800b3f0:	f021 0104 	bicge.w	r1, r1, #4
 800b3f4:	6021      	strge	r1, [r4, #0]
 800b3f6:	b90d      	cbnz	r5, 800b3fc <_printf_i+0x110>
 800b3f8:	2e00      	cmp	r6, #0
 800b3fa:	d04b      	beq.n	800b494 <_printf_i+0x1a8>
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800b402:	fb03 5711 	mls	r7, r3, r1, r5
 800b406:	5dc7      	ldrb	r7, [r0, r7]
 800b408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b40c:	462f      	mov	r7, r5
 800b40e:	42bb      	cmp	r3, r7
 800b410:	460d      	mov	r5, r1
 800b412:	d9f4      	bls.n	800b3fe <_printf_i+0x112>
 800b414:	2b08      	cmp	r3, #8
 800b416:	d10b      	bne.n	800b430 <_printf_i+0x144>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	07df      	lsls	r7, r3, #31
 800b41c:	d508      	bpl.n	800b430 <_printf_i+0x144>
 800b41e:	6923      	ldr	r3, [r4, #16]
 800b420:	6861      	ldr	r1, [r4, #4]
 800b422:	4299      	cmp	r1, r3
 800b424:	bfde      	ittt	le
 800b426:	2330      	movle	r3, #48	@ 0x30
 800b428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b42c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b430:	1b92      	subs	r2, r2, r6
 800b432:	6122      	str	r2, [r4, #16]
 800b434:	f8cd a000 	str.w	sl, [sp]
 800b438:	464b      	mov	r3, r9
 800b43a:	aa03      	add	r2, sp, #12
 800b43c:	4621      	mov	r1, r4
 800b43e:	4640      	mov	r0, r8
 800b440:	f7ff fee6 	bl	800b210 <_printf_common>
 800b444:	3001      	adds	r0, #1
 800b446:	d14a      	bne.n	800b4de <_printf_i+0x1f2>
 800b448:	f04f 30ff 	mov.w	r0, #4294967295
 800b44c:	b004      	add	sp, #16
 800b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	f043 0320 	orr.w	r3, r3, #32
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	4833      	ldr	r0, [pc, #204]	@ (800b528 <_printf_i+0x23c>)
 800b45c:	2778      	movs	r7, #120	@ 0x78
 800b45e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	6831      	ldr	r1, [r6, #0]
 800b466:	061f      	lsls	r7, r3, #24
 800b468:	f851 5b04 	ldr.w	r5, [r1], #4
 800b46c:	d402      	bmi.n	800b474 <_printf_i+0x188>
 800b46e:	065f      	lsls	r7, r3, #25
 800b470:	bf48      	it	mi
 800b472:	b2ad      	uxthmi	r5, r5
 800b474:	6031      	str	r1, [r6, #0]
 800b476:	07d9      	lsls	r1, r3, #31
 800b478:	bf44      	itt	mi
 800b47a:	f043 0320 	orrmi.w	r3, r3, #32
 800b47e:	6023      	strmi	r3, [r4, #0]
 800b480:	b11d      	cbz	r5, 800b48a <_printf_i+0x19e>
 800b482:	2310      	movs	r3, #16
 800b484:	e7ac      	b.n	800b3e0 <_printf_i+0xf4>
 800b486:	4827      	ldr	r0, [pc, #156]	@ (800b524 <_printf_i+0x238>)
 800b488:	e7e9      	b.n	800b45e <_printf_i+0x172>
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	f023 0320 	bic.w	r3, r3, #32
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	e7f6      	b.n	800b482 <_printf_i+0x196>
 800b494:	4616      	mov	r6, r2
 800b496:	e7bd      	b.n	800b414 <_printf_i+0x128>
 800b498:	6833      	ldr	r3, [r6, #0]
 800b49a:	6825      	ldr	r5, [r4, #0]
 800b49c:	6961      	ldr	r1, [r4, #20]
 800b49e:	1d18      	adds	r0, r3, #4
 800b4a0:	6030      	str	r0, [r6, #0]
 800b4a2:	062e      	lsls	r6, r5, #24
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	d501      	bpl.n	800b4ac <_printf_i+0x1c0>
 800b4a8:	6019      	str	r1, [r3, #0]
 800b4aa:	e002      	b.n	800b4b2 <_printf_i+0x1c6>
 800b4ac:	0668      	lsls	r0, r5, #25
 800b4ae:	d5fb      	bpl.n	800b4a8 <_printf_i+0x1bc>
 800b4b0:	8019      	strh	r1, [r3, #0]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	4616      	mov	r6, r2
 800b4b8:	e7bc      	b.n	800b434 <_printf_i+0x148>
 800b4ba:	6833      	ldr	r3, [r6, #0]
 800b4bc:	1d1a      	adds	r2, r3, #4
 800b4be:	6032      	str	r2, [r6, #0]
 800b4c0:	681e      	ldr	r6, [r3, #0]
 800b4c2:	6862      	ldr	r2, [r4, #4]
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7f4 ff0a 	bl	80002e0 <memchr>
 800b4cc:	b108      	cbz	r0, 800b4d2 <_printf_i+0x1e6>
 800b4ce:	1b80      	subs	r0, r0, r6
 800b4d0:	6060      	str	r0, [r4, #4]
 800b4d2:	6863      	ldr	r3, [r4, #4]
 800b4d4:	6123      	str	r3, [r4, #16]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4dc:	e7aa      	b.n	800b434 <_printf_i+0x148>
 800b4de:	6923      	ldr	r3, [r4, #16]
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	4640      	mov	r0, r8
 800b4e6:	47d0      	blx	sl
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d0ad      	beq.n	800b448 <_printf_i+0x15c>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	079b      	lsls	r3, r3, #30
 800b4f0:	d413      	bmi.n	800b51a <_printf_i+0x22e>
 800b4f2:	68e0      	ldr	r0, [r4, #12]
 800b4f4:	9b03      	ldr	r3, [sp, #12]
 800b4f6:	4298      	cmp	r0, r3
 800b4f8:	bfb8      	it	lt
 800b4fa:	4618      	movlt	r0, r3
 800b4fc:	e7a6      	b.n	800b44c <_printf_i+0x160>
 800b4fe:	2301      	movs	r3, #1
 800b500:	4632      	mov	r2, r6
 800b502:	4649      	mov	r1, r9
 800b504:	4640      	mov	r0, r8
 800b506:	47d0      	blx	sl
 800b508:	3001      	adds	r0, #1
 800b50a:	d09d      	beq.n	800b448 <_printf_i+0x15c>
 800b50c:	3501      	adds	r5, #1
 800b50e:	68e3      	ldr	r3, [r4, #12]
 800b510:	9903      	ldr	r1, [sp, #12]
 800b512:	1a5b      	subs	r3, r3, r1
 800b514:	42ab      	cmp	r3, r5
 800b516:	dcf2      	bgt.n	800b4fe <_printf_i+0x212>
 800b518:	e7eb      	b.n	800b4f2 <_printf_i+0x206>
 800b51a:	2500      	movs	r5, #0
 800b51c:	f104 0619 	add.w	r6, r4, #25
 800b520:	e7f5      	b.n	800b50e <_printf_i+0x222>
 800b522:	bf00      	nop
 800b524:	080996d5 	.word	0x080996d5
 800b528:	080996e6 	.word	0x080996e6

0800b52c <__sflush_r>:
 800b52c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	0716      	lsls	r6, r2, #28
 800b536:	4605      	mov	r5, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d454      	bmi.n	800b5e6 <__sflush_r+0xba>
 800b53c:	684b      	ldr	r3, [r1, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	dc02      	bgt.n	800b548 <__sflush_r+0x1c>
 800b542:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	dd48      	ble.n	800b5da <__sflush_r+0xae>
 800b548:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b54a:	2e00      	cmp	r6, #0
 800b54c:	d045      	beq.n	800b5da <__sflush_r+0xae>
 800b54e:	2300      	movs	r3, #0
 800b550:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b554:	682f      	ldr	r7, [r5, #0]
 800b556:	6a21      	ldr	r1, [r4, #32]
 800b558:	602b      	str	r3, [r5, #0]
 800b55a:	d030      	beq.n	800b5be <__sflush_r+0x92>
 800b55c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	0759      	lsls	r1, r3, #29
 800b562:	d505      	bpl.n	800b570 <__sflush_r+0x44>
 800b564:	6863      	ldr	r3, [r4, #4]
 800b566:	1ad2      	subs	r2, r2, r3
 800b568:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b56a:	b10b      	cbz	r3, 800b570 <__sflush_r+0x44>
 800b56c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b56e:	1ad2      	subs	r2, r2, r3
 800b570:	2300      	movs	r3, #0
 800b572:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b574:	6a21      	ldr	r1, [r4, #32]
 800b576:	4628      	mov	r0, r5
 800b578:	47b0      	blx	r6
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	d106      	bne.n	800b58e <__sflush_r+0x62>
 800b580:	6829      	ldr	r1, [r5, #0]
 800b582:	291d      	cmp	r1, #29
 800b584:	d82b      	bhi.n	800b5de <__sflush_r+0xb2>
 800b586:	4a2a      	ldr	r2, [pc, #168]	@ (800b630 <__sflush_r+0x104>)
 800b588:	410a      	asrs	r2, r1
 800b58a:	07d6      	lsls	r6, r2, #31
 800b58c:	d427      	bmi.n	800b5de <__sflush_r+0xb2>
 800b58e:	2200      	movs	r2, #0
 800b590:	6062      	str	r2, [r4, #4]
 800b592:	04d9      	lsls	r1, r3, #19
 800b594:	6922      	ldr	r2, [r4, #16]
 800b596:	6022      	str	r2, [r4, #0]
 800b598:	d504      	bpl.n	800b5a4 <__sflush_r+0x78>
 800b59a:	1c42      	adds	r2, r0, #1
 800b59c:	d101      	bne.n	800b5a2 <__sflush_r+0x76>
 800b59e:	682b      	ldr	r3, [r5, #0]
 800b5a0:	b903      	cbnz	r3, 800b5a4 <__sflush_r+0x78>
 800b5a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5a6:	602f      	str	r7, [r5, #0]
 800b5a8:	b1b9      	cbz	r1, 800b5da <__sflush_r+0xae>
 800b5aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	d002      	beq.n	800b5b8 <__sflush_r+0x8c>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7ff fbf2 	bl	800ad9c <_free_r>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5bc:	e00d      	b.n	800b5da <__sflush_r+0xae>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	47b0      	blx	r6
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	1c50      	adds	r0, r2, #1
 800b5c8:	d1c9      	bne.n	800b55e <__sflush_r+0x32>
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0c6      	beq.n	800b55e <__sflush_r+0x32>
 800b5d0:	2b1d      	cmp	r3, #29
 800b5d2:	d001      	beq.n	800b5d8 <__sflush_r+0xac>
 800b5d4:	2b16      	cmp	r3, #22
 800b5d6:	d11e      	bne.n	800b616 <__sflush_r+0xea>
 800b5d8:	602f      	str	r7, [r5, #0]
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e022      	b.n	800b624 <__sflush_r+0xf8>
 800b5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5e2:	b21b      	sxth	r3, r3
 800b5e4:	e01b      	b.n	800b61e <__sflush_r+0xf2>
 800b5e6:	690f      	ldr	r7, [r1, #16]
 800b5e8:	2f00      	cmp	r7, #0
 800b5ea:	d0f6      	beq.n	800b5da <__sflush_r+0xae>
 800b5ec:	0793      	lsls	r3, r2, #30
 800b5ee:	680e      	ldr	r6, [r1, #0]
 800b5f0:	bf08      	it	eq
 800b5f2:	694b      	ldreq	r3, [r1, #20]
 800b5f4:	600f      	str	r7, [r1, #0]
 800b5f6:	bf18      	it	ne
 800b5f8:	2300      	movne	r3, #0
 800b5fa:	eba6 0807 	sub.w	r8, r6, r7
 800b5fe:	608b      	str	r3, [r1, #8]
 800b600:	f1b8 0f00 	cmp.w	r8, #0
 800b604:	dde9      	ble.n	800b5da <__sflush_r+0xae>
 800b606:	6a21      	ldr	r1, [r4, #32]
 800b608:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b60a:	4643      	mov	r3, r8
 800b60c:	463a      	mov	r2, r7
 800b60e:	4628      	mov	r0, r5
 800b610:	47b0      	blx	r6
 800b612:	2800      	cmp	r0, #0
 800b614:	dc08      	bgt.n	800b628 <__sflush_r+0xfc>
 800b616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b61a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	4407      	add	r7, r0
 800b62a:	eba8 0800 	sub.w	r8, r8, r0
 800b62e:	e7e7      	b.n	800b600 <__sflush_r+0xd4>
 800b630:	dfbffffe 	.word	0xdfbffffe

0800b634 <_fflush_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	690b      	ldr	r3, [r1, #16]
 800b638:	4605      	mov	r5, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	b913      	cbnz	r3, 800b644 <_fflush_r+0x10>
 800b63e:	2500      	movs	r5, #0
 800b640:	4628      	mov	r0, r5
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	b118      	cbz	r0, 800b64e <_fflush_r+0x1a>
 800b646:	6a03      	ldr	r3, [r0, #32]
 800b648:	b90b      	cbnz	r3, 800b64e <_fflush_r+0x1a>
 800b64a:	f7ff fa91 	bl	800ab70 <__sinit>
 800b64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0f3      	beq.n	800b63e <_fflush_r+0xa>
 800b656:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b658:	07d0      	lsls	r0, r2, #31
 800b65a:	d404      	bmi.n	800b666 <_fflush_r+0x32>
 800b65c:	0599      	lsls	r1, r3, #22
 800b65e:	d402      	bmi.n	800b666 <_fflush_r+0x32>
 800b660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b662:	f7ff fb8a 	bl	800ad7a <__retarget_lock_acquire_recursive>
 800b666:	4628      	mov	r0, r5
 800b668:	4621      	mov	r1, r4
 800b66a:	f7ff ff5f 	bl	800b52c <__sflush_r>
 800b66e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b670:	07da      	lsls	r2, r3, #31
 800b672:	4605      	mov	r5, r0
 800b674:	d4e4      	bmi.n	800b640 <_fflush_r+0xc>
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	059b      	lsls	r3, r3, #22
 800b67a:	d4e1      	bmi.n	800b640 <_fflush_r+0xc>
 800b67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b67e:	f7ff fb7d 	bl	800ad7c <__retarget_lock_release_recursive>
 800b682:	e7dd      	b.n	800b640 <_fflush_r+0xc>

0800b684 <__swbuf_r>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	460e      	mov	r6, r1
 800b688:	4614      	mov	r4, r2
 800b68a:	4605      	mov	r5, r0
 800b68c:	b118      	cbz	r0, 800b696 <__swbuf_r+0x12>
 800b68e:	6a03      	ldr	r3, [r0, #32]
 800b690:	b90b      	cbnz	r3, 800b696 <__swbuf_r+0x12>
 800b692:	f7ff fa6d 	bl	800ab70 <__sinit>
 800b696:	69a3      	ldr	r3, [r4, #24]
 800b698:	60a3      	str	r3, [r4, #8]
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	071a      	lsls	r2, r3, #28
 800b69e:	d501      	bpl.n	800b6a4 <__swbuf_r+0x20>
 800b6a0:	6923      	ldr	r3, [r4, #16]
 800b6a2:	b943      	cbnz	r3, 800b6b6 <__swbuf_r+0x32>
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f000 f82a 	bl	800b700 <__swsetup_r>
 800b6ac:	b118      	cbz	r0, 800b6b6 <__swbuf_r+0x32>
 800b6ae:	f04f 37ff 	mov.w	r7, #4294967295
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	6922      	ldr	r2, [r4, #16]
 800b6ba:	1a98      	subs	r0, r3, r2
 800b6bc:	6963      	ldr	r3, [r4, #20]
 800b6be:	b2f6      	uxtb	r6, r6
 800b6c0:	4283      	cmp	r3, r0
 800b6c2:	4637      	mov	r7, r6
 800b6c4:	dc05      	bgt.n	800b6d2 <__swbuf_r+0x4e>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f7ff ffb3 	bl	800b634 <_fflush_r>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d1ed      	bne.n	800b6ae <__swbuf_r+0x2a>
 800b6d2:	68a3      	ldr	r3, [r4, #8]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	60a3      	str	r3, [r4, #8]
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	6022      	str	r2, [r4, #0]
 800b6de:	701e      	strb	r6, [r3, #0]
 800b6e0:	6962      	ldr	r2, [r4, #20]
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d004      	beq.n	800b6f2 <__swbuf_r+0x6e>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	07db      	lsls	r3, r3, #31
 800b6ec:	d5e1      	bpl.n	800b6b2 <__swbuf_r+0x2e>
 800b6ee:	2e0a      	cmp	r6, #10
 800b6f0:	d1df      	bne.n	800b6b2 <__swbuf_r+0x2e>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f7ff ff9d 	bl	800b634 <_fflush_r>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d0d9      	beq.n	800b6b2 <__swbuf_r+0x2e>
 800b6fe:	e7d6      	b.n	800b6ae <__swbuf_r+0x2a>

0800b700 <__swsetup_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4b29      	ldr	r3, [pc, #164]	@ (800b7a8 <__swsetup_r+0xa8>)
 800b704:	4605      	mov	r5, r0
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	460c      	mov	r4, r1
 800b70a:	b118      	cbz	r0, 800b714 <__swsetup_r+0x14>
 800b70c:	6a03      	ldr	r3, [r0, #32]
 800b70e:	b90b      	cbnz	r3, 800b714 <__swsetup_r+0x14>
 800b710:	f7ff fa2e 	bl	800ab70 <__sinit>
 800b714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b718:	0719      	lsls	r1, r3, #28
 800b71a:	d422      	bmi.n	800b762 <__swsetup_r+0x62>
 800b71c:	06da      	lsls	r2, r3, #27
 800b71e:	d407      	bmi.n	800b730 <__swsetup_r+0x30>
 800b720:	2209      	movs	r2, #9
 800b722:	602a      	str	r2, [r5, #0]
 800b724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b728:	81a3      	strh	r3, [r4, #12]
 800b72a:	f04f 30ff 	mov.w	r0, #4294967295
 800b72e:	e033      	b.n	800b798 <__swsetup_r+0x98>
 800b730:	0758      	lsls	r0, r3, #29
 800b732:	d512      	bpl.n	800b75a <__swsetup_r+0x5a>
 800b734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b736:	b141      	cbz	r1, 800b74a <__swsetup_r+0x4a>
 800b738:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b73c:	4299      	cmp	r1, r3
 800b73e:	d002      	beq.n	800b746 <__swsetup_r+0x46>
 800b740:	4628      	mov	r0, r5
 800b742:	f7ff fb2b 	bl	800ad9c <_free_r>
 800b746:	2300      	movs	r3, #0
 800b748:	6363      	str	r3, [r4, #52]	@ 0x34
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	2300      	movs	r3, #0
 800b754:	6063      	str	r3, [r4, #4]
 800b756:	6923      	ldr	r3, [r4, #16]
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f043 0308 	orr.w	r3, r3, #8
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	b94b      	cbnz	r3, 800b77a <__swsetup_r+0x7a>
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b76c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b770:	d003      	beq.n	800b77a <__swsetup_r+0x7a>
 800b772:	4621      	mov	r1, r4
 800b774:	4628      	mov	r0, r5
 800b776:	f000 f84f 	bl	800b818 <__smakebuf_r>
 800b77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77e:	f013 0201 	ands.w	r2, r3, #1
 800b782:	d00a      	beq.n	800b79a <__swsetup_r+0x9a>
 800b784:	2200      	movs	r2, #0
 800b786:	60a2      	str	r2, [r4, #8]
 800b788:	6962      	ldr	r2, [r4, #20]
 800b78a:	4252      	negs	r2, r2
 800b78c:	61a2      	str	r2, [r4, #24]
 800b78e:	6922      	ldr	r2, [r4, #16]
 800b790:	b942      	cbnz	r2, 800b7a4 <__swsetup_r+0xa4>
 800b792:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b796:	d1c5      	bne.n	800b724 <__swsetup_r+0x24>
 800b798:	bd38      	pop	{r3, r4, r5, pc}
 800b79a:	0799      	lsls	r1, r3, #30
 800b79c:	bf58      	it	pl
 800b79e:	6962      	ldrpl	r2, [r4, #20]
 800b7a0:	60a2      	str	r2, [r4, #8]
 800b7a2:	e7f4      	b.n	800b78e <__swsetup_r+0x8e>
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e7f7      	b.n	800b798 <__swsetup_r+0x98>
 800b7a8:	24000028 	.word	0x24000028

0800b7ac <_sbrk_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	@ (800b7c8 <_sbrk_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f6 fd78 	bl	80022ac <_sbrk>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_sbrk_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_sbrk_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	24028578 	.word	0x24028578

0800b7cc <__swhatbuf_r>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d4:	2900      	cmp	r1, #0
 800b7d6:	b096      	sub	sp, #88	@ 0x58
 800b7d8:	4615      	mov	r5, r2
 800b7da:	461e      	mov	r6, r3
 800b7dc:	da0d      	bge.n	800b7fa <__swhatbuf_r+0x2e>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7e4:	f04f 0100 	mov.w	r1, #0
 800b7e8:	bf14      	ite	ne
 800b7ea:	2340      	movne	r3, #64	@ 0x40
 800b7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	6031      	str	r1, [r6, #0]
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	b016      	add	sp, #88	@ 0x58
 800b7f8:	bd70      	pop	{r4, r5, r6, pc}
 800b7fa:	466a      	mov	r2, sp
 800b7fc:	f000 f848 	bl	800b890 <_fstat_r>
 800b800:	2800      	cmp	r0, #0
 800b802:	dbec      	blt.n	800b7de <__swhatbuf_r+0x12>
 800b804:	9901      	ldr	r1, [sp, #4]
 800b806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b80e:	4259      	negs	r1, r3
 800b810:	4159      	adcs	r1, r3
 800b812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b816:	e7eb      	b.n	800b7f0 <__swhatbuf_r+0x24>

0800b818 <__smakebuf_r>:
 800b818:	898b      	ldrh	r3, [r1, #12]
 800b81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b81c:	079d      	lsls	r5, r3, #30
 800b81e:	4606      	mov	r6, r0
 800b820:	460c      	mov	r4, r1
 800b822:	d507      	bpl.n	800b834 <__smakebuf_r+0x1c>
 800b824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	2301      	movs	r3, #1
 800b82e:	6163      	str	r3, [r4, #20]
 800b830:	b003      	add	sp, #12
 800b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b834:	ab01      	add	r3, sp, #4
 800b836:	466a      	mov	r2, sp
 800b838:	f7ff ffc8 	bl	800b7cc <__swhatbuf_r>
 800b83c:	9f00      	ldr	r7, [sp, #0]
 800b83e:	4605      	mov	r5, r0
 800b840:	4639      	mov	r1, r7
 800b842:	4630      	mov	r0, r6
 800b844:	f7ff fb16 	bl	800ae74 <_malloc_r>
 800b848:	b948      	cbnz	r0, 800b85e <__smakebuf_r+0x46>
 800b84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84e:	059a      	lsls	r2, r3, #22
 800b850:	d4ee      	bmi.n	800b830 <__smakebuf_r+0x18>
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	f043 0302 	orr.w	r3, r3, #2
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	e7e2      	b.n	800b824 <__smakebuf_r+0xc>
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	6020      	str	r0, [r4, #0]
 800b862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	9b01      	ldr	r3, [sp, #4]
 800b86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b86e:	b15b      	cbz	r3, 800b888 <__smakebuf_r+0x70>
 800b870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b874:	4630      	mov	r0, r6
 800b876:	f000 f81d 	bl	800b8b4 <_isatty_r>
 800b87a:	b128      	cbz	r0, 800b888 <__smakebuf_r+0x70>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	f043 0301 	orr.w	r3, r3, #1
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	431d      	orrs	r5, r3
 800b88c:	81a5      	strh	r5, [r4, #12]
 800b88e:	e7cf      	b.n	800b830 <__smakebuf_r+0x18>

0800b890 <_fstat_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d07      	ldr	r5, [pc, #28]	@ (800b8b0 <_fstat_r+0x20>)
 800b894:	2300      	movs	r3, #0
 800b896:	4604      	mov	r4, r0
 800b898:	4608      	mov	r0, r1
 800b89a:	4611      	mov	r1, r2
 800b89c:	602b      	str	r3, [r5, #0]
 800b89e:	f7f6 fcdd 	bl	800225c <_fstat>
 800b8a2:	1c43      	adds	r3, r0, #1
 800b8a4:	d102      	bne.n	800b8ac <_fstat_r+0x1c>
 800b8a6:	682b      	ldr	r3, [r5, #0]
 800b8a8:	b103      	cbz	r3, 800b8ac <_fstat_r+0x1c>
 800b8aa:	6023      	str	r3, [r4, #0]
 800b8ac:	bd38      	pop	{r3, r4, r5, pc}
 800b8ae:	bf00      	nop
 800b8b0:	24028578 	.word	0x24028578

0800b8b4 <_isatty_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4d06      	ldr	r5, [pc, #24]	@ (800b8d0 <_isatty_r+0x1c>)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4608      	mov	r0, r1
 800b8be:	602b      	str	r3, [r5, #0]
 800b8c0:	f7f6 fcdc 	bl	800227c <_isatty>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_isatty_r+0x1a>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_isatty_r+0x1a>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	24028578 	.word	0x24028578

0800b8d4 <_init>:
 800b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d6:	bf00      	nop
 800b8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8da:	bc08      	pop	{r3}
 800b8dc:	469e      	mov	lr, r3
 800b8de:	4770      	bx	lr

0800b8e0 <_fini>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	bf00      	nop
 800b8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e6:	bc08      	pop	{r3}
 800b8e8:	469e      	mov	lr, r3
 800b8ea:	4770      	bx	lr
