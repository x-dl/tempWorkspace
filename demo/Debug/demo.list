
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006738  08006738  00007738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800677c  0800677c  0000777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006780  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006790  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080067f0  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  08006850  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  08006850  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018832  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c6  00000000  00000000  00020930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000231f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bde  00000000  00000000  00024150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003890d  00000000  00000000  00024d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bcc  00000000  00000000  0005d63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    003d29a3  00000000  00000000  00074207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00446baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004148  00000000  00000000  00446bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0044ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006720 	.word	0x08006720

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006720 	.word	0x08006720

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005ce:	4b38      	ldr	r3, [pc, #224]	@ (80006b0 <main+0xe8>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d11b      	bne.n	8000612 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005da:	f3bf 8f4f 	dsb	sy
}
 80005de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e0:	f3bf 8f6f 	isb	sy
}
 80005e4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e6:	4b32      	ldr	r3, [pc, #200]	@ (80006b0 <main+0xe8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f4:	f3bf 8f6f 	isb	sy
}
 80005f8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005fa:	4b2d      	ldr	r3, [pc, #180]	@ (80006b0 <main+0xe8>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <main+0xe8>)
 8000600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000604:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000606:	f3bf 8f4f 	dsb	sy
}
 800060a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060c:	f3bf 8f6f 	isb	sy
}
 8000610:	e000      	b.n	8000614 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000612:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <main+0xe8>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d138      	bne.n	8000692 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <main+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000628:	f3bf 8f4f 	dsb	sy
}
 800062c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <main+0xe8>)
 8000630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000634:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	0b5b      	lsrs	r3, r3, #13
 800063a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800063e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000648:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	015a      	lsls	r2, r3, #5
 800064e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000652:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000658:	4915      	ldr	r1, [pc, #84]	@ (80006b0 <main+0xe8>)
 800065a:	4313      	orrs	r3, r2
 800065c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1ef      	bne.n	800064a <main+0x82>
    } while(sets-- != 0U);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1e5      	bne.n	8000640 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000674:	f3bf 8f4f 	dsb	sy
}
 8000678:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <main+0xe8>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <main+0xe8>)
 8000680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000684:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000686:	f3bf 8f4f 	dsb	sy
}
 800068a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068c:	f3bf 8f6f 	isb	sy
}
 8000690:	e000      	b.n	8000694 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000692:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fcf0 	bl	8001078 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f80c 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f982 	bl	80009a4 <MX_GPIO_Init>
  MX_ETH_Init();
 80006a0:	f000 f8b6 	bl	8000810 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006a4:	f000 f900 	bl	80008a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a8:	f000 f94a 	bl	8000940 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <main+0xe4>
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09e      	sub	sp, #120	@ 0x78
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006be:	224c      	movs	r2, #76	@ 0x4c
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 ffff 	bl	80066c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2220      	movs	r2, #32
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f005 fff8 	bl	80066c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d6:	2002      	movs	r0, #2
 80006d8:	f001 fdb6 	bl	8002248 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b48      	ldr	r3, [pc, #288]	@ (8000804 <SystemClock_Config+0x150>)
 80006e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e4:	4a47      	ldr	r2, [pc, #284]	@ (8000804 <SystemClock_Config+0x150>)
 80006e6:	f023 0301 	bic.w	r3, r3, #1
 80006ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006ec:	4b45      	ldr	r3, [pc, #276]	@ (8000804 <SystemClock_Config+0x150>)
 80006ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b44      	ldr	r3, [pc, #272]	@ (8000808 <SystemClock_Config+0x154>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a43      	ldr	r2, [pc, #268]	@ (8000808 <SystemClock_Config+0x154>)
 80006fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b41      	ldr	r3, [pc, #260]	@ (8000808 <SystemClock_Config+0x154>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070e:	bf00      	nop
 8000710:	4b3d      	ldr	r3, [pc, #244]	@ (8000808 <SystemClock_Config+0x154>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800071c:	d1f8      	bne.n	8000710 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b3b      	ldr	r3, [pc, #236]	@ (800080c <SystemClock_Config+0x158>)
 8000720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000724:	4a39      	ldr	r2, [pc, #228]	@ (800080c <SystemClock_Config+0x158>)
 8000726:	f043 0302 	orr.w	r3, r3, #2
 800072a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800072e:	4b37      	ldr	r3, [pc, #220]	@ (800080c <SystemClock_Config+0x158>)
 8000730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b31      	ldr	r3, [pc, #196]	@ (8000808 <SystemClock_Config+0x154>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a30      	ldr	r2, [pc, #192]	@ (8000808 <SystemClock_Config+0x154>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <SystemClock_Config+0x154>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <SystemClock_Config+0x150>)
 8000758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800075a:	4a2a      	ldr	r2, [pc, #168]	@ (8000804 <SystemClock_Config+0x150>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <SystemClock_Config+0x150>)
 8000764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076e:	bf00      	nop
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <SystemClock_Config+0x154>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800077c:	d1f8      	bne.n	8000770 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077e:	2301      	movs	r3, #1
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000782:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078c:	2302      	movs	r3, #2
 800078e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000794:	2378      	movs	r3, #120	@ 0x78
 8000796:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 800079c:	230f      	movs	r3, #15
 800079e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a4:	230c      	movs	r3, #12
 80007a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fd91 	bl	80022dc <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007c0:	f000 f9a4 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	233f      	movs	r3, #63	@ 0x3f
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2303      	movs	r3, #3
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007d0:	2308      	movs	r3, #8
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d4:	2340      	movs	r3, #64	@ 0x40
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d8:	2340      	movs	r3, #64	@ 0x40
 80007da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e2:	2340      	movs	r3, #64	@ 0x40
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2104      	movs	r1, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 f9cf 	bl	8002b90 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x148>
  {
    Error_Handler();
 80007f8:	f000 f988 	bl	8000b0c <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3778      	adds	r7, #120	@ 0x78
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58000400 	.word	0x58000400
 8000808:	58024800 	.word	0x58024800
 800080c:	58024400 	.word	0x58024400

08000810 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_ETH_Init+0x80>)
 8000816:	4a1f      	ldr	r2, [pc, #124]	@ (8000894 <MX_ETH_Init+0x84>)
 8000818:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_ETH_Init+0x88>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000820:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <MX_ETH_Init+0x88>)
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <MX_ETH_Init+0x88>)
 8000828:	22e1      	movs	r2, #225	@ 0xe1
 800082a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_ETH_Init+0x88>)
 800082e:	2200      	movs	r2, #0
 8000830:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <MX_ETH_Init+0x88>)
 8000834:	2200      	movs	r2, #0
 8000836:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_ETH_Init+0x88>)
 800083a:	2200      	movs	r2, #0
 800083c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_ETH_Init+0x80>)
 8000840:	4a15      	ldr	r2, [pc, #84]	@ (8000898 <MX_ETH_Init+0x88>)
 8000842:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_ETH_Init+0x80>)
 8000846:	2201      	movs	r2, #1
 8000848:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_ETH_Init+0x80>)
 800084c:	4a13      	ldr	r2, [pc, #76]	@ (800089c <MX_ETH_Init+0x8c>)
 800084e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_ETH_Init+0x80>)
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <MX_ETH_Init+0x90>)
 8000854:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_ETH_Init+0x80>)
 8000858:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800085c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <MX_ETH_Init+0x80>)
 8000860:	f000 fdc4 	bl	80013ec <HAL_ETH_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800086a:	f000 f94f 	bl	8000b0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800086e:	2238      	movs	r2, #56	@ 0x38
 8000870:	2100      	movs	r1, #0
 8000872:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <MX_ETH_Init+0x94>)
 8000874:	f005 ff27 	bl	80066c6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <MX_ETH_Init+0x94>)
 800087a:	2221      	movs	r2, #33	@ 0x21
 800087c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_ETH_Init+0x94>)
 8000880:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000884:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_ETH_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	24000124 	.word	0x24000124
 8000894:	40028000 	.word	0x40028000
 8000898:	2400074c 	.word	0x2400074c
 800089c:	24000070 	.word	0x24000070
 80008a0:	24000010 	.word	0x24000010
 80008a4:	240000ec 	.word	0x240000ec

080008a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_USART3_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 80008f2:	f004 fb05 	bl	8004f00 <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f906 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 8000904:	f005 fb0d 	bl	8005f22 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800090e:	f000 f8fd 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 8000916:	f005 fb42 	bl	8005f9e <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f8f4 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_USART3_UART_Init+0x90>)
 8000926:	f005 fac3 	bl	8005eb0 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f8ec 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	240001d4 	.word	0x240001d4
 800093c:	40004800 	.word	0x40004800

08000940 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000946:	4a16      	ldr	r2, [pc, #88]	@ (80009a0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000948:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094c:	2209      	movs	r2, #9
 800094e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000952:	2202      	movs	r2, #2
 8000954:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000958:	2200      	movs	r2, #0
 800095a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	2202      	movs	r2, #2
 8000960:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000964:	2201      	movs	r2, #1
 8000966:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096a:	2200      	movs	r2, #0
 800096c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000976:	2201      	movs	r2, #1
 8000978:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097c:	2201      	movs	r2, #1
 800097e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000988:	f001 fb2d 	bl	8001fe6 <HAL_PCD_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000992:	f000 f8bb 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	24000268 	.word	0x24000268
 80009a0:	40080000 	.word	0x40080000

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b50      	ldr	r3, [pc, #320]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	4a4e      	ldr	r2, [pc, #312]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ca:	4b4c      	ldr	r3, [pc, #304]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d8:	4b48      	ldr	r3, [pc, #288]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	4a47      	ldr	r2, [pc, #284]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e8:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b41      	ldr	r3, [pc, #260]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	4a3f      	ldr	r2, [pc, #252]	@ (8000afc <MX_GPIO_Init+0x158>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a06:	4b3d      	ldr	r3, [pc, #244]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	4a38      	ldr	r2, [pc, #224]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a24:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	4b32      	ldr	r3, [pc, #200]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a42:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a29      	ldr	r2, [pc, #164]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_GPIO_Init+0x158>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000a74:	4822      	ldr	r0, [pc, #136]	@ (8000b00 <MX_GPIO_Init+0x15c>)
 8000a76:	f001 fa9d 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2140      	movs	r1, #64	@ 0x40
 8000a7e:	4821      	ldr	r0, [pc, #132]	@ (8000b04 <MX_GPIO_Init+0x160>)
 8000a80:	f001 fa98 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481b      	ldr	r0, [pc, #108]	@ (8000b08 <MX_GPIO_Init+0x164>)
 8000a9c:	f001 f8da 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000aa0:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4811      	ldr	r0, [pc, #68]	@ (8000b00 <MX_GPIO_Init+0x15c>)
 8000aba:	f001 f8cb 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000abe:	2340      	movs	r3, #64	@ 0x40
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <MX_GPIO_Init+0x160>)
 8000ad6:	f001 f8bd 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ada:	2380      	movs	r3, #128	@ 0x80
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_GPIO_Init+0x160>)
 8000aee:	f001 f8b1 	bl	8001c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	@ 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	58024400 	.word	0x58024400
 8000b00:	58020400 	.word	0x58020400
 8000b04:	58021800 	.word	0x58021800
 8000b08:	58020800 	.word	0x58020800

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b24:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	58024400 	.word	0x58024400

08000b4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	@ 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a59      	ldr	r2, [pc, #356]	@ (8000cd0 <HAL_ETH_MspInit+0x184>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	f040 80ab 	bne.w	8000cc6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b70:	4b58      	ldr	r3, [pc, #352]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b76:	4a57      	ldr	r2, [pc, #348]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b80:	4b54      	ldr	r3, [pc, #336]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b8a:	623b      	str	r3, [r7, #32]
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b8e:	4b51      	ldr	r3, [pc, #324]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b94:	4a4f      	ldr	r2, [pc, #316]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bac:	4b49      	ldr	r3, [pc, #292]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bb2:	4a48      	ldr	r2, [pc, #288]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bbc:	4b45      	ldr	r3, [pc, #276]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b42      	ldr	r3, [pc, #264]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a40      	ldr	r2, [pc, #256]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a39      	ldr	r2, [pc, #228]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b36      	ldr	r3, [pc, #216]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0c:	4a31      	ldr	r2, [pc, #196]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c16:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c42:	2332      	movs	r3, #50	@ 0x32
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c52:	230b      	movs	r3, #11
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481e      	ldr	r0, [pc, #120]	@ (8000cd8 <HAL_ETH_MspInit+0x18c>)
 8000c5e:	f000 fff9 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c62:	2386      	movs	r3, #134	@ 0x86
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c72:	230b      	movs	r3, #11
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4817      	ldr	r0, [pc, #92]	@ (8000cdc <HAL_ETH_MspInit+0x190>)
 8000c7e:	f000 ffe9 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4810      	ldr	r0, [pc, #64]	@ (8000ce0 <HAL_ETH_MspInit+0x194>)
 8000ca0:	f000 ffd8 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ca4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <HAL_ETH_MspInit+0x198>)
 8000cc2:	f000 ffc7 	bl	8001c54 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	@ 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40028000 	.word	0x40028000
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58020800 	.word	0x58020800
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	58020400 	.word	0x58020400
 8000ce4:	58021800 	.word	0x58021800

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0ba      	sub	sp, #232	@ 0xe8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	22c0      	movs	r2, #192	@ 0xc0
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 fcdc 	bl	80066c6 <memset>
  if(huart->Instance==USART3)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a27      	ldr	r2, [pc, #156]	@ (8000db0 <HAL_UART_MspInit+0xc8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d146      	bne.n	8000da6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d18:	f04f 0202 	mov.w	r2, #2
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 faba 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d3a:	f7ff fee7 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <HAL_UART_MspInit+0xcc>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d44:	4a1b      	ldr	r2, [pc, #108]	@ (8000db4 <HAL_UART_MspInit+0xcc>)
 8000d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_UART_MspInit+0xcc>)
 8000d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_UART_MspInit+0xcc>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <HAL_UART_MspInit+0xcc>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <HAL_UART_MspInit+0xcc>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d94:	2307      	movs	r3, #7
 8000d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <HAL_UART_MspInit+0xd0>)
 8000da2:	f000 ff57 	bl	8001c54 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	37e8      	adds	r7, #232	@ 0xe8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004800 	.word	0x40004800
 8000db4:	58024400 	.word	0x58024400
 8000db8:	58020c00 	.word	0x58020c00

08000dbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ba      	sub	sp, #232	@ 0xe8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	22c0      	movs	r2, #192	@ 0xc0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 fc72 	bl	80066c6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a30      	ldr	r2, [pc, #192]	@ (8000ea8 <HAL_PCD_MspInit+0xec>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d159      	bne.n	8000ea0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000df8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fa4f 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e10:	f7ff fe7c 	bl	8000b0c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e14:	f001 fa52 	bl	80022bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <HAL_PCD_MspInit+0xf0>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <HAL_PCD_MspInit+0xf0>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <HAL_PCD_MspInit+0xf0>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e36:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e50:	230a      	movs	r3, #10
 8000e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4814      	ldr	r0, [pc, #80]	@ (8000eb0 <HAL_PCD_MspInit+0xf4>)
 8000e5e:	f000 fef9 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <HAL_PCD_MspInit+0xf4>)
 8000e7e:	f000 fee9 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_PCD_MspInit+0xf0>)
 8000e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e88:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_PCD_MspInit+0xf0>)
 8000e8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_PCD_MspInit+0xf0>)
 8000e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ea0:	bf00      	nop
 8000ea2:	37e8      	adds	r7, #232	@ 0xe8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40080000 	.word	0x40080000
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	58020000 	.word	0x58020000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <NMI_Handler+0x4>

08000ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <MemManage_Handler+0x4>

08000ecc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0a:	f000 f927 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f18:	4b37      	ldr	r3, [pc, #220]	@ (8000ff8 <SystemInit+0xe4>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1e:	4a36      	ldr	r2, [pc, #216]	@ (8000ff8 <SystemInit+0xe4>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f28:	4b34      	ldr	r3, [pc, #208]	@ (8000ffc <SystemInit+0xe8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	2b06      	cmp	r3, #6
 8000f32:	d807      	bhi.n	8000f44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f34:	4b31      	ldr	r3, [pc, #196]	@ (8000ffc <SystemInit+0xe8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f023 030f 	bic.w	r3, r3, #15
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ffc <SystemInit+0xe8>)
 8000f3e:	f043 0307 	orr.w	r3, r3, #7
 8000f42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f44:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <SystemInit+0xec>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a2d      	ldr	r2, [pc, #180]	@ (8001000 <SystemInit+0xec>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <SystemInit+0xec>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <SystemInit+0xec>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4929      	ldr	r1, [pc, #164]	@ (8001000 <SystemInit+0xec>)
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <SystemInit+0xf0>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f62:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <SystemInit+0xe8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6e:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <SystemInit+0xe8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 030f 	bic.w	r3, r3, #15
 8000f76:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <SystemInit+0xe8>)
 8000f78:	f043 0307 	orr.w	r3, r3, #7
 8000f7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <SystemInit+0xec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <SystemInit+0xec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <SystemInit+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <SystemInit+0xec>)
 8000f92:	4a1d      	ldr	r2, [pc, #116]	@ (8001008 <SystemInit+0xf4>)
 8000f94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <SystemInit+0xec>)
 8000f98:	4a1c      	ldr	r2, [pc, #112]	@ (800100c <SystemInit+0xf8>)
 8000f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <SystemInit+0xec>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <SystemInit+0xfc>)
 8000fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <SystemInit+0xec>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <SystemInit+0xec>)
 8000faa:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <SystemInit+0xfc>)
 8000fac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <SystemInit+0xec>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <SystemInit+0xec>)
 8000fb6:	4a16      	ldr	r2, [pc, #88]	@ (8001010 <SystemInit+0xfc>)
 8000fb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <SystemInit+0xec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <SystemInit+0xec>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <SystemInit+0xec>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <SystemInit+0xec>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <SystemInit+0x100>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <SystemInit+0x104>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fde:	d202      	bcs.n	8000fe6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <SystemInit+0x108>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <SystemInit+0x10c>)
 8000fe8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	52002000 	.word	0x52002000
 8001000:	58024400 	.word	0x58024400
 8001004:	eaf6ed7f 	.word	0xeaf6ed7f
 8001008:	02020200 	.word	0x02020200
 800100c:	01ff0000 	.word	0x01ff0000
 8001010:	01010280 	.word	0x01010280
 8001014:	5c001000 	.word	0x5c001000
 8001018:	ffff0000 	.word	0xffff0000
 800101c:	51008108 	.word	0x51008108
 8001020:	52004000 	.word	0x52004000

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800105c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001028:	f7ff ff74 	bl	8000f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	@ (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f005 fb41 	bl	80066d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fab7 	bl	80005c8 <main>
  bx  lr
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001060:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001064:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001068:	08006780 	.word	0x08006780
  ldr r2, =_sbss
 800106c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001070:	24000758 	.word	0x24000758

08001074 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC3_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107e:	2003      	movs	r0, #3
 8001080:	f000 f982 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001084:	f001 ff3a 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8001088:	4602      	mov	r2, r0
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_Init+0x68>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	4913      	ldr	r1, [pc, #76]	@ (80010e4 <HAL_Init+0x6c>)
 8001096:	5ccb      	ldrb	r3, [r1, r3]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_Init+0x68>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_Init+0x6c>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <HAL_Init+0x70>)
 80010ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_Init+0x74>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f814 	bl	80010f0 <HAL_InitTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e002      	b.n	80010d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010d2:	f7ff fd21 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58024400 	.word	0x58024400
 80010e4:	08006738 	.word	0x08006738
 80010e8:	24000004 	.word	0x24000004
 80010ec:	24000000 	.word	0x24000000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_InitTick+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e021      	b.n	8001148 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_InitTick+0x64>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_InitTick+0x60>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f959 	bl	80013d2 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f931 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x68>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2400000c 	.word	0x2400000c
 8001154:	24000000 	.word	0x24000000
 8001158:	24000008 	.word	0x24000008

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2400000c 	.word	0x2400000c
 8001180:	24000754 	.word	0x24000754

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	24000754 	.word	0x24000754

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2400000c 	.word	0x2400000c

080011e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <HAL_GetREVID+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0c1b      	lsrs	r3, r3, #16
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	5c001000 	.word	0x5c001000

080011fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800120c:	4904      	ldr	r1, [pc, #16]	@ (8001220 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	58000400 	.word	0x58000400

08001224 <__NVIC_SetPriorityGrouping>:
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <__NVIC_SetPriorityGrouping+0x40>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	4313      	orrs	r3, r2
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <__NVIC_SetPriorityGrouping+0x40>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	05fa0000 	.word	0x05fa0000

0800126c <__NVIC_GetPriorityGrouping>:
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_SetPriority>:
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	@ (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff47 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff5e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff90 	bl	80012dc <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5f 	bl	8001288 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffb2 	bl	8001344 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0e3      	b.n	80015c6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001404:	2b00      	cmp	r3, #0
 8001406:	d106      	bne.n	8001416 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2223      	movs	r2, #35	@ 0x23
 800140c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fb9b 	bl	8000b4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b6e      	ldr	r3, [pc, #440]	@ (80015d0 <HAL_ETH_Init+0x1e4>)
 8001418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800141c:	4a6c      	ldr	r2, [pc, #432]	@ (80015d0 <HAL_ETH_Init+0x1e4>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <HAL_ETH_Init+0x1e4>)
 8001428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7a1b      	ldrb	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d103      	bne.n	8001444 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff fedd 	bl	80011fc <HAL_SYSCFG_ETHInterfaceSelect>
 8001442:	e003      	b.n	800144c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001444:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001448:	f7ff fed8 	bl	80011fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800144c:	4b61      	ldr	r3, [pc, #388]	@ (80015d4 <HAL_ETH_Init+0x1e8>)
 800144e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001468:	f7ff fe8c 	bl	8001184 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800146e:	e011      	b.n	8001494 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001470:	f7ff fe88 	bl	8001184 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800147e:	d909      	bls.n	8001494 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	22e0      	movs	r2, #224	@ 0xe0
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e098      	b.n	80015c6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e4      	bne.n	8001470 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f89e 	bl	80015e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014ac:	f001 fea0 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_ETH_Init+0x1ec>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0c9a      	lsrs	r2, r3, #18
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3a01      	subs	r2, #1
 80014c0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fa81 	bl	80019cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80014d6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014e6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	22e0      	movs	r2, #224	@ 0xe0
 8001502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e05d      	b.n	80015c6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001512:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <HAL_ETH_Init+0x1f0>)
 8001518:	4013      	ands	r3, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6952      	ldr	r2, [r2, #20]
 800151e:	0051      	lsls	r1, r2, #1
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800152a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fae9 	bl	8001b06 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fb2f 	bl	8001b98 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	3305      	adds	r3, #5
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	021a      	lsls	r2, r3, #8
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	3303      	adds	r3, #3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	061a      	lsls	r2, r3, #24
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	3302      	adds	r3, #2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	3301      	adds	r3, #1
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001578:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001586:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001588:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_ETH_Init+0x1f4>)
 800159a:	430b      	orrs	r3, r1
 800159c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_ETH_Init+0x1f8>)
 80015ae:	430b      	orrs	r3, r1
 80015b0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2210      	movs	r2, #16
 80015c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58000400 	.word	0x58000400
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	ffff8001 	.word	0xffff8001
 80015e0:	0c020060 	.word	0x0c020060
 80015e4:	0c20c000 	.word	0x0c20c000

080015e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001600:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001602:	f001 fdf5 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8001606:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4a1a      	ldr	r2, [pc, #104]	@ (8001674 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d804      	bhi.n	800161a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e022      	b.n	8001660 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4a16      	ldr	r2, [pc, #88]	@ (8001678 <HAL_ETH_SetMDIOClockRange+0x90>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d204      	bcs.n	800162c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	e019      	b.n	8001660 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4a13      	ldr	r2, [pc, #76]	@ (800167c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d915      	bls.n	8001660 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d804      	bhi.n	8001646 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e00c      	b.n	8001660 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d804      	bhi.n	8001658 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e003      	b.n	8001660 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800165e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	02160ebf 	.word	0x02160ebf
 8001678:	03938700 	.word	0x03938700
 800167c:	05f5e0ff 	.word	0x05f5e0ff
 8001680:	08f0d17f 	.word	0x08f0d17f
 8001684:	0ee6b27f 	.word	0x0ee6b27f

08001688 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800169a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	7b1b      	ldrb	r3, [r3, #12]
 80016a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	7b5b      	ldrb	r3, [r3, #13]
 80016b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	7b9b      	ldrb	r3, [r3, #14]
 80016b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	7bdb      	ldrb	r3, [r3, #15]
 80016c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	7c12      	ldrb	r2, [r2, #16]
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	d102      	bne.n	80016d2 <ETH_SetMACConfig+0x4a>
 80016cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016d0:	e000      	b.n	80016d4 <ETH_SetMACConfig+0x4c>
 80016d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	7c52      	ldrb	r2, [r2, #17]
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d102      	bne.n	80016e4 <ETH_SetMACConfig+0x5c>
 80016de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016e2:	e000      	b.n	80016e6 <ETH_SetMACConfig+0x5e>
 80016e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	7c9b      	ldrb	r3, [r3, #18]
 80016ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016ee:	431a      	orrs	r2, r3
               macconf->Speed |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80016f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80016fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	7f1b      	ldrb	r3, [r3, #28]
 8001700:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001702:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	7f5b      	ldrb	r3, [r3, #29]
 8001708:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800170a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	7f92      	ldrb	r2, [r2, #30]
 8001710:	2a00      	cmp	r2, #0
 8001712:	d102      	bne.n	800171a <ETH_SetMACConfig+0x92>
 8001714:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001718:	e000      	b.n	800171c <ETH_SetMACConfig+0x94>
 800171a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800171c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	7fdb      	ldrb	r3, [r3, #31]
 8001722:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001724:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	f892 2020 	ldrb.w	r2, [r2, #32]
 800172c:	2a00      	cmp	r2, #0
 800172e:	d102      	bne.n	8001736 <ETH_SetMACConfig+0xae>
 8001730:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001734:	e000      	b.n	8001738 <ETH_SetMACConfig+0xb0>
 8001736:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001738:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800173e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001746:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001748:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800174e:	4313      	orrs	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b56      	ldr	r3, [pc, #344]	@ (80018b4 <ETH_SetMACConfig+0x22c>)
 800175a:	4013      	ands	r3, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	430b      	orrs	r3, r1
 8001764:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001772:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001774:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800177c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800177e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001786:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001788:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001790:	2a00      	cmp	r2, #0
 8001792:	d102      	bne.n	800179a <ETH_SetMACConfig+0x112>
 8001794:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001798:	e000      	b.n	800179c <ETH_SetMACConfig+0x114>
 800179a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800179c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4b42      	ldr	r3, [pc, #264]	@ (80018b8 <ETH_SetMACConfig+0x230>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	430b      	orrs	r3, r1
 80017b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <ETH_SetMACConfig+0x234>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	430b      	orrs	r3, r1
 80017dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d101      	bne.n	80017fa <ETH_SetMACConfig+0x172>
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	e000      	b.n	80017fc <ETH_SetMACConfig+0x174>
 80017fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001802:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001804:	4313      	orrs	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800180e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	68f9      	ldr	r1, [r7, #12]
 800181a:	430b      	orrs	r3, r1
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001824:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800182c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800182e:	4313      	orrs	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183a:	f023 0103 	bic.w	r1, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	430a      	orrs	r2, r1
 8001846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001852:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800186e:	2a00      	cmp	r2, #0
 8001870:	d101      	bne.n	8001876 <ETH_SetMACConfig+0x1ee>
 8001872:	2240      	movs	r2, #64	@ 0x40
 8001874:	e000      	b.n	8001878 <ETH_SetMACConfig+0x1f0>
 8001876:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001878:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001880:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800188a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800188c:	4313      	orrs	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001898:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	00048083 	.word	0x00048083
 80018b8:	c0f88000 	.word	0xc0f88000
 80018bc:	fffffef0 	.word	0xfffffef0

080018c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <ETH_SetDMAConfig+0xf8>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	791b      	ldrb	r3, [r3, #4]
 80018ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	7b1b      	ldrb	r3, [r3, #12]
 80018f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <ETH_SetDMAConfig+0xfc>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	430b      	orrs	r3, r1
 8001914:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001918:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	7b5b      	ldrb	r3, [r3, #13]
 800191e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001924:	4313      	orrs	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001930:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001934:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <ETH_SetDMAConfig+0x100>)
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	430b      	orrs	r3, r1
 8001940:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001944:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	7d1b      	ldrb	r3, [r3, #20]
 8001950:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001952:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7f5b      	ldrb	r3, [r3, #29]
 8001958:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001966:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <ETH_SetDMAConfig+0x104>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	68f9      	ldr	r1, [r7, #12]
 8001974:	430b      	orrs	r3, r1
 8001976:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800197a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	7f1b      	ldrb	r3, [r3, #28]
 8001982:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001994:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <ETH_SetDMAConfig+0x108>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	430b      	orrs	r3, r1
 80019a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019a8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	ffff87fd 	.word	0xffff87fd
 80019bc:	ffff2ffe 	.word	0xffff2ffe
 80019c0:	fffec000 	.word	0xfffec000
 80019c4:	ffc0efef 	.word	0xffc0efef
 80019c8:	7fc0ffff 	.word	0x7fc0ffff

080019cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0a4      	sub	sp, #144	@ 0x90
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019da:	2300      	movs	r3, #0
 80019dc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001a24:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001a28:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a46:	2300      	movs	r3, #0
 8001a48:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a64:	2320      	movs	r3, #32
 8001a66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a76:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a80:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ab0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fde6 	bl	8001688 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ad6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ada:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ae0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ae4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001aec:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fee1 	bl	80018c0 <ETH_SetDMAConfig>
}
 8001afe:	bf00      	nop
 8001b00:	3790      	adds	r7, #144	@ 0x90
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e01d      	b.n	8001b50 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	3206      	adds	r2, #6
 8001b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d9de      	bls.n	8001b14 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b64:	461a      	mov	r2, r3
 8001b66:	2303      	movs	r3, #3
 8001b68:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b78:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b88:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e023      	b.n	8001bee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	3212      	adds	r2, #18
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d9d8      	bls.n	8001ba6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c42:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c62:	4b89      	ldr	r3, [pc, #548]	@ (8001e88 <HAL_GPIO_Init+0x234>)
 8001c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c66:	e194      	b.n	8001f92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8186 	beq.w	8001f8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d005      	beq.n	8001c98 <HAL_GPIO_Init+0x44>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d130      	bne.n	8001cfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cce:	2201      	movs	r2, #1
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 0201 	and.w	r2, r3, #1
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d017      	beq.n	8001d36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d123      	bne.n	8001d8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	69b9      	ldr	r1, [r7, #24]
 8001d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0203 	and.w	r2, r3, #3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80e0 	beq.w	8001f8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e8c <HAL_GPIO_Init+0x238>)
 8001dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e8c <HAL_GPIO_Init+0x238>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_GPIO_Init+0x238>)
 8001dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a29      	ldr	r2, [pc, #164]	@ (8001e90 <HAL_GPIO_Init+0x23c>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a20      	ldr	r2, [pc, #128]	@ (8001e94 <HAL_GPIO_Init+0x240>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d052      	beq.n	8001ebc <HAL_GPIO_Init+0x268>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	@ (8001e98 <HAL_GPIO_Init+0x244>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d031      	beq.n	8001e82 <HAL_GPIO_Init+0x22e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_GPIO_Init+0x248>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_GPIO_Init+0x22a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea0 <HAL_GPIO_Init+0x24c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea4 <HAL_GPIO_Init+0x250>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <HAL_GPIO_Init+0x254>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1a      	ldr	r2, [pc, #104]	@ (8001eac <HAL_GPIO_Init+0x258>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_GPIO_Init+0x25c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a18      	ldr	r2, [pc, #96]	@ (8001eb4 <HAL_GPIO_Init+0x260>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <HAL_GPIO_Init+0x264>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e5e:	2309      	movs	r3, #9
 8001e60:	e02d      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e62:	230a      	movs	r3, #10
 8001e64:	e02b      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e66:	2308      	movs	r3, #8
 8001e68:	e029      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e027      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e6e:	2306      	movs	r3, #6
 8001e70:	e025      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e72:	2305      	movs	r3, #5
 8001e74:	e023      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e021      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e01f      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e01d      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e01b      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e86:	bf00      	nop
 8001e88:	58000080 	.word	0x58000080
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58000400 	.word	0x58000400
 8001e94:	58020000 	.word	0x58020000
 8001e98:	58020400 	.word	0x58020400
 8001e9c:	58020800 	.word	0x58020800
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	58021000 	.word	0x58021000
 8001ea8:	58021400 	.word	0x58021400
 8001eac:	58021800 	.word	0x58021800
 8001eb0:	58021c00 	.word	0x58021c00
 8001eb4:	58022000 	.word	0x58022000
 8001eb8:	58022400 	.word	0x58022400
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	f002 0203 	and.w	r2, r2, #3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4093      	lsls	r3, r2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ece:	4938      	ldr	r1, [pc, #224]	@ (8001fb0 <HAL_GPIO_Init+0x35c>)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f47f ae63 	bne.w	8001c68 <HAL_GPIO_Init+0x14>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3724      	adds	r7, #36	@ 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	58000400 	.word	0x58000400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af02      	add	r7, sp, #8
 8001fec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0fe      	b.n	80021f6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe fed5 	bl	8000dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2203      	movs	r2, #3
 8002016:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f004 f8bc 	bl	800619c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7c1a      	ldrb	r2, [r3, #16]
 800202c:	f88d 2000 	strb.w	r2, [sp]
 8002030:	3304      	adds	r3, #4
 8002032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002034:	f004 f840 	bl	80060b8 <USB_CoreInit>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0d5      	b.n	80021f6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f004 f8b4 	bl	80061be <USB_SetCurrentMode>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0c6      	b.n	80021f6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e04a      	b.n	8002104 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3315      	adds	r3, #21
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3314      	adds	r3, #20
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	b298      	uxth	r0, r3
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	332e      	adds	r3, #46	@ 0x2e
 80020aa:	4602      	mov	r2, r0
 80020ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3318      	adds	r3, #24
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	331c      	adds	r3, #28
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3320      	adds	r3, #32
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3324      	adds	r3, #36	@ 0x24
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	3301      	adds	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	791b      	ldrb	r3, [r3, #4]
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3af      	bcc.n	800206e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e044      	b.n	800219e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	3301      	adds	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	791b      	ldrb	r3, [r3, #4]
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3b5      	bcc.n	8002114 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7c1a      	ldrb	r2, [r3, #16]
 80021b0:	f88d 2000 	strb.w	r2, [sp]
 80021b4:	3304      	adds	r3, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	f004 f84e 	bl	8006258 <USB_DevInit>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e013      	b.n	80021f6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7b1b      	ldrb	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d102      	bne.n	80021ea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f80b 	bl	8002200 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fa09 	bl	8006606 <USB_DevDisconnect>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_PCDEx_ActivateLPM+0x44>)
 8002230:	4313      	orrs	r3, r2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	10000003 	.word	0x10000003

08002248 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002250:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d00a      	beq.n	8002272 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e01f      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e01d      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002272:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	490f      	ldr	r1, [pc, #60]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4313      	orrs	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002282:	f7fe ff7f 	bl	8001184 <HAL_GetTick>
 8002286:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002288:	e009      	b.n	800229e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800228a:	f7fe ff7b 	bl	8001184 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002298:	d901      	bls.n	800229e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e007      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022aa:	d1ee      	bne.n	800228a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	58024800 	.word	0x58024800

080022bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	58024800 	.word	0x58024800

080022dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	@ 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f000 bc48 	b.w	8002b80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8088 	beq.w	800240e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fe:	4b99      	ldr	r3, [pc, #612]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002308:	4b96      	ldr	r3, [pc, #600]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800230e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002310:	2b10      	cmp	r3, #16
 8002312:	d007      	beq.n	8002324 <HAL_RCC_OscConfig+0x48>
 8002314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002316:	2b18      	cmp	r3, #24
 8002318:	d111      	bne.n	800233e <HAL_RCC_OscConfig+0x62>
 800231a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b8f      	ldr	r3, [pc, #572]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d06d      	beq.n	800240c <HAL_RCC_OscConfig+0x130>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d169      	bne.n	800240c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f000 bc21 	b.w	8002b80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x7a>
 8002348:	4b86      	ldr	r3, [pc, #536]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a85      	ldr	r2, [pc, #532]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	e02e      	b.n	80023b4 <HAL_RCC_OscConfig+0xd8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x9c>
 800235e:	4b81      	ldr	r3, [pc, #516]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a80      	ldr	r2, [pc, #512]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b7e      	ldr	r3, [pc, #504]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7d      	ldr	r2, [pc, #500]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e01d      	b.n	80023b4 <HAL_RCC_OscConfig+0xd8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0xc0>
 8002382:	4b78      	ldr	r3, [pc, #480]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a77      	ldr	r2, [pc, #476]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b75      	ldr	r3, [pc, #468]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a74      	ldr	r2, [pc, #464]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0xd8>
 800239c:	4b71      	ldr	r3, [pc, #452]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a70      	ldr	r2, [pc, #448]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fee2 	bl	8001184 <HAL_GetTick>
 80023c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe fede 	bl	8001184 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e3d4      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d6:	4b63      	ldr	r3, [pc, #396]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe8>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe fece 	bl	8001184 <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe feca 	bl	8001184 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	@ 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e3c0      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023fe:	4b59      	ldr	r3, [pc, #356]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x110>
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80ca 	beq.w	80025b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800241c:	4b51      	ldr	r3, [pc, #324]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002424:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002426:	4b4f      	ldr	r3, [pc, #316]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_RCC_OscConfig+0x166>
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	2b18      	cmp	r3, #24
 8002436:	d156      	bne.n	80024e6 <HAL_RCC_OscConfig+0x20a>
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d151      	bne.n	80024e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002442:	4b48      	ldr	r3, [pc, #288]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x17e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e392      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800245a:	4b42      	ldr	r3, [pc, #264]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0219 	bic.w	r2, r3, #25
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	493f      	ldr	r1, [pc, #252]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fe8a 	bl	8001184 <HAL_GetTick>
 8002470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002474:	f7fe fe86 	bl	8001184 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e37c      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002486:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	f7fe fea7 	bl	80011e4 <HAL_GetREVID>
 8002496:	4603      	mov	r3, r0
 8002498:	f241 0203 	movw	r2, #4099	@ 0x1003
 800249c:	4293      	cmp	r3, r2
 800249e:	d817      	bhi.n	80024d0 <HAL_RCC_OscConfig+0x1f4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b40      	cmp	r3, #64	@ 0x40
 80024a6:	d108      	bne.n	80024ba <HAL_RCC_OscConfig+0x1de>
 80024a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b8:	e07a      	b.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	4926      	ldr	r1, [pc, #152]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ce:	e06f      	b.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	4921      	ldr	r1, [pc, #132]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	e064      	b.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d047      	beq.n	800257e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0219 	bic.w	r2, r3, #25
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	491a      	ldr	r1, [pc, #104]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fe40 	bl	8001184 <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002508:	f7fe fe3c 	bl	8001184 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e332      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251a:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	f7fe fe5d 	bl	80011e4 <HAL_GetREVID>
 800252a:	4603      	mov	r3, r0
 800252c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002530:	4293      	cmp	r3, r2
 8002532:	d819      	bhi.n	8002568 <HAL_RCC_OscConfig+0x28c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b40      	cmp	r3, #64	@ 0x40
 800253a:	d108      	bne.n	800254e <HAL_RCC_OscConfig+0x272>
 800253c:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002544:	4a07      	ldr	r2, [pc, #28]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800254a:	6053      	str	r3, [r2, #4]
 800254c:	e030      	b.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
 800254e:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	031b      	lsls	r3, r3, #12
 800255c:	4901      	ldr	r1, [pc, #4]	@ (8002564 <HAL_RCC_OscConfig+0x288>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
 8002562:	e025      	b.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
 8002564:	58024400 	.word	0x58024400
 8002568:	4b9a      	ldr	r3, [pc, #616]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4997      	ldr	r1, [pc, #604]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
 800257c:	e018      	b.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	4b95      	ldr	r3, [pc, #596]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a94      	ldr	r2, [pc, #592]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fdfb 	bl	8001184 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fdf7 	bl	8001184 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e2ed      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a4:	4b8b      	ldr	r3, [pc, #556]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a9 	beq.w	8002710 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025be:	4b85      	ldr	r3, [pc, #532]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025c8:	4b82      	ldr	r3, [pc, #520]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d007      	beq.n	80025e4 <HAL_RCC_OscConfig+0x308>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b18      	cmp	r3, #24
 80025d8:	d13a      	bne.n	8002650 <HAL_RCC_OscConfig+0x374>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d135      	bne.n	8002650 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e4:	4b7b      	ldr	r3, [pc, #492]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_OscConfig+0x320>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b80      	cmp	r3, #128	@ 0x80
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e2c1      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025fc:	f7fe fdf2 	bl	80011e4 <HAL_GetREVID>
 8002600:	4603      	mov	r3, r0
 8002602:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002606:	4293      	cmp	r3, r2
 8002608:	d817      	bhi.n	800263a <HAL_RCC_OscConfig+0x35e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	2b20      	cmp	r3, #32
 8002610:	d108      	bne.n	8002624 <HAL_RCC_OscConfig+0x348>
 8002612:	4b70      	ldr	r3, [pc, #448]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800261a:	4a6e      	ldr	r2, [pc, #440]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002620:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002622:	e075      	b.n	8002710 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002624:	4b6b      	ldr	r3, [pc, #428]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	4968      	ldr	r1, [pc, #416]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002638:	e06a      	b.n	8002710 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800263a:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	4962      	ldr	r1, [pc, #392]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800264e:	e05f      	b.n	8002710 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d042      	beq.n	80026de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002658:	4b5e      	ldr	r3, [pc, #376]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5d      	ldr	r2, [pc, #372]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800265e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fd8e 	bl	8001184 <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800266c:	f7fe fd8a 	bl	8001184 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e280      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800267e:	4b55      	ldr	r3, [pc, #340]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268a:	f7fe fdab 	bl	80011e4 <HAL_GetREVID>
 800268e:	4603      	mov	r3, r0
 8002690:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002694:	4293      	cmp	r3, r2
 8002696:	d817      	bhi.n	80026c8 <HAL_RCC_OscConfig+0x3ec>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	2b20      	cmp	r3, #32
 800269e:	d108      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3d6>
 80026a0:	4b4c      	ldr	r3, [pc, #304]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026a8:	4a4a      	ldr	r2, [pc, #296]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026ae:	6053      	str	r3, [r2, #4]
 80026b0:	e02e      	b.n	8002710 <HAL_RCC_OscConfig+0x434>
 80026b2:	4b48      	ldr	r3, [pc, #288]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	069b      	lsls	r3, r3, #26
 80026c0:	4944      	ldr	r1, [pc, #272]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
 80026c6:	e023      	b.n	8002710 <HAL_RCC_OscConfig+0x434>
 80026c8:	4b42      	ldr	r3, [pc, #264]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	493f      	ldr	r1, [pc, #252]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	60cb      	str	r3, [r1, #12]
 80026dc:	e018      	b.n	8002710 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026de:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fd4b 	bl	8001184 <HAL_GetTick>
 80026ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026f2:	f7fe fd47 	bl	8001184 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e23d      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002704:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d036      	beq.n	800278a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002728:	4a2a      	ldr	r2, [pc, #168]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fd28 	bl	8001184 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fd24 	bl	8001184 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e21a      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800274a:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x45c>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800275a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275c:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fd0e 	bl	8001184 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276c:	f7fe fd0a 	bl	8001184 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e200      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 8002780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d039      	beq.n	800280a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800279e:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a0c      	ldr	r2, [pc, #48]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027aa:	f7fe fceb 	bl	8001184 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b2:	f7fe fce7 	bl	8001184 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1dd      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4d6>
 80027d0:	e01b      	b.n	800280a <HAL_RCC_OscConfig+0x52e>
 80027d2:	bf00      	nop
 80027d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a9a      	ldr	r2, [pc, #616]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80027de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027e4:	f7fe fcce 	bl	8001184 <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ec:	f7fe fcca 	bl	8001184 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1c0      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027fe:	4b92      	ldr	r3, [pc, #584]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8081 	beq.w	800291a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002818:	4b8c      	ldr	r3, [pc, #560]	@ (8002a4c <HAL_RCC_OscConfig+0x770>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8b      	ldr	r2, [pc, #556]	@ (8002a4c <HAL_RCC_OscConfig+0x770>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002822:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002824:	f7fe fcae 	bl	8001184 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282c:	f7fe fcaa 	bl	8001184 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	@ 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e1a0      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283e:	4b83      	ldr	r3, [pc, #524]	@ (8002a4c <HAL_RCC_OscConfig+0x770>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x584>
 8002852:	4b7d      	ldr	r3, [pc, #500]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	4a7c      	ldr	r2, [pc, #496]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	@ 0x70
 800285e:	e02d      	b.n	80028bc <HAL_RCC_OscConfig+0x5e0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x5a6>
 8002868:	4b77      	ldr	r3, [pc, #476]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a76      	ldr	r2, [pc, #472]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
 8002874:	4b74      	ldr	r3, [pc, #464]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a73      	ldr	r2, [pc, #460]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x5e0>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c8>
 800288a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6713      	str	r3, [r2, #112]	@ 0x70
 8002896:	4b6c      	ldr	r3, [pc, #432]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0x5e0>
 80028a4:	4b68      	ldr	r3, [pc, #416]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a67      	ldr	r2, [pc, #412]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b0:	4b65      	ldr	r3, [pc, #404]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a64      	ldr	r2, [pc, #400]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fc5e 	bl	8001184 <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7fe fc5a 	bl	8001184 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e14e      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028e2:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ee      	beq.n	80028cc <HAL_RCC_OscConfig+0x5f0>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe fc48 	bl	8001184 <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fc44 	bl	8001184 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e138      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800290e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ee      	bne.n	80028f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 812d 	beq.w	8002b7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002924:	4b48      	ldr	r3, [pc, #288]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800292c:	2b18      	cmp	r3, #24
 800292e:	f000 80bd 	beq.w	8002aac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 809e 	bne.w	8002a78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b42      	ldr	r3, [pc, #264]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a41      	ldr	r2, [pc, #260]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fc1c 	bl	8001184 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fc18 	bl	8001184 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e10e      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002962:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296e:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002972:	4b37      	ldr	r3, [pc, #220]	@ (8002a50 <HAL_RCC_OscConfig+0x774>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	430a      	orrs	r2, r1
 8002982:	4931      	ldr	r1, [pc, #196]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002984:	4313      	orrs	r3, r2
 8002986:	628b      	str	r3, [r1, #40]	@ 0x28
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	3b01      	subs	r3, #1
 800298e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002996:	3b01      	subs	r3, #1
 8002998:	025b      	lsls	r3, r3, #9
 800299a:	b29b      	uxth	r3, r3
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	3b01      	subs	r3, #1
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	3b01      	subs	r3, #1
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029b8:	4923      	ldr	r1, [pc, #140]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029be:	4b22      	ldr	r3, [pc, #136]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ce:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <HAL_RCC_OscConfig+0x778>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029d6:	00d2      	lsls	r2, r2, #3
 80029d8:	491b      	ldr	r1, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	f023 020c 	bic.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4917      	ldr	r1, [pc, #92]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029f0:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	f023 0202 	bic.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	4912      	ldr	r1, [pc, #72]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a02:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	4a10      	ldr	r2, [pc, #64]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	4a07      	ldr	r2, [pc, #28]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fba1 	bl	8001184 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a44:	e011      	b.n	8002a6a <HAL_RCC_OscConfig+0x78e>
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	58024800 	.word	0x58024800
 8002a50:	fffffc0c 	.word	0xfffffc0c
 8002a54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fb94 	bl	8001184 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e08a      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x77c>
 8002a76:	e082      	b.n	8002b7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b43      	ldr	r3, [pc, #268]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a42      	ldr	r2, [pc, #264]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fb7e 	bl	8001184 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fb7a 	bl	8001184 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e070      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x7b0>
 8002aaa:	e068      	b.n	8002b7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002aac:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ab2:	4b35      	ldr	r3, [pc, #212]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d031      	beq.n	8002b24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d12a      	bne.n	8002b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d122      	bne.n	8002b24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11a      	bne.n	8002b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0a5b      	lsrs	r3, r3, #9
 8002af2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d111      	bne.n	8002b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	0e1b      	lsrs	r3, r3, #24
 8002b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e02b      	b.n	8002b80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d01f      	beq.n	8002b7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	4a11      	ldr	r2, [pc, #68]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b4a:	f7fe fb1b 	bl	8001184 <HAL_GetTick>
 8002b4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b50:	bf00      	nop
 8002b52:	f7fe fb17 	bl	8001184 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d0f9      	beq.n	8002b52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_RCC_OscConfig+0x8b0>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b6a:	00d2      	lsls	r2, r2, #3
 8002b6c:	4906      	ldr	r1, [pc, #24]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <HAL_RCC_OscConfig+0x8ac>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3730      	adds	r7, #48	@ 0x30
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	ffff0007 	.word	0xffff0007

08002b90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e19c      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d910      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b87      	ldr	r3, [pc, #540]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 020f 	bic.w	r2, r3, #15
 8002bba:	4985      	ldr	r1, [pc, #532]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b83      	ldr	r3, [pc, #524]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e184      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	4b7b      	ldr	r3, [pc, #492]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d908      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bf0:	4b78      	ldr	r3, [pc, #480]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	4975      	ldr	r1, [pc, #468]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	4b70      	ldr	r3, [pc, #448]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d908      	bls.n	8002c30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	496a      	ldr	r1, [pc, #424]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	4b64      	ldr	r3, [pc, #400]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d908      	bls.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c4c:	4b61      	ldr	r3, [pc, #388]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	495e      	ldr	r1, [pc, #376]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	4b59      	ldr	r3, [pc, #356]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d908      	bls.n	8002c8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c7a:	4b56      	ldr	r3, [pc, #344]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4953      	ldr	r1, [pc, #332]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d908      	bls.n	8002cba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f023 020f 	bic.w	r2, r3, #15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4947      	ldr	r1, [pc, #284]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d055      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cc6:	4b43      	ldr	r3, [pc, #268]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4940      	ldr	r1, [pc, #256]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d121      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0f6      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf8:	4b36      	ldr	r3, [pc, #216]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d115      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0ea      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d10:	4b30      	ldr	r3, [pc, #192]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0de      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d20:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0d6      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d30:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f023 0207 	bic.w	r2, r3, #7
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4925      	ldr	r1, [pc, #148]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d42:	f7fe fa1f 	bl	8001184 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4a:	f7fe fa1b 	bl	8001184 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0be      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d60:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d1eb      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d208      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8e:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f023 020f 	bic.w	r2, r3, #15
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	490e      	ldr	r1, [pc, #56]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d214      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 020f 	bic.w	r2, r3, #15
 8002db6:	4906      	ldr	r1, [pc, #24]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e086      	b.n	8002ede <HAL_RCC_ClockConfig+0x34e>
 8002dd0:	52002000 	.word	0x52002000
 8002dd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d208      	bcs.n	8002e06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002df4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4939      	ldr	r1, [pc, #228]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d208      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e22:	4b31      	ldr	r3, [pc, #196]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	492e      	ldr	r1, [pc, #184]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d208      	bcs.n	8002e62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e50:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4922      	ldr	r1, [pc, #136]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d208      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4917      	ldr	r1, [pc, #92]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e90:	f000 f834 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	4912      	ldr	r1, [pc, #72]	@ (8002eec <HAL_RCC_ClockConfig+0x35c>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002eec <HAL_RCC_ClockConfig+0x35c>)
 8002eb8:	5cd3      	ldrb	r3, [r2, r3]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef0 <HAL_RCC_ClockConfig+0x360>)
 8002ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <HAL_RCC_ClockConfig+0x364>)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_RCC_ClockConfig+0x368>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe f90c 	bl	80010f0 <HAL_InitTick>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	58024400 	.word	0x58024400
 8002eec:	08006738 	.word	0x08006738
 8002ef0:	24000004 	.word	0x24000004
 8002ef4:	24000000 	.word	0x24000000
 8002ef8:	24000008 	.word	0x24000008

08002efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f02:	4bb3      	ldr	r3, [pc, #716]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f0a:	2b18      	cmp	r3, #24
 8002f0c:	f200 8155 	bhi.w	80031ba <HAL_RCC_GetSysClockFreq+0x2be>
 8002f10:	a201      	add	r2, pc, #4	@ (adr r2, 8002f18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f7d 	.word	0x08002f7d
 8002f1c:	080031bb 	.word	0x080031bb
 8002f20:	080031bb 	.word	0x080031bb
 8002f24:	080031bb 	.word	0x080031bb
 8002f28:	080031bb 	.word	0x080031bb
 8002f2c:	080031bb 	.word	0x080031bb
 8002f30:	080031bb 	.word	0x080031bb
 8002f34:	080031bb 	.word	0x080031bb
 8002f38:	08002fa3 	.word	0x08002fa3
 8002f3c:	080031bb 	.word	0x080031bb
 8002f40:	080031bb 	.word	0x080031bb
 8002f44:	080031bb 	.word	0x080031bb
 8002f48:	080031bb 	.word	0x080031bb
 8002f4c:	080031bb 	.word	0x080031bb
 8002f50:	080031bb 	.word	0x080031bb
 8002f54:	080031bb 	.word	0x080031bb
 8002f58:	08002fa9 	.word	0x08002fa9
 8002f5c:	080031bb 	.word	0x080031bb
 8002f60:	080031bb 	.word	0x080031bb
 8002f64:	080031bb 	.word	0x080031bb
 8002f68:	080031bb 	.word	0x080031bb
 8002f6c:	080031bb 	.word	0x080031bb
 8002f70:	080031bb 	.word	0x080031bb
 8002f74:	080031bb 	.word	0x080031bb
 8002f78:	08002faf 	.word	0x08002faf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f7c:	4b94      	ldr	r3, [pc, #592]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d009      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f88:	4b91      	ldr	r3, [pc, #580]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	08db      	lsrs	r3, r3, #3
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	4a90      	ldr	r2, [pc, #576]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f9a:	e111      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f9c:	4b8d      	ldr	r3, [pc, #564]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f9e:	61bb      	str	r3, [r7, #24]
      break;
 8002fa0:	e10e      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fa4:	61bb      	str	r3, [r7, #24]
      break;
 8002fa6:	e10b      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002faa:	61bb      	str	r3, [r7, #24]
      break;
 8002fac:	e108      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fae:	4b88      	ldr	r3, [pc, #544]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fb8:	4b85      	ldr	r3, [pc, #532]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fc4:	4b82      	ldr	r3, [pc, #520]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fce:	4b80      	ldr	r3, [pc, #512]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd2:	08db      	lsrs	r3, r3, #3
 8002fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80e1 	beq.w	80031b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	f000 8083 	beq.w	8003100 <HAL_RCC_GetSysClockFreq+0x204>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	f200 80a1 	bhi.w	8003144 <HAL_RCC_GetSysClockFreq+0x248>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x114>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d056      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800300e:	e099      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003010:	4b6f      	ldr	r3, [pc, #444]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d02d      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800301c:	4b6c      	ldr	r3, [pc, #432]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	08db      	lsrs	r3, r3, #3
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	4a6b      	ldr	r2, [pc, #428]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003046:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003056:	ed97 6a02 	vldr	s12, [r7, #8]
 800305a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800305e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800306a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800306e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003072:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003076:	e087      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003082:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308a:	4b51      	ldr	r3, [pc, #324]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309a:	ed97 6a02 	vldr	s12, [r7, #8]
 800309e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ba:	e065      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ce:	4b40      	ldr	r3, [pc, #256]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030de:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030fe:	e043      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003112:	4b2f      	ldr	r3, [pc, #188]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003122:	ed97 6a02 	vldr	s12, [r7, #8]
 8003126:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003142:	e021      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003156:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003166:	ed97 6a02 	vldr	s12, [r7, #8]
 800316a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003186:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	0a5b      	lsrs	r3, r3, #9
 800318e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003192:	3301      	adds	r3, #1
 8003194:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ac:	ee17 3a90 	vmov	r3, s15
 80031b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031b2:	e005      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
      break;
 80031b8:	e002      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031ba:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031bc:	61bb      	str	r3, [r7, #24]
      break;
 80031be:	bf00      	nop
  }

  return sysclockfreq;
 80031c0:	69bb      	ldr	r3, [r7, #24]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	58024400 	.word	0x58024400
 80031d4:	03d09000 	.word	0x03d09000
 80031d8:	003d0900 	.word	0x003d0900
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	46000000 	.word	0x46000000
 80031e4:	4c742400 	.word	0x4c742400
 80031e8:	4a742400 	.word	0x4a742400
 80031ec:	4af42400 	.word	0x4af42400

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031f6:	f7ff fe81 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <HAL_RCC_GetHCLKFreq+0x50>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490f      	ldr	r1, [pc, #60]	@ (8003244 <HAL_RCC_GetHCLKFreq+0x54>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_RCC_GetHCLKFreq+0x50>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <HAL_RCC_GetHCLKFreq+0x54>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a07      	ldr	r2, [pc, #28]	@ (8003248 <HAL_RCC_GetHCLKFreq+0x58>)
 800322c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800322e:	4a07      	ldr	r2, [pc, #28]	@ (800324c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003234:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <HAL_RCC_GetHCLKFreq+0x58>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	58024400 	.word	0x58024400
 8003244:	08006738 	.word	0x08006738
 8003248:	24000004 	.word	0x24000004
 800324c:	24000000 	.word	0x24000000

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003254:	f7ff ffcc 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4904      	ldr	r1, [pc, #16]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	58024400 	.word	0x58024400
 8003278:	08006738 	.word	0x08006738

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003280:	f7ff ffb6 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4904      	ldr	r1, [pc, #16]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	58024400 	.word	0x58024400
 80032a4:	08006738 	.word	0x08006738

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b0ca      	sub	sp, #296	@ 0x128
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ba:	2300      	movs	r3, #0
 80032bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032cc:	2500      	movs	r5, #0
 80032ce:	ea54 0305 	orrs.w	r3, r4, r5
 80032d2:	d049      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032de:	d02f      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032e4:	d828      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ea:	d01a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f0:	d822      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032fa:	d007      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032fc:	e01c      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fe:	4bb8      	ldr	r3, [pc, #736]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	4ab7      	ldr	r2, [pc, #732]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003308:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800330a:	e01a      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003310:	3308      	adds	r3, #8
 8003312:	2102      	movs	r1, #2
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fc8f 	bl	8004c38 <RCCEx_PLL2_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003320:	e00f      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	3328      	adds	r3, #40	@ 0x28
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f001 fd36 	bl	8004d9c <RCCEx_PLL3_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003336:	e004      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800333e:	e000      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800334a:	4ba5      	ldr	r3, [pc, #660]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003358:	4aa1      	ldr	r2, [pc, #644]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335a:	430b      	orrs	r3, r1
 800335c:	6513      	str	r3, [r2, #80]	@ 0x50
 800335e:	e003      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003374:	f04f 0900 	mov.w	r9, #0
 8003378:	ea58 0309 	orrs.w	r3, r8, r9
 800337c:	d047      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	2b04      	cmp	r3, #4
 8003386:	d82a      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003388:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a5 	.word	0x080033a5
 8003394:	080033b3 	.word	0x080033b3
 8003398:	080033c9 	.word	0x080033c9
 800339c:	080033e7 	.word	0x080033e7
 80033a0:	080033e7 	.word	0x080033e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b8e      	ldr	r3, [pc, #568]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	4a8d      	ldr	r2, [pc, #564]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b0:	e01a      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b6:	3308      	adds	r3, #8
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fc3c 	bl	8004c38 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033c6:	e00f      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	3328      	adds	r3, #40	@ 0x28
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 fce3 	bl	8004d9c <RCCEx_PLL3_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033dc:	e004      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f0:	4b7b      	ldr	r3, [pc, #492]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f4:	f023 0107 	bic.w	r1, r3, #7
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	4a78      	ldr	r2, [pc, #480]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003400:	430b      	orrs	r3, r1
 8003402:	6513      	str	r3, [r2, #80]	@ 0x50
 8003404:	e003      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800341a:	f04f 0b00 	mov.w	fp, #0
 800341e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003422:	d04c      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342e:	d030      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003434:	d829      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003436:	2bc0      	cmp	r3, #192	@ 0xc0
 8003438:	d02d      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800343a:	2bc0      	cmp	r3, #192	@ 0xc0
 800343c:	d825      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800343e:	2b80      	cmp	r3, #128	@ 0x80
 8003440:	d018      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d821      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800344a:	2b40      	cmp	r3, #64	@ 0x40
 800344c:	d007      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800344e:	e01c      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003450:	4b63      	ldr	r3, [pc, #396]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	4a62      	ldr	r2, [pc, #392]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800345c:	e01c      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	3308      	adds	r3, #8
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f001 fbe6 	bl	8004c38 <RCCEx_PLL2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003472:	e011      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003478:	3328      	adds	r3, #40	@ 0x28
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f001 fc8d 	bl	8004d9c <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003488:	e006      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034a0:	4b4f      	ldr	r3, [pc, #316]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	4a4c      	ldr	r2, [pc, #304]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034b4:	e003      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80034d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80034d8:	460b      	mov	r3, r1
 80034da:	4313      	orrs	r3, r2
 80034dc:	d053      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ea:	d035      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034f0:	d82e      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034f6:	d031      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80034f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034fc:	d828      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003502:	d01a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003508:	d822      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800350e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003512:	d007      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003514:	e01c      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003516:	4b32      	ldr	r3, [pc, #200]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	4a31      	ldr	r2, [pc, #196]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003522:	e01c      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	3308      	adds	r3, #8
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fb83 	bl	8004c38 <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003538:	e011      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353e:	3328      	adds	r3, #40	@ 0x28
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fc2a 	bl	8004d9c <RCCEx_PLL3_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800354e:	e006      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003556:	e002      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003566:	4b1e      	ldr	r3, [pc, #120]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003576:	4a1a      	ldr	r2, [pc, #104]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6593      	str	r3, [r2, #88]	@ 0x58
 800357c:	e003      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003592:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800359c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80035a0:	460b      	mov	r3, r1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	d056      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035b2:	d038      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035b8:	d831      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035be:	d034      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035c4:	d82b      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035ca:	d01d      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035d0:	d825      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035dc:	e01f      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035de:	bf00      	nop
 80035e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e4:	4ba2      	ldr	r3, [pc, #648]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	4aa1      	ldr	r2, [pc, #644]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f0:	e01c      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f6:	3308      	adds	r3, #8
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fb1c 	bl	8004c38 <RCCEx_PLL2_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003606:	e011      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	3328      	adds	r3, #40	@ 0x28
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f001 fbc3 	bl	8004d9c <RCCEx_PLL3_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800361c:	e006      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003624:	e002      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800362a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003634:	4b8e      	ldr	r3, [pc, #568]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003638:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003640:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003644:	4a8a      	ldr	r2, [pc, #552]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003646:	430b      	orrs	r3, r1
 8003648:	6593      	str	r3, [r2, #88]	@ 0x58
 800364a:	e003      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800366a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800366e:	460b      	mov	r3, r1
 8003670:	4313      	orrs	r3, r2
 8003672:	d03a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	2b30      	cmp	r3, #48	@ 0x30
 800367c:	d01f      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800367e:	2b30      	cmp	r3, #48	@ 0x30
 8003680:	d819      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003682:	2b20      	cmp	r3, #32
 8003684:	d00c      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003686:	2b20      	cmp	r3, #32
 8003688:	d815      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d019      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800368e:	2b10      	cmp	r3, #16
 8003690:	d111      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003692:	4b77      	ldr	r3, [pc, #476]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	4a76      	ldr	r2, [pc, #472]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800369c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800369e:	e011      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	3308      	adds	r3, #8
 80036a6:	2102      	movs	r1, #2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fac5 	bl	8004c38 <RCCEx_PLL2_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036b4:	e006      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036bc:	e002      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036cc:	4b68      	ldr	r3, [pc, #416]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036da:	4a65      	ldr	r2, [pc, #404]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80036f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003700:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003704:	460b      	mov	r3, r1
 8003706:	4313      	orrs	r3, r2
 8003708:	d051      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003714:	d035      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003716:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800371a:	d82e      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800371c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003720:	d031      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003722:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003726:	d828      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372c:	d01a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003732:	d822      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373c:	d007      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800373e:	e01c      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003740:	4b4b      	ldr	r3, [pc, #300]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	4a4a      	ldr	r2, [pc, #296]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800374c:	e01c      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	3308      	adds	r3, #8
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fa6e 	bl	8004c38 <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003762:	e011      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	3328      	adds	r3, #40	@ 0x28
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fb15 	bl	8004d9c <RCCEx_PLL3_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003778:	e006      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003780:	e002      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003790:	4b37      	ldr	r3, [pc, #220]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003794:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	4a34      	ldr	r2, [pc, #208]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d056      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d8:	d033      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037de:	d82c      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037e4:	d02f      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037ea:	d826      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037f0:	d02b      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037f6:	d820      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037fc:	d012      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80037fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003802:	d81a      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d022      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380c:	d115      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	3308      	adds	r3, #8
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fa0e 	bl	8004c38 <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003822:	e015      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	3328      	adds	r3, #40	@ 0x28
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fab5 	bl	8004d9c <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003838:	e00a      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800384e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003866:	4a02      	ldr	r2, [pc, #8]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003868:	430b      	orrs	r3, r1
 800386a:	6513      	str	r3, [r2, #80]	@ 0x50
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800386e:	bf00      	nop
 8003870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003892:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d055      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038a8:	d033      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ae:	d82c      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b4:	d02f      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ba:	d826      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038c0:	d02b      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038c6:	d820      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038cc:	d012      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d2:	d81a      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d022      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038dc:	d115      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	3308      	adds	r3, #8
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f9a6 	bl	8004c38 <RCCEx_PLL2_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038f2:	e015      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f8:	3328      	adds	r3, #40	@ 0x28
 80038fa:	2101      	movs	r1, #1
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fa4d 	bl	8004d9c <RCCEx_PLL3_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003908:	e00a      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003912:	bf00      	nop
 8003914:	e004      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003916:	bf00      	nop
 8003918:	e002      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800391e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003928:	4ba3      	ldr	r3, [pc, #652]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003938:	4a9f      	ldr	r2, [pc, #636]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800393a:	430b      	orrs	r3, r1
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
 800393e:	e003      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003954:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800395e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003962:	460b      	mov	r3, r1
 8003964:	4313      	orrs	r3, r2
 8003966:	d037      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003972:	d00e      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003978:	d816      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d018      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800397e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003982:	d111      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b8c      	ldr	r3, [pc, #560]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	4a8b      	ldr	r2, [pc, #556]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003990:	e00f      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003996:	3308      	adds	r3, #8
 8003998:	2101      	movs	r1, #1
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f94c 	bl	8004c38 <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039a6:	e004      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ba:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c8:	4a7b      	ldr	r2, [pc, #492]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d039      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d81c      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a02:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a45 	.word	0x08003a45
 8003a0c:	08003a19 	.word	0x08003a19
 8003a10:	08003a27 	.word	0x08003a27
 8003a14:	08003a45 	.word	0x08003a45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a18:	4b67      	ldr	r3, [pc, #412]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	4a66      	ldr	r2, [pc, #408]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a24:	e00f      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 f902 	bl	8004c38 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a3a:	e004      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a42:	e000      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a52:	f023 0103 	bic.w	r1, r3, #3
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5c:	4a56      	ldr	r2, [pc, #344]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f000 809f 	beq.w	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a4a      	ldr	r2, [pc, #296]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a9a:	f7fd fb73 	bl	8001184 <HAL_GetTick>
 8003a9e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa2:	e00b      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa4:	f7fd fb6e 	bl	8001184 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b64      	cmp	r3, #100	@ 0x64
 8003ab2:	d903      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aba:	e005      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003abc:	4b3f      	ldr	r3, [pc, #252]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ed      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d179      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ad0:	4b39      	ldr	r3, [pc, #228]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003adc:	4053      	eors	r3, r2
 8003ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d015      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae6:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003af2:	4b31      	ldr	r3, [pc, #196]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	4a30      	ldr	r2, [pc, #192]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003afe:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b10:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b1e:	d118      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fb30 	bl	8001184 <HAL_GetTick>
 8003b24:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b28:	e00d      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fd fb2b 	bl	8001184 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b34:	1ad2      	subs	r2, r2, r3
 8003b36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d903      	bls.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b44:	e005      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b46:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0eb      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d129      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b6a:	d10e      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b6c:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b7c:	091a      	lsrs	r2, r3, #4
 8003b7e:	4b10      	ldr	r3, [pc, #64]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6113      	str	r3, [r2, #16]
 8003b88:	e005      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b94:	6113      	str	r3, [r2, #16]
 8003b96:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b98:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba6:	4a04      	ldr	r2, [pc, #16]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bac:	e00e      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003bb6:	e009      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bb8:	58024400 	.word	0x58024400
 8003bbc:	58024800 	.word	0x58024800
 8003bc0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f002 0301 	and.w	r3, r2, #1
 8003bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003be2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f000 8089 	beq.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bf4:	2b28      	cmp	r3, #40	@ 0x28
 8003bf6:	d86b      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003cd9 	.word	0x08003cd9
 8003c04:	08003cd1 	.word	0x08003cd1
 8003c08:	08003cd1 	.word	0x08003cd1
 8003c0c:	08003cd1 	.word	0x08003cd1
 8003c10:	08003cd1 	.word	0x08003cd1
 8003c14:	08003cd1 	.word	0x08003cd1
 8003c18:	08003cd1 	.word	0x08003cd1
 8003c1c:	08003cd1 	.word	0x08003cd1
 8003c20:	08003ca5 	.word	0x08003ca5
 8003c24:	08003cd1 	.word	0x08003cd1
 8003c28:	08003cd1 	.word	0x08003cd1
 8003c2c:	08003cd1 	.word	0x08003cd1
 8003c30:	08003cd1 	.word	0x08003cd1
 8003c34:	08003cd1 	.word	0x08003cd1
 8003c38:	08003cd1 	.word	0x08003cd1
 8003c3c:	08003cd1 	.word	0x08003cd1
 8003c40:	08003cbb 	.word	0x08003cbb
 8003c44:	08003cd1 	.word	0x08003cd1
 8003c48:	08003cd1 	.word	0x08003cd1
 8003c4c:	08003cd1 	.word	0x08003cd1
 8003c50:	08003cd1 	.word	0x08003cd1
 8003c54:	08003cd1 	.word	0x08003cd1
 8003c58:	08003cd1 	.word	0x08003cd1
 8003c5c:	08003cd1 	.word	0x08003cd1
 8003c60:	08003cd9 	.word	0x08003cd9
 8003c64:	08003cd1 	.word	0x08003cd1
 8003c68:	08003cd1 	.word	0x08003cd1
 8003c6c:	08003cd1 	.word	0x08003cd1
 8003c70:	08003cd1 	.word	0x08003cd1
 8003c74:	08003cd1 	.word	0x08003cd1
 8003c78:	08003cd1 	.word	0x08003cd1
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003cd1 	.word	0x08003cd1
 8003c88:	08003cd1 	.word	0x08003cd1
 8003c8c:	08003cd1 	.word	0x08003cd1
 8003c90:	08003cd1 	.word	0x08003cd1
 8003c94:	08003cd1 	.word	0x08003cd1
 8003c98:	08003cd1 	.word	0x08003cd1
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003cd9 	.word	0x08003cd9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	3308      	adds	r3, #8
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 ffc3 	bl	8004c38 <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e00f      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	3328      	adds	r3, #40	@ 0x28
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 f86a 	bl	8004d9c <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cce:	e004      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd6:	e000      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ce2:	4bbf      	ldr	r3, [pc, #764]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cf0:	4abb      	ldr	r2, [pc, #748]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f002 0302 	and.w	r3, r2, #2
 8003d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d041      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d824      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d7d 	.word	0x08003d7d
 8003d34:	08003d49 	.word	0x08003d49
 8003d38:	08003d5f 	.word	0x08003d5f
 8003d3c:	08003d7d 	.word	0x08003d7d
 8003d40:	08003d7d 	.word	0x08003d7d
 8003d44:	08003d7d 	.word	0x08003d7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 ff71 	bl	8004c38 <RCCEx_PLL2_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d5c:	e00f      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	3328      	adds	r3, #40	@ 0x28
 8003d64:	2101      	movs	r1, #1
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f818 	bl	8004d9c <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d72:	e004      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d86:	4b96      	ldr	r3, [pc, #600]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8a:	f023 0107 	bic.w	r1, r3, #7
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d94:	4a92      	ldr	r2, [pc, #584]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f002 0304 	and.w	r3, r2, #4
 8003db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	d044      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d825      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003e25 	.word	0x08003e25
 8003ddc:	08003df1 	.word	0x08003df1
 8003de0:	08003e07 	.word	0x08003e07
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e25 	.word	0x08003e25
 8003dec:	08003e25 	.word	0x08003e25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df4:	3308      	adds	r3, #8
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 ff1d 	bl	8004c38 <RCCEx_PLL2_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e04:	e00f      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	3328      	adds	r3, #40	@ 0x28
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 ffc4 	bl	8004d9c <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e1a:	e004      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e22:	e000      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f023 0107 	bic.w	r1, r3, #7
 8003e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3e:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f002 0320 	and.w	r3, r2, #32
 8003e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d055      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e7a:	d033      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e80:	d82c      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e86:	d02f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8c:	d826      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e92:	d02b      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e98:	d820      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e9e:	d012      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ea4:	d81a      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d022      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eae:	d115      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 febd 	bl	8004c38 <RCCEx_PLL2_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	3328      	adds	r3, #40	@ 0x28
 8003ecc:	2102      	movs	r1, #2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 ff64 	bl	8004d9c <RCCEx_PLL3_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ee2:	e006      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ee4:	bf00      	nop
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ee8:	bf00      	nop
 8003eea:	e002      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003eec:	bf00      	nop
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	4b39      	ldr	r3, [pc, #228]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	4a35      	ldr	r2, [pc, #212]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4313      	orrs	r3, r2
 8003f38:	d058      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f46:	d033      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f4c:	d82c      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	d02f      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f58:	d826      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f5e:	d02b      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f64:	d820      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f6a:	d012      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f70:	d81a      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d022      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7a:	d115      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	3308      	adds	r3, #8
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fe57 	bl	8004c38 <RCCEx_PLL2_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f90:	e015      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	3328      	adds	r3, #40	@ 0x28
 8003f98:	2102      	movs	r1, #2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fefe 	bl	8004d9c <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fae:	e006      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e004      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fb4:	bf00      	nop
 8003fb6:	e002      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fb8:	bf00      	nop
 8003fba:	e000      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd6:	4a02      	ldr	r2, [pc, #8]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fde:	bf00      	nop
 8003fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004002:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004006:	460b      	mov	r3, r1
 8004008:	4313      	orrs	r3, r2
 800400a:	d055      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004014:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004018:	d033      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800401a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800401e:	d82c      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004024:	d02f      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402a:	d826      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800402c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004030:	d02b      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004032:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004036:	d820      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800403c:	d012      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800403e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004042:	d81a      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d022      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404c:	d115      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004052:	3308      	adds	r3, #8
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fdee 	bl	8004c38 <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004062:	e015      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	3328      	adds	r3, #40	@ 0x28
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fe95 	bl	8004d9c <RCCEx_PLL3_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004078:	e00a      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004082:	bf00      	nop
 8004084:	e004      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004086:	bf00      	nop
 8004088:	e002      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800408e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004098:	4ba1      	ldr	r3, [pc, #644]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040a8:	4a9d      	ldr	r2, [pc, #628]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ae:	e003      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 0308 	and.w	r3, r2, #8
 80040c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d01e      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	3328      	adds	r3, #40	@ 0x28
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fe54 	bl	8004d9c <RCCEx_PLL3_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004100:	4b87      	ldr	r3, [pc, #540]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004104:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004110:	4a83      	ldr	r2, [pc, #524]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004112:	430b      	orrs	r3, r1
 8004114:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f002 0310 	and.w	r3, r2, #16
 8004122:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800412c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004130:	460b      	mov	r3, r1
 8004132:	4313      	orrs	r3, r2
 8004134:	d01e      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800413e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004142:	d10c      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	3328      	adds	r3, #40	@ 0x28
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fe25 	bl	8004d9c <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800415e:	4b70      	ldr	r3, [pc, #448]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800416e:	4a6c      	ldr	r2, [pc, #432]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004170:	430b      	orrs	r3, r1
 8004172:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800418a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800418e:	460b      	mov	r3, r1
 8004190:	4313      	orrs	r3, r2
 8004192:	d03e      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800419c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041a0:	d022      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041a6:	d81b      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b0:	d00b      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041b2:	e015      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd3b 	bl	8004c38 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2102      	movs	r1, #2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fde2 	bl	8004d9c <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004202:	4a47      	ldr	r2, [pc, #284]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6593      	str	r3, [r2, #88]	@ 0x58
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800421e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004220:	2300      	movs	r3, #0
 8004222:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004224:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004228:	460b      	mov	r3, r1
 800422a:	4313      	orrs	r3, r2
 800422c:	d03b      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800423a:	d01f      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800423c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004240:	d818      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004246:	d003      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004248:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800424c:	d007      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800424e:	e011      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004250:	4b33      	ldr	r3, [pc, #204]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	4a32      	ldr	r2, [pc, #200]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800425a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800425c:	e00f      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004262:	3328      	adds	r3, #40	@ 0x28
 8004264:	2101      	movs	r1, #1
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fd98 	bl	8004d9c <RCCEx_PLL3_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004272:	e004      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800427c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004286:	4b26      	ldr	r3, [pc, #152]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	4a22      	ldr	r2, [pc, #136]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6553      	str	r3, [r2, #84]	@ 0x54
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80042b4:	2300      	movs	r3, #0
 80042b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80042b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80042bc:	460b      	mov	r3, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	d034      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d0:	d007      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042d2:	e011      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d4:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	4a11      	ldr	r2, [pc, #68]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042e0:	e00e      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	3308      	adds	r3, #8
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fca4 	bl	8004c38 <RCCEx_PLL2_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042f6:	e003      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10d      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800430a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004316:	4a02      	ldr	r2, [pc, #8]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004318:	430b      	orrs	r3, r1
 800431a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800431c:	e006      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800431e:	bf00      	nop
 8004320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800433a:	2300      	movs	r3, #0
 800433c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800433e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	d00c      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	3328      	adds	r3, #40	@ 0x28
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fd23 	bl	8004d9c <RCCEx_PLL3_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800436e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004370:	2300      	movs	r3, #0
 8004372:	667b      	str	r3, [r7, #100]	@ 0x64
 8004374:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004378:	460b      	mov	r3, r1
 800437a:	4313      	orrs	r3, r2
 800437c:	d038      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800438a:	d018      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800438c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004390:	d811      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004396:	d014      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800439c:	d80b      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a6:	d106      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a8:	4bc3      	ldr	r3, [pc, #780]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	4ac2      	ldr	r2, [pc, #776]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043bc:	e004      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d0:	4bb9      	ldr	r3, [pc, #740]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e0:	4ab5      	ldr	r2, [pc, #724]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043e6:	e003      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043fe:	2300      	movs	r3, #0
 8004400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004402:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004406:	460b      	mov	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800440c:	4baa      	ldr	r3, [pc, #680]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004410:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441a:	4aa7      	ldr	r2, [pc, #668]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800442c:	653b      	str	r3, [r7, #80]	@ 0x50
 800442e:	2300      	movs	r3, #0
 8004430:	657b      	str	r3, [r7, #84]	@ 0x54
 8004432:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800443c:	4b9e      	ldr	r3, [pc, #632]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800444c:	4a9a      	ldr	r2, [pc, #616]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444e:	430b      	orrs	r3, r1
 8004450:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004460:	2300      	movs	r3, #0
 8004462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004464:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004468:	460b      	mov	r3, r1
 800446a:	4313      	orrs	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800446e:	4b92      	ldr	r3, [pc, #584]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004472:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800447c:	4a8e      	ldr	r2, [pc, #568]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447e:	430b      	orrs	r3, r1
 8004480:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800448e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004490:	2300      	movs	r3, #0
 8004492:	647b      	str	r3, [r7, #68]	@ 0x44
 8004494:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004498:	460b      	mov	r3, r1
 800449a:	4313      	orrs	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800449e:	4b86      	ldr	r3, [pc, #536]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	4a85      	ldr	r2, [pc, #532]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044a8:	6113      	str	r3, [r2, #16]
 80044aa:	4b83      	ldr	r3, [pc, #524]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ac:	6919      	ldr	r1, [r3, #16]
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044b6:	4a80      	ldr	r2, [pc, #512]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044ca:	2300      	movs	r3, #0
 80044cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044d8:	4b77      	ldr	r3, [pc, #476]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	4a74      	ldr	r2, [pc, #464]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044fa:	2300      	movs	r3, #0
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004502:	460b      	mov	r3, r1
 8004504:	4313      	orrs	r3, r2
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004508:	4b6b      	ldr	r3, [pc, #428]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004518:	4a67      	ldr	r2, [pc, #412]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451a:	430b      	orrs	r3, r1
 800451c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	2100      	movs	r1, #0
 8004528:	62b9      	str	r1, [r7, #40]	@ 0x28
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004530:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d011      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	3308      	adds	r3, #8
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fb78 	bl	8004c38 <RCCEx_PLL2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800454e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	2100      	movs	r1, #0
 8004568:	6239      	str	r1, [r7, #32]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004570:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d011      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	3308      	adds	r3, #8
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb58 	bl	8004c38 <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	2100      	movs	r1, #0
 80045a8:	61b9      	str	r1, [r7, #24]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d011      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	3308      	adds	r3, #8
 80045c0:	2102      	movs	r1, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fb38 	bl	8004c38 <RCCEx_PLL2_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	2100      	movs	r1, #0
 80045e8:	6139      	str	r1, [r7, #16]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045f4:	460b      	mov	r3, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	d011      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	3328      	adds	r3, #40	@ 0x28
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fbca 	bl	8004d9c <RCCEx_PLL3_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	2100      	movs	r1, #0
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d011      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	3328      	adds	r3, #40	@ 0x28
 8004640:	2101      	movs	r1, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fbaa 	bl	8004d9c <RCCEx_PLL3_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	2100      	movs	r1, #0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d011      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	3328      	adds	r3, #40	@ 0x28
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fb8a 	bl	8004d9c <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800469e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80046b2:	46bd      	mov	sp, r7
 80046b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b8:	58024400 	.word	0x58024400

080046bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046c0:	f7fe fd96 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4904      	ldr	r1, [pc, #16]	@ (80046e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	58024400 	.word	0x58024400
 80046e4:	08006738 	.word	0x08006738

080046e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	@ 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046fa:	4b9f      	ldr	r3, [pc, #636]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fe:	0b1b      	lsrs	r3, r3, #12
 8004700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004704:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004706:	4b9c      	ldr	r3, [pc, #624]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004712:	4b99      	ldr	r3, [pc, #612]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004716:	08db      	lsrs	r3, r3, #3
 8004718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8111 	beq.w	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b02      	cmp	r3, #2
 800473a:	f000 8083 	beq.w	8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b02      	cmp	r3, #2
 8004742:	f200 80a1 	bhi.w	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d056      	beq.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004752:	e099      	b.n	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004754:	4b88      	ldr	r3, [pc, #544]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02d      	beq.n	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004760:	4b85      	ldr	r3, [pc, #532]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	08db      	lsrs	r3, r3, #3
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	4a84      	ldr	r2, [pc, #528]	@ (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b7b      	ldr	r3, [pc, #492]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a03 	vldr	s12, [r7, #12]
 800479e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047ba:	e087      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047fe:	e065      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b59      	ldr	r3, [pc, #356]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a03 	vldr	s12, [r7, #12]
 8004826:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004842:	e043      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800498c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004856:	4b48      	ldr	r3, [pc, #288]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004866:	ed97 6a03 	vldr	s12, [r7, #12]
 800486a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800487a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004886:	e021      	b.n	80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004892:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489a:	4b37      	ldr	r3, [pc, #220]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	0a5b      	lsrs	r3, r3, #9
 80048d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f2:	ee17 2a90 	vmov	r2, s15
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	0c1b      	lsrs	r3, r3, #16
 8004900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004914:	edd7 6a07 	vldr	s13, [r7, #28]
 8004918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004920:	ee17 2a90 	vmov	r2, s15
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004928:	4b13      	ldr	r3, [pc, #76]	@ (8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	0e1b      	lsrs	r3, r3, #24
 800492e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800493e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004942:	edd7 6a07 	vldr	s13, [r7, #28]
 8004946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494e:	ee17 2a90 	vmov	r2, s15
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004956:	e008      	b.n	800496a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
}
 800496a:	bf00      	nop
 800496c:	3724      	adds	r7, #36	@ 0x24
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	03d09000 	.word	0x03d09000
 8004980:	46000000 	.word	0x46000000
 8004984:	4c742400 	.word	0x4c742400
 8004988:	4a742400 	.word	0x4a742400
 800498c:	4af42400 	.word	0x4af42400

08004990 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	@ 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004998:	4ba1      	ldr	r3, [pc, #644]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049a2:	4b9f      	ldr	r3, [pc, #636]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049ba:	4b99      	ldr	r3, [pc, #612]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	08db      	lsrs	r3, r3, #3
 80049c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8111 	beq.w	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	f000 8083 	beq.w	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	f200 80a1 	bhi.w	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d056      	beq.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049fa:	e099      	b.n	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049fc:	4b88      	ldr	r3, [pc, #544]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d02d      	beq.n	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a08:	4b85      	ldr	r3, [pc, #532]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	4a84      	ldr	r2, [pc, #528]	@ (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
 8004a18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b7b      	ldr	r3, [pc, #492]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a62:	e087      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b6a      	ldr	r3, [pc, #424]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aa6:	e065      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b59      	ldr	r3, [pc, #356]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ace:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aea:	e043      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afe:	4b48      	ldr	r3, [pc, #288]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2e:	e021      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b37      	ldr	r3, [pc, #220]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b74:	4b2a      	ldr	r3, [pc, #168]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	0a5b      	lsrs	r3, r3, #9
 8004b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9a:	ee17 2a90 	vmov	r2, s15
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc8:	ee17 2a90 	vmov	r2, s15
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bd0:	4b13      	ldr	r3, [pc, #76]	@ (8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	0e1b      	lsrs	r3, r3, #24
 8004bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf6:	ee17 2a90 	vmov	r2, s15
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bfe:	e008      	b.n	8004c12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
}
 8004c12:	bf00      	nop
 8004c14:	3724      	adds	r7, #36	@ 0x24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
 8004c24:	03d09000 	.word	0x03d09000
 8004c28:	46000000 	.word	0x46000000
 8004c2c:	4c742400 	.word	0x4c742400
 8004c30:	4a742400 	.word	0x4a742400
 8004c34:	4af42400 	.word	0x4af42400

08004c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c46:	4b53      	ldr	r3, [pc, #332]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d101      	bne.n	8004c56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e099      	b.n	8004d8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c56:	4b4f      	ldr	r3, [pc, #316]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c62:	f7fc fa8f 	bl	8001184 <HAL_GetTick>
 8004c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c6a:	f7fc fa8b 	bl	8001184 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e086      	b.n	8004d8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c7c:	4b45      	ldr	r3, [pc, #276]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c88:	4b42      	ldr	r3, [pc, #264]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	493f      	ldr	r1, [pc, #252]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	025b      	lsls	r3, r3, #9
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ccc:	4931      	ldr	r1, [pc, #196]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cd2:	4b30      	ldr	r3, [pc, #192]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	492d      	ldr	r1, [pc, #180]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	f023 0220 	bic.w	r2, r3, #32
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	4928      	ldr	r1, [pc, #160]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cf6:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	4a26      	ldr	r2, [pc, #152]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	f023 0310 	bic.w	r3, r3, #16
 8004d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d02:	4b24      	ldr	r3, [pc, #144]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d06:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <RCCEx_PLL2_Config+0x160>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	69d2      	ldr	r2, [r2, #28]
 8004d0e:	00d2      	lsls	r2, r2, #3
 8004d10:	4920      	ldr	r1, [pc, #128]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d16:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	f043 0310 	orr.w	r3, r3, #16
 8004d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d28:	4b1a      	ldr	r3, [pc, #104]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	4a19      	ldr	r2, [pc, #100]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d34:	e00f      	b.n	8004d56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d106      	bne.n	8004d4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d3c:	4b15      	ldr	r3, [pc, #84]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	4a14      	ldr	r2, [pc, #80]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d48:	e005      	b.n	8004d56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d4a:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	4a11      	ldr	r2, [pc, #68]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d56:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d62:	f7fc fa0f 	bl	8001184 <HAL_GetTick>
 8004d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d68:	e008      	b.n	8004d7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d6a:	f7fc fa0b 	bl	8001184 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e006      	b.n	8004d8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
 8004d98:	ffff0007 	.word	0xffff0007

08004d9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004daa:	4b53      	ldr	r3, [pc, #332]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d101      	bne.n	8004dba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e099      	b.n	8004eee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dba:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc6:	f7fc f9dd 	bl	8001184 <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dcc:	e008      	b.n	8004de0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dce:	f7fc f9d9 	bl	8001184 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e086      	b.n	8004eee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de0:	4b45      	ldr	r3, [pc, #276]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dec:	4b42      	ldr	r3, [pc, #264]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	051b      	lsls	r3, r3, #20
 8004dfa:	493f      	ldr	r1, [pc, #252]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	025b      	lsls	r3, r3, #9
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e30:	4931      	ldr	r1, [pc, #196]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e36:	4b30      	ldr	r3, [pc, #192]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	492d      	ldr	r1, [pc, #180]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	4928      	ldr	r1, [pc, #160]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e5a:	4b27      	ldr	r3, [pc, #156]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5e:	4a26      	ldr	r2, [pc, #152]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e66:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e6a:	4b24      	ldr	r3, [pc, #144]	@ (8004efc <RCCEx_PLL3_Config+0x160>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	69d2      	ldr	r2, [r2, #28]
 8004e72:	00d2      	lsls	r2, r2, #3
 8004e74:	4920      	ldr	r1, [pc, #128]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	4a19      	ldr	r2, [pc, #100]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e98:	e00f      	b.n	8004eba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ea0:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	4a14      	ldr	r2, [pc, #80]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004eac:	e005      	b.n	8004eba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eae:	4b12      	ldr	r3, [pc, #72]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb2:	4a11      	ldr	r2, [pc, #68]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eba:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec6:	f7fc f95d 	bl	8001184 <HAL_GetTick>
 8004eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ece:	f7fc f959 	bl	8001184 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e006      	b.n	8004eee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	ffff0007 	.word	0xffff0007

08004f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e042      	b.n	8004f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fb fedf 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2224      	movs	r2, #36	@ 0x24
 8004f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fd90 	bl	8005a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f825 	bl	8004fa0 <UART_SetConfig>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e01b      	b.n	8004f98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fe0f 	bl	8005bb4 <UART_CheckIdleState>
 8004f96:	4603      	mov	r3, r0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa4:	b092      	sub	sp, #72	@ 0x48
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4bbe      	ldr	r3, [pc, #760]	@ (80052c8 <UART_SetConfig+0x328>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4ab3      	ldr	r2, [pc, #716]	@ (80052cc <UART_SetConfig+0x32c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005008:	4313      	orrs	r3, r2
 800500a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	4baf      	ldr	r3, [pc, #700]	@ (80052d0 <UART_SetConfig+0x330>)
 8005014:	4013      	ands	r3, r2
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800501c:	430b      	orrs	r3, r1
 800501e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	f023 010f 	bic.w	r1, r3, #15
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4aa6      	ldr	r2, [pc, #664]	@ (80052d4 <UART_SetConfig+0x334>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d177      	bne.n	8005130 <UART_SetConfig+0x190>
 8005040:	4ba5      	ldr	r3, [pc, #660]	@ (80052d8 <UART_SetConfig+0x338>)
 8005042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005044:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005048:	2b28      	cmp	r3, #40	@ 0x28
 800504a:	d86d      	bhi.n	8005128 <UART_SetConfig+0x188>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0xb4>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	080050f9 	.word	0x080050f9
 8005058:	08005129 	.word	0x08005129
 800505c:	08005129 	.word	0x08005129
 8005060:	08005129 	.word	0x08005129
 8005064:	08005129 	.word	0x08005129
 8005068:	08005129 	.word	0x08005129
 800506c:	08005129 	.word	0x08005129
 8005070:	08005129 	.word	0x08005129
 8005074:	08005101 	.word	0x08005101
 8005078:	08005129 	.word	0x08005129
 800507c:	08005129 	.word	0x08005129
 8005080:	08005129 	.word	0x08005129
 8005084:	08005129 	.word	0x08005129
 8005088:	08005129 	.word	0x08005129
 800508c:	08005129 	.word	0x08005129
 8005090:	08005129 	.word	0x08005129
 8005094:	08005109 	.word	0x08005109
 8005098:	08005129 	.word	0x08005129
 800509c:	08005129 	.word	0x08005129
 80050a0:	08005129 	.word	0x08005129
 80050a4:	08005129 	.word	0x08005129
 80050a8:	08005129 	.word	0x08005129
 80050ac:	08005129 	.word	0x08005129
 80050b0:	08005129 	.word	0x08005129
 80050b4:	08005111 	.word	0x08005111
 80050b8:	08005129 	.word	0x08005129
 80050bc:	08005129 	.word	0x08005129
 80050c0:	08005129 	.word	0x08005129
 80050c4:	08005129 	.word	0x08005129
 80050c8:	08005129 	.word	0x08005129
 80050cc:	08005129 	.word	0x08005129
 80050d0:	08005129 	.word	0x08005129
 80050d4:	08005119 	.word	0x08005119
 80050d8:	08005129 	.word	0x08005129
 80050dc:	08005129 	.word	0x08005129
 80050e0:	08005129 	.word	0x08005129
 80050e4:	08005129 	.word	0x08005129
 80050e8:	08005129 	.word	0x08005129
 80050ec:	08005129 	.word	0x08005129
 80050f0:	08005129 	.word	0x08005129
 80050f4:	08005121 	.word	0x08005121
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e222      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e21e      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e21a      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e216      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005118:	2320      	movs	r3, #32
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e212      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005120:	2340      	movs	r3, #64	@ 0x40
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e20e      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e20a      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a69      	ldr	r2, [pc, #420]	@ (80052dc <UART_SetConfig+0x33c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d130      	bne.n	800519c <UART_SetConfig+0x1fc>
 800513a:	4b67      	ldr	r3, [pc, #412]	@ (80052d8 <UART_SetConfig+0x338>)
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b05      	cmp	r3, #5
 8005144:	d826      	bhi.n	8005194 <UART_SetConfig+0x1f4>
 8005146:	a201      	add	r2, pc, #4	@ (adr r2, 800514c <UART_SetConfig+0x1ac>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005165 	.word	0x08005165
 8005150:	0800516d 	.word	0x0800516d
 8005154:	08005175 	.word	0x08005175
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	2300      	movs	r3, #0
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e1ec      	b.n	8005546 <UART_SetConfig+0x5a6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e1e8      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e1e4      	b.n	8005546 <UART_SetConfig+0x5a6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005182:	e1e0      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005184:	2320      	movs	r3, #32
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518a:	e1dc      	b.n	8005546 <UART_SetConfig+0x5a6>
 800518c:	2340      	movs	r3, #64	@ 0x40
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005192:	e1d8      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519a:	e1d4      	b.n	8005546 <UART_SetConfig+0x5a6>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a4f      	ldr	r2, [pc, #316]	@ (80052e0 <UART_SetConfig+0x340>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d130      	bne.n	8005208 <UART_SetConfig+0x268>
 80051a6:	4b4c      	ldr	r3, [pc, #304]	@ (80052d8 <UART_SetConfig+0x338>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d826      	bhi.n	8005200 <UART_SetConfig+0x260>
 80051b2:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <UART_SetConfig+0x218>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051d9 	.word	0x080051d9
 80051c0:	080051e1 	.word	0x080051e1
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e1b6      	b.n	8005546 <UART_SetConfig+0x5a6>
 80051d8:	2304      	movs	r3, #4
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051de:	e1b2      	b.n	8005546 <UART_SetConfig+0x5a6>
 80051e0:	2308      	movs	r3, #8
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e6:	e1ae      	b.n	8005546 <UART_SetConfig+0x5a6>
 80051e8:	2310      	movs	r3, #16
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e1aa      	b.n	8005546 <UART_SetConfig+0x5a6>
 80051f0:	2320      	movs	r3, #32
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f6:	e1a6      	b.n	8005546 <UART_SetConfig+0x5a6>
 80051f8:	2340      	movs	r3, #64	@ 0x40
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fe:	e1a2      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005206:	e19e      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	@ (80052e4 <UART_SetConfig+0x344>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d130      	bne.n	8005274 <UART_SetConfig+0x2d4>
 8005212:	4b31      	ldr	r3, [pc, #196]	@ (80052d8 <UART_SetConfig+0x338>)
 8005214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	2b05      	cmp	r3, #5
 800521c:	d826      	bhi.n	800526c <UART_SetConfig+0x2cc>
 800521e:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <UART_SetConfig+0x284>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	0800523d 	.word	0x0800523d
 8005228:	08005245 	.word	0x08005245
 800522c:	0800524d 	.word	0x0800524d
 8005230:	08005255 	.word	0x08005255
 8005234:	0800525d 	.word	0x0800525d
 8005238:	08005265 	.word	0x08005265
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e180      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e17c      	b.n	8005546 <UART_SetConfig+0x5a6>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e178      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e174      	b.n	8005546 <UART_SetConfig+0x5a6>
 800525c:	2320      	movs	r3, #32
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e170      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005264:	2340      	movs	r3, #64	@ 0x40
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526a:	e16c      	b.n	8005546 <UART_SetConfig+0x5a6>
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005272:	e168      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <UART_SetConfig+0x348>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d142      	bne.n	8005304 <UART_SetConfig+0x364>
 800527e:	4b16      	ldr	r3, [pc, #88]	@ (80052d8 <UART_SetConfig+0x338>)
 8005280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b05      	cmp	r3, #5
 8005288:	d838      	bhi.n	80052fc <UART_SetConfig+0x35c>
 800528a:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0x2f0>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052b1 	.word	0x080052b1
 8005298:	080052b9 	.word	0x080052b9
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052ed 	.word	0x080052ed
 80052a4:	080052f5 	.word	0x080052f5
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e14a      	b.n	8005546 <UART_SetConfig+0x5a6>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e146      	b.n	8005546 <UART_SetConfig+0x5a6>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e142      	b.n	8005546 <UART_SetConfig+0x5a6>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e13e      	b.n	8005546 <UART_SetConfig+0x5a6>
 80052c8:	cfff69f3 	.word	0xcfff69f3
 80052cc:	58000c00 	.word	0x58000c00
 80052d0:	11fff4ff 	.word	0x11fff4ff
 80052d4:	40011000 	.word	0x40011000
 80052d8:	58024400 	.word	0x58024400
 80052dc:	40004400 	.word	0x40004400
 80052e0:	40004800 	.word	0x40004800
 80052e4:	40004c00 	.word	0x40004c00
 80052e8:	40005000 	.word	0x40005000
 80052ec:	2320      	movs	r3, #32
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f2:	e128      	b.n	8005546 <UART_SetConfig+0x5a6>
 80052f4:	2340      	movs	r3, #64	@ 0x40
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e124      	b.n	8005546 <UART_SetConfig+0x5a6>
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e120      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4acb      	ldr	r2, [pc, #812]	@ (8005638 <UART_SetConfig+0x698>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d176      	bne.n	80053fc <UART_SetConfig+0x45c>
 800530e:	4bcb      	ldr	r3, [pc, #812]	@ (800563c <UART_SetConfig+0x69c>)
 8005310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005316:	2b28      	cmp	r3, #40	@ 0x28
 8005318:	d86c      	bhi.n	80053f4 <UART_SetConfig+0x454>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <UART_SetConfig+0x380>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	080053c5 	.word	0x080053c5
 8005324:	080053f5 	.word	0x080053f5
 8005328:	080053f5 	.word	0x080053f5
 800532c:	080053f5 	.word	0x080053f5
 8005330:	080053f5 	.word	0x080053f5
 8005334:	080053f5 	.word	0x080053f5
 8005338:	080053f5 	.word	0x080053f5
 800533c:	080053f5 	.word	0x080053f5
 8005340:	080053cd 	.word	0x080053cd
 8005344:	080053f5 	.word	0x080053f5
 8005348:	080053f5 	.word	0x080053f5
 800534c:	080053f5 	.word	0x080053f5
 8005350:	080053f5 	.word	0x080053f5
 8005354:	080053f5 	.word	0x080053f5
 8005358:	080053f5 	.word	0x080053f5
 800535c:	080053f5 	.word	0x080053f5
 8005360:	080053d5 	.word	0x080053d5
 8005364:	080053f5 	.word	0x080053f5
 8005368:	080053f5 	.word	0x080053f5
 800536c:	080053f5 	.word	0x080053f5
 8005370:	080053f5 	.word	0x080053f5
 8005374:	080053f5 	.word	0x080053f5
 8005378:	080053f5 	.word	0x080053f5
 800537c:	080053f5 	.word	0x080053f5
 8005380:	080053dd 	.word	0x080053dd
 8005384:	080053f5 	.word	0x080053f5
 8005388:	080053f5 	.word	0x080053f5
 800538c:	080053f5 	.word	0x080053f5
 8005390:	080053f5 	.word	0x080053f5
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053f5 	.word	0x080053f5
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	080053f5 	.word	0x080053f5
 80053a8:	080053f5 	.word	0x080053f5
 80053ac:	080053f5 	.word	0x080053f5
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053f5 	.word	0x080053f5
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e0bc      	b.n	8005546 <UART_SetConfig+0x5a6>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e0b8      	b.n	8005546 <UART_SetConfig+0x5a6>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e0b4      	b.n	8005546 <UART_SetConfig+0x5a6>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e0b0      	b.n	8005546 <UART_SetConfig+0x5a6>
 80053e4:	2320      	movs	r3, #32
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e0ac      	b.n	8005546 <UART_SetConfig+0x5a6>
 80053ec:	2340      	movs	r3, #64	@ 0x40
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e0a8      	b.n	8005546 <UART_SetConfig+0x5a6>
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e0a4      	b.n	8005546 <UART_SetConfig+0x5a6>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a8f      	ldr	r2, [pc, #572]	@ (8005640 <UART_SetConfig+0x6a0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d130      	bne.n	8005468 <UART_SetConfig+0x4c8>
 8005406:	4b8d      	ldr	r3, [pc, #564]	@ (800563c <UART_SetConfig+0x69c>)
 8005408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b05      	cmp	r3, #5
 8005410:	d826      	bhi.n	8005460 <UART_SetConfig+0x4c0>
 8005412:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <UART_SetConfig+0x478>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005431 	.word	0x08005431
 800541c:	08005439 	.word	0x08005439
 8005420:	08005441 	.word	0x08005441
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e086      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e082      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e07e      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e07a      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e076      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005458:	2340      	movs	r3, #64	@ 0x40
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e072      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005460:	2380      	movs	r3, #128	@ 0x80
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e06e      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a75      	ldr	r2, [pc, #468]	@ (8005644 <UART_SetConfig+0x6a4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d130      	bne.n	80054d4 <UART_SetConfig+0x534>
 8005472:	4b72      	ldr	r3, [pc, #456]	@ (800563c <UART_SetConfig+0x69c>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b05      	cmp	r3, #5
 800547c:	d826      	bhi.n	80054cc <UART_SetConfig+0x52c>
 800547e:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <UART_SetConfig+0x4e4>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	0800549d 	.word	0x0800549d
 8005488:	080054a5 	.word	0x080054a5
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054c5 	.word	0x080054c5
 800549c:	2300      	movs	r3, #0
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e050      	b.n	8005546 <UART_SetConfig+0x5a6>
 80054a4:	2304      	movs	r3, #4
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e04c      	b.n	8005546 <UART_SetConfig+0x5a6>
 80054ac:	2308      	movs	r3, #8
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e048      	b.n	8005546 <UART_SetConfig+0x5a6>
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e044      	b.n	8005546 <UART_SetConfig+0x5a6>
 80054bc:	2320      	movs	r3, #32
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e040      	b.n	8005546 <UART_SetConfig+0x5a6>
 80054c4:	2340      	movs	r3, #64	@ 0x40
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e03c      	b.n	8005546 <UART_SetConfig+0x5a6>
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e038      	b.n	8005546 <UART_SetConfig+0x5a6>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5b      	ldr	r2, [pc, #364]	@ (8005648 <UART_SetConfig+0x6a8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d130      	bne.n	8005540 <UART_SetConfig+0x5a0>
 80054de:	4b57      	ldr	r3, [pc, #348]	@ (800563c <UART_SetConfig+0x69c>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d826      	bhi.n	8005538 <UART_SetConfig+0x598>
 80054ea:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x550>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005509 	.word	0x08005509
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005519 	.word	0x08005519
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005529 	.word	0x08005529
 8005504:	08005531 	.word	0x08005531
 8005508:	2302      	movs	r3, #2
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e01a      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e016      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e012      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e00e      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005528:	2320      	movs	r3, #32
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e00a      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005530:	2340      	movs	r3, #64	@ 0x40
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e006      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e002      	b.n	8005546 <UART_SetConfig+0x5a6>
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3f      	ldr	r2, [pc, #252]	@ (8005648 <UART_SetConfig+0x6a8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	f040 80f8 	bne.w	8005742 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005552:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005556:	2b20      	cmp	r3, #32
 8005558:	dc46      	bgt.n	80055e8 <UART_SetConfig+0x648>
 800555a:	2b02      	cmp	r3, #2
 800555c:	f2c0 8082 	blt.w	8005664 <UART_SetConfig+0x6c4>
 8005560:	3b02      	subs	r3, #2
 8005562:	2b1e      	cmp	r3, #30
 8005564:	d87e      	bhi.n	8005664 <UART_SetConfig+0x6c4>
 8005566:	a201      	add	r2, pc, #4	@ (adr r2, 800556c <UART_SetConfig+0x5cc>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	080055ef 	.word	0x080055ef
 8005570:	08005665 	.word	0x08005665
 8005574:	080055f7 	.word	0x080055f7
 8005578:	08005665 	.word	0x08005665
 800557c:	08005665 	.word	0x08005665
 8005580:	08005665 	.word	0x08005665
 8005584:	08005607 	.word	0x08005607
 8005588:	08005665 	.word	0x08005665
 800558c:	08005665 	.word	0x08005665
 8005590:	08005665 	.word	0x08005665
 8005594:	08005665 	.word	0x08005665
 8005598:	08005665 	.word	0x08005665
 800559c:	08005665 	.word	0x08005665
 80055a0:	08005665 	.word	0x08005665
 80055a4:	08005617 	.word	0x08005617
 80055a8:	08005665 	.word	0x08005665
 80055ac:	08005665 	.word	0x08005665
 80055b0:	08005665 	.word	0x08005665
 80055b4:	08005665 	.word	0x08005665
 80055b8:	08005665 	.word	0x08005665
 80055bc:	08005665 	.word	0x08005665
 80055c0:	08005665 	.word	0x08005665
 80055c4:	08005665 	.word	0x08005665
 80055c8:	08005665 	.word	0x08005665
 80055cc:	08005665 	.word	0x08005665
 80055d0:	08005665 	.word	0x08005665
 80055d4:	08005665 	.word	0x08005665
 80055d8:	08005665 	.word	0x08005665
 80055dc:	08005665 	.word	0x08005665
 80055e0:	08005665 	.word	0x08005665
 80055e4:	08005657 	.word	0x08005657
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d037      	beq.n	800565c <UART_SetConfig+0x6bc>
 80055ec:	e03a      	b.n	8005664 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055ee:	f7ff f865 	bl	80046bc <HAL_RCCEx_GetD3PCLK1Freq>
 80055f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055f4:	e03c      	b.n	8005670 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff f874 	bl	80046e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005604:	e034      	b.n	8005670 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005606:	f107 0318 	add.w	r3, r7, #24
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f9c0 	bl	8004990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005614:	e02c      	b.n	8005670 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <UART_SetConfig+0x69c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005622:	4b06      	ldr	r3, [pc, #24]	@ (800563c <UART_SetConfig+0x69c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	08db      	lsrs	r3, r3, #3
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	4a07      	ldr	r2, [pc, #28]	@ (800564c <UART_SetConfig+0x6ac>)
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005634:	e01c      	b.n	8005670 <UART_SetConfig+0x6d0>
 8005636:	bf00      	nop
 8005638:	40011400 	.word	0x40011400
 800563c:	58024400 	.word	0x58024400
 8005640:	40007800 	.word	0x40007800
 8005644:	40007c00 	.word	0x40007c00
 8005648:	58000c00 	.word	0x58000c00
 800564c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005650:	4b9d      	ldr	r3, [pc, #628]	@ (80058c8 <UART_SetConfig+0x928>)
 8005652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005654:	e00c      	b.n	8005670 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005656:	4b9d      	ldr	r3, [pc, #628]	@ (80058cc <UART_SetConfig+0x92c>)
 8005658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800565a:	e009      	b.n	8005670 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005662:	e005      	b.n	8005670 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800566e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 81de 	beq.w	8005a34 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	4a94      	ldr	r2, [pc, #592]	@ (80058d0 <UART_SetConfig+0x930>)
 800567e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005682:	461a      	mov	r2, r3
 8005684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005686:	fbb3 f3f2 	udiv	r3, r3, r2
 800568a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005698:	429a      	cmp	r2, r3
 800569a:	d305      	bcc.n	80056a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d903      	bls.n	80056b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056ae:	e1c1      	b.n	8005a34 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b2:	2200      	movs	r2, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	60fa      	str	r2, [r7, #12]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	4a84      	ldr	r2, [pc, #528]	@ (80058d0 <UART_SetConfig+0x930>)
 80056be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2200      	movs	r2, #0
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056d2:	f7fa fe01 	bl	80002d8 <__aeabi_uldivmod>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	020b      	lsls	r3, r1, #8
 80056e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056ec:	0202      	lsls	r2, r0, #8
 80056ee:	6979      	ldr	r1, [r7, #20]
 80056f0:	6849      	ldr	r1, [r1, #4]
 80056f2:	0849      	lsrs	r1, r1, #1
 80056f4:	2000      	movs	r0, #0
 80056f6:	460c      	mov	r4, r1
 80056f8:	4605      	mov	r5, r0
 80056fa:	eb12 0804 	adds.w	r8, r2, r4
 80056fe:	eb43 0905 	adc.w	r9, r3, r5
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	469a      	mov	sl, r3
 800570a:	4693      	mov	fp, r2
 800570c:	4652      	mov	r2, sl
 800570e:	465b      	mov	r3, fp
 8005710:	4640      	mov	r0, r8
 8005712:	4649      	mov	r1, r9
 8005714:	f7fa fde0 	bl	80002d8 <__aeabi_uldivmod>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4613      	mov	r3, r2
 800571e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005726:	d308      	bcc.n	800573a <UART_SetConfig+0x79a>
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800572e:	d204      	bcs.n	800573a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	e17c      	b.n	8005a34 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005740:	e178      	b.n	8005a34 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800574a:	f040 80c5 	bne.w	80058d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800574e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005752:	2b20      	cmp	r3, #32
 8005754:	dc48      	bgt.n	80057e8 <UART_SetConfig+0x848>
 8005756:	2b00      	cmp	r3, #0
 8005758:	db7b      	blt.n	8005852 <UART_SetConfig+0x8b2>
 800575a:	2b20      	cmp	r3, #32
 800575c:	d879      	bhi.n	8005852 <UART_SetConfig+0x8b2>
 800575e:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <UART_SetConfig+0x7c4>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	080057ef 	.word	0x080057ef
 8005768:	080057f7 	.word	0x080057f7
 800576c:	08005853 	.word	0x08005853
 8005770:	08005853 	.word	0x08005853
 8005774:	080057ff 	.word	0x080057ff
 8005778:	08005853 	.word	0x08005853
 800577c:	08005853 	.word	0x08005853
 8005780:	08005853 	.word	0x08005853
 8005784:	0800580f 	.word	0x0800580f
 8005788:	08005853 	.word	0x08005853
 800578c:	08005853 	.word	0x08005853
 8005790:	08005853 	.word	0x08005853
 8005794:	08005853 	.word	0x08005853
 8005798:	08005853 	.word	0x08005853
 800579c:	08005853 	.word	0x08005853
 80057a0:	08005853 	.word	0x08005853
 80057a4:	0800581f 	.word	0x0800581f
 80057a8:	08005853 	.word	0x08005853
 80057ac:	08005853 	.word	0x08005853
 80057b0:	08005853 	.word	0x08005853
 80057b4:	08005853 	.word	0x08005853
 80057b8:	08005853 	.word	0x08005853
 80057bc:	08005853 	.word	0x08005853
 80057c0:	08005853 	.word	0x08005853
 80057c4:	08005853 	.word	0x08005853
 80057c8:	08005853 	.word	0x08005853
 80057cc:	08005853 	.word	0x08005853
 80057d0:	08005853 	.word	0x08005853
 80057d4:	08005853 	.word	0x08005853
 80057d8:	08005853 	.word	0x08005853
 80057dc:	08005853 	.word	0x08005853
 80057e0:	08005853 	.word	0x08005853
 80057e4:	08005845 	.word	0x08005845
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d02e      	beq.n	800584a <UART_SetConfig+0x8aa>
 80057ec:	e031      	b.n	8005852 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ee:	f7fd fd2f 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 80057f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057f4:	e033      	b.n	800585e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f6:	f7fd fd41 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 80057fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057fc:	e02f      	b.n	800585e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe ff70 	bl	80046e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800580c:	e027      	b.n	800585e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800580e:	f107 0318 	add.w	r3, r7, #24
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff f8bc 	bl	8004990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581c:	e01f      	b.n	800585e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800581e:	4b2d      	ldr	r3, [pc, #180]	@ (80058d4 <UART_SetConfig+0x934>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800582a:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <UART_SetConfig+0x934>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	4a24      	ldr	r2, [pc, #144]	@ (80058c8 <UART_SetConfig+0x928>)
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800583c:	e00f      	b.n	800585e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800583e:	4b22      	ldr	r3, [pc, #136]	@ (80058c8 <UART_SetConfig+0x928>)
 8005840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005842:	e00c      	b.n	800585e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005844:	4b21      	ldr	r3, [pc, #132]	@ (80058cc <UART_SetConfig+0x92c>)
 8005846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005848:	e009      	b.n	800585e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005850:	e005      	b.n	800585e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800585c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80e7 	beq.w	8005a34 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	4a19      	ldr	r2, [pc, #100]	@ (80058d0 <UART_SetConfig+0x930>)
 800586c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005870:	461a      	mov	r2, r3
 8005872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005874:	fbb3 f3f2 	udiv	r3, r3, r2
 8005878:	005a      	lsls	r2, r3, #1
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	441a      	add	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	2b0f      	cmp	r3, #15
 8005890:	d916      	bls.n	80058c0 <UART_SetConfig+0x920>
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005898:	d212      	bcs.n	80058c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	b29b      	uxth	r3, r3
 800589e:	f023 030f 	bic.w	r3, r3, #15
 80058a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058b2:	4313      	orrs	r3, r2
 80058b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	e0b9      	b.n	8005a34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058c6:	e0b5      	b.n	8005a34 <UART_SetConfig+0xa94>
 80058c8:	03d09000 	.word	0x03d09000
 80058cc:	003d0900 	.word	0x003d0900
 80058d0:	08006748 	.word	0x08006748
 80058d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058dc:	2b20      	cmp	r3, #32
 80058de:	dc49      	bgt.n	8005974 <UART_SetConfig+0x9d4>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db7c      	blt.n	80059de <UART_SetConfig+0xa3e>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d87a      	bhi.n	80059de <UART_SetConfig+0xa3e>
 80058e8:	a201      	add	r2, pc, #4	@ (adr r2, 80058f0 <UART_SetConfig+0x950>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	0800597b 	.word	0x0800597b
 80058f4:	08005983 	.word	0x08005983
 80058f8:	080059df 	.word	0x080059df
 80058fc:	080059df 	.word	0x080059df
 8005900:	0800598b 	.word	0x0800598b
 8005904:	080059df 	.word	0x080059df
 8005908:	080059df 	.word	0x080059df
 800590c:	080059df 	.word	0x080059df
 8005910:	0800599b 	.word	0x0800599b
 8005914:	080059df 	.word	0x080059df
 8005918:	080059df 	.word	0x080059df
 800591c:	080059df 	.word	0x080059df
 8005920:	080059df 	.word	0x080059df
 8005924:	080059df 	.word	0x080059df
 8005928:	080059df 	.word	0x080059df
 800592c:	080059df 	.word	0x080059df
 8005930:	080059ab 	.word	0x080059ab
 8005934:	080059df 	.word	0x080059df
 8005938:	080059df 	.word	0x080059df
 800593c:	080059df 	.word	0x080059df
 8005940:	080059df 	.word	0x080059df
 8005944:	080059df 	.word	0x080059df
 8005948:	080059df 	.word	0x080059df
 800594c:	080059df 	.word	0x080059df
 8005950:	080059df 	.word	0x080059df
 8005954:	080059df 	.word	0x080059df
 8005958:	080059df 	.word	0x080059df
 800595c:	080059df 	.word	0x080059df
 8005960:	080059df 	.word	0x080059df
 8005964:	080059df 	.word	0x080059df
 8005968:	080059df 	.word	0x080059df
 800596c:	080059df 	.word	0x080059df
 8005970:	080059d1 	.word	0x080059d1
 8005974:	2b40      	cmp	r3, #64	@ 0x40
 8005976:	d02e      	beq.n	80059d6 <UART_SetConfig+0xa36>
 8005978:	e031      	b.n	80059de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597a:	f7fd fc69 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 800597e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005980:	e033      	b.n	80059ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005982:	f7fd fc7b 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8005986:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005988:	e02f      	b.n	80059ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800598a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe feaa 	bl	80046e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005998:	e027      	b.n	80059ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800599a:	f107 0318 	add.w	r3, r7, #24
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe fff6 	bl	8004990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a8:	e01f      	b.n	80059ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005a60 <UART_SetConfig+0xac0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a60 <UART_SetConfig+0xac0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	08db      	lsrs	r3, r3, #3
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	4a28      	ldr	r2, [pc, #160]	@ (8005a64 <UART_SetConfig+0xac4>)
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059c8:	e00f      	b.n	80059ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80059ca:	4b26      	ldr	r3, [pc, #152]	@ (8005a64 <UART_SetConfig+0xac4>)
 80059cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ce:	e00c      	b.n	80059ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059d0:	4b25      	ldr	r3, [pc, #148]	@ (8005a68 <UART_SetConfig+0xac8>)
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d4:	e009      	b.n	80059ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059dc:	e005      	b.n	80059ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059e8:	bf00      	nop
    }

    if (pclk != 0U)
 80059ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d021      	beq.n	8005a34 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <UART_SetConfig+0xacc>)
 80059f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059fa:	461a      	mov	r2, r3
 80059fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	441a      	add	r2, r3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a16:	2b0f      	cmp	r3, #15
 8005a18:	d909      	bls.n	8005a2e <UART_SetConfig+0xa8e>
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a20:	d205      	bcs.n	8005a2e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60da      	str	r2, [r3, #12]
 8005a2c:	e002      	b.n	8005a34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2200      	movs	r2, #0
 8005a48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a50:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3748      	adds	r7, #72	@ 0x48
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5e:	bf00      	nop
 8005a60:	58024400 	.word	0x58024400
 8005a64:	03d09000 	.word	0x03d09000
 8005a68:	003d0900 	.word	0x003d0900
 8005a6c:	08006748 	.word	0x08006748

08005a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b6e:	d10a      	bne.n	8005b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b098      	sub	sp, #96	@ 0x60
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc4:	f7fb fade 	bl	8001184 <HAL_GetTick>
 8005bc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d12f      	bne.n	8005c38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f88e 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d022      	beq.n	8005c38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e6      	bne.n	8005bf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e063      	b.n	8005d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d149      	bne.n	8005cda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f857 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d03c      	beq.n	8005cda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cb2:	61fa      	str	r2, [r7, #28]
 8005cb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e012      	b.n	8005d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3758      	adds	r7, #88	@ 0x58
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d18:	e04f      	b.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d04b      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d22:	f7fb fa2f 	bl	8001184 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d302      	bcc.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e04e      	b.n	8005dda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d037      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b80      	cmp	r3, #128	@ 0x80
 8005d4e:	d034      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b40      	cmp	r3, #64	@ 0x40
 8005d54:	d031      	beq.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d110      	bne.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2208      	movs	r2, #8
 8005d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f839 	bl	8005de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2208      	movs	r2, #8
 8005d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e029      	b.n	8005dda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d94:	d111      	bne.n	8005dba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f81f 	bl	8005de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e00f      	b.n	8005dda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d0a0      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b095      	sub	sp, #84	@ 0x54
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e6      	bne.n	8005dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	4b1e      	ldr	r3, [pc, #120]	@ (8005eac <UART_EndRxTransfer+0xc8>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d118      	bne.n	8005e8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0310 	bic.w	r3, r3, #16
 8005e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	613b      	str	r3, [r7, #16]
   return(result);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e6      	bne.n	8005e5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ea0:	bf00      	nop
 8005ea2:	3754      	adds	r7, #84	@ 0x54
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	effffffe 	.word	0xeffffffe

08005eb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e027      	b.n	8005f16 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	@ 0x24
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e02d      	b.n	8005f96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2224      	movs	r2, #36	@ 0x24
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f850 	bl	800601c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e02d      	b.n	8006012 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2224      	movs	r2, #36	@ 0x24
 8005fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f812 	bl	800601c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006028:	2b00      	cmp	r3, #0
 800602a:	d108      	bne.n	800603e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800603c:	e031      	b.n	80060a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800603e:	2310      	movs	r3, #16
 8006040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006042:	2310      	movs	r3, #16
 8006044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	0e5b      	lsrs	r3, r3, #25
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0f5b      	lsrs	r3, r3, #29
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	7b3a      	ldrb	r2, [r7, #12]
 800606a:	4911      	ldr	r1, [pc, #68]	@ (80060b0 <UARTEx_SetNbDataToProcess+0x94>)
 800606c:	5c8a      	ldrb	r2, [r1, r2]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006072:	7b3a      	ldrb	r2, [r7, #12]
 8006074:	490f      	ldr	r1, [pc, #60]	@ (80060b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006078:	fb93 f3f2 	sdiv	r3, r3, r2
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	7b7a      	ldrb	r2, [r7, #13]
 8006088:	4909      	ldr	r1, [pc, #36]	@ (80060b0 <UARTEx_SetNbDataToProcess+0x94>)
 800608a:	5c8a      	ldrb	r2, [r1, r2]
 800608c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006090:	7b7a      	ldrb	r2, [r7, #13]
 8006092:	4908      	ldr	r1, [pc, #32]	@ (80060b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006096:	fb93 f3f2 	sdiv	r3, r3, r2
 800609a:	b29a      	uxth	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	08006760 	.word	0x08006760
 80060b4:	08006768 	.word	0x08006768

080060b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b8:	b084      	sub	sp, #16
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	f107 001c 	add.w	r0, r7, #28
 80060c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d121      	bne.n	8006116 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006194 <USB_CoreInit+0xdc>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d105      	bne.n	800610a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 faaa 	bl	8006664 <USB_CoreReset>
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
 8006114:	e01b      	b.n	800614e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa9e 	bl	8006664 <USB_CoreReset>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800612c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006140:	e005      	b.n	800614e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006146:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800614e:	7fbb      	ldrb	r3, [r7, #30]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d116      	bne.n	8006182 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006158:	b29a      	uxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <USB_CoreInit+0xe0>)
 8006164:	4313      	orrs	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f043 0206 	orr.w	r2, r3, #6
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f043 0220 	orr.w	r2, r3, #32
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800618e:	b004      	add	sp, #16
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	ffbdffbf 	.word	0xffbdffbf
 8006198:	03ee0000 	.word	0x03ee0000

0800619c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f023 0201 	bic.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d115      	bne.n	800620c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061ec:	200a      	movs	r0, #10
 80061ee:	f7fa ffd5 	bl	800119c <HAL_Delay>
      ms += 10U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	330a      	adds	r3, #10
 80061f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa25 	bl	8006648 <USB_GetMode>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b01      	cmp	r3, #1
 8006202:	d01e      	beq.n	8006242 <USB_SetCurrentMode+0x84>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2bc7      	cmp	r3, #199	@ 0xc7
 8006208:	d9f0      	bls.n	80061ec <USB_SetCurrentMode+0x2e>
 800620a:	e01a      	b.n	8006242 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d115      	bne.n	800623e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800621e:	200a      	movs	r0, #10
 8006220:	f7fa ffbc 	bl	800119c <HAL_Delay>
      ms += 10U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	330a      	adds	r3, #10
 8006228:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa0c 	bl	8006648 <USB_GetMode>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <USB_SetCurrentMode+0x84>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2bc7      	cmp	r3, #199	@ 0xc7
 800623a:	d9f0      	bls.n	800621e <USB_SetCurrentMode+0x60>
 800623c:	e001      	b.n	8006242 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e005      	b.n	800624e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2bc8      	cmp	r3, #200	@ 0xc8
 8006246:	d101      	bne.n	800624c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006258:	b084      	sub	sp, #16
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e009      	b.n	800628c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3340      	adds	r3, #64	@ 0x40
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	2200      	movs	r2, #0
 8006284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3301      	adds	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b0e      	cmp	r3, #14
 8006290:	d9f2      	bls.n	8006278 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006292:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11c      	bne.n	80062d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062a8:	f043 0302 	orr.w	r3, r3, #2
 80062ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e005      	b.n	80062e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062e6:	461a      	mov	r2, r3
 80062e8:	2300      	movs	r3, #0
 80062ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d10d      	bne.n	8006310 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062fc:	2100      	movs	r1, #0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f968 	bl	80065d4 <USB_SetDevSpeed>
 8006304:	e008      	b.n	8006318 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006306:	2101      	movs	r1, #1
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f963 	bl	80065d4 <USB_SetDevSpeed>
 800630e:	e003      	b.n	8006318 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006310:	2103      	movs	r1, #3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f95e 	bl	80065d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006318:	2110      	movs	r1, #16
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f8fa 	bl	8006514 <USB_FlushTxFifo>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f924 	bl	8006578 <USB_FlushRxFifo>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006340:	461a      	mov	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800634c:	461a      	mov	r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006358:	461a      	mov	r2, r3
 800635a:	2300      	movs	r3, #0
 800635c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	e043      	b.n	80063ec <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800637a:	d118      	bne.n	80063ae <USB_DevInit+0x156>
    {
      if (i == 0U)
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638e:	461a      	mov	r2, r3
 8006390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e013      	b.n	80063c0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a4:	461a      	mov	r2, r3
 80063a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	e008      	b.n	80063c0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ba:	461a      	mov	r2, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063cc:	461a      	mov	r2, r3
 80063ce:	2300      	movs	r3, #0
 80063d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063de:	461a      	mov	r2, r3
 80063e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3301      	adds	r3, #1
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063f0:	461a      	mov	r2, r3
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d3b5      	bcc.n	8006364 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e043      	b.n	8006486 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006414:	d118      	bne.n	8006448 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006428:	461a      	mov	r2, r3
 800642a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	e013      	b.n	800645a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643e:	461a      	mov	r2, r3
 8006440:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	e008      	b.n	800645a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006454:	461a      	mov	r2, r3
 8006456:	2300      	movs	r3, #0
 8006458:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006466:	461a      	mov	r2, r3
 8006468:	2300      	movs	r3, #0
 800646a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	461a      	mov	r2, r3
 800647a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800647e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	3301      	adds	r3, #1
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800648a:	461a      	mov	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4293      	cmp	r3, r2
 8006490:	d3b5      	bcc.n	80063fe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80064b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	f043 0210 	orr.w	r2, r3, #16
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	4b0f      	ldr	r3, [pc, #60]	@ (800650c <USB_DevInit+0x2b4>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f043 0208 	orr.w	r2, r3, #8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d105      	bne.n	80064fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <USB_DevInit+0x2b8>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006508:	b004      	add	sp, #16
 800650a:	4770      	bx	lr
 800650c:	803c3800 	.word	0x803c3800
 8006510:	40000004 	.word	0x40000004

08006514 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800652e:	d901      	bls.n	8006534 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e01b      	b.n	800656c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	daf2      	bge.n	8006522 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	019b      	lsls	r3, r3, #6
 8006544:	f043 0220 	orr.w	r2, r3, #32
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006558:	d901      	bls.n	800655e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e006      	b.n	800656c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b20      	cmp	r3, #32
 8006568:	d0f0      	beq.n	800654c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006590:	d901      	bls.n	8006596 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e018      	b.n	80065c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	daf2      	bge.n	8006584 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2210      	movs	r2, #16
 80065a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065b4:	d901      	bls.n	80065ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e006      	b.n	80065c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d0f0      	beq.n	80065a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065f4:	4313      	orrs	r3, r2
 80065f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006620:	f023 0303 	bic.w	r3, r3, #3
 8006624:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006634:	f043 0302 	orr.w	r3, r3, #2
 8006638:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	f003 0301 	and.w	r3, r3, #1
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800667c:	d901      	bls.n	8006682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e01b      	b.n	80066ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	daf2      	bge.n	8006670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066a6:	d901      	bls.n	80066ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d0f0      	beq.n	800669a <USB_CoreReset+0x36>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <memset>:
 80066c6:	4402      	add	r2, r0
 80066c8:	4603      	mov	r3, r0
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d100      	bne.n	80066d0 <memset+0xa>
 80066ce:	4770      	bx	lr
 80066d0:	f803 1b01 	strb.w	r1, [r3], #1
 80066d4:	e7f9      	b.n	80066ca <memset+0x4>
	...

080066d8 <__libc_init_array>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	4d0d      	ldr	r5, [pc, #52]	@ (8006710 <__libc_init_array+0x38>)
 80066dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006714 <__libc_init_array+0x3c>)
 80066de:	1b64      	subs	r4, r4, r5
 80066e0:	10a4      	asrs	r4, r4, #2
 80066e2:	2600      	movs	r6, #0
 80066e4:	42a6      	cmp	r6, r4
 80066e6:	d109      	bne.n	80066fc <__libc_init_array+0x24>
 80066e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006718 <__libc_init_array+0x40>)
 80066ea:	4c0c      	ldr	r4, [pc, #48]	@ (800671c <__libc_init_array+0x44>)
 80066ec:	f000 f818 	bl	8006720 <_init>
 80066f0:	1b64      	subs	r4, r4, r5
 80066f2:	10a4      	asrs	r4, r4, #2
 80066f4:	2600      	movs	r6, #0
 80066f6:	42a6      	cmp	r6, r4
 80066f8:	d105      	bne.n	8006706 <__libc_init_array+0x2e>
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006700:	4798      	blx	r3
 8006702:	3601      	adds	r6, #1
 8006704:	e7ee      	b.n	80066e4 <__libc_init_array+0xc>
 8006706:	f855 3b04 	ldr.w	r3, [r5], #4
 800670a:	4798      	blx	r3
 800670c:	3601      	adds	r6, #1
 800670e:	e7f2      	b.n	80066f6 <__libc_init_array+0x1e>
 8006710:	08006778 	.word	0x08006778
 8006714:	08006778 	.word	0x08006778
 8006718:	08006778 	.word	0x08006778
 800671c:	0800677c 	.word	0x0800677c

08006720 <_init>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	bf00      	nop
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr

0800672c <_fini>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr
